// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufRpcEngine.proto

#include "ProtobufRpcEngine.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Hdfs {
namespace Internal {
class RequestHeaderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeaderProto>
      _instance;
} _RequestHeaderProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
static void
InitDefaultsscc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RequestHeaderProto_default_instance_;
    new (ptr)::Hdfs::Internal::RequestHeaderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RequestHeaderProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_ProtobufRpcEngine_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_ProtobufRpcEngine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_ProtobufRpcEngine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_ProtobufRpcEngine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RequestHeaderProto, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RequestHeaderProto,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RequestHeaderProto,
                              methodname_),
        PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RequestHeaderProto,
                              declaringclassprotocolname_),
        PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RequestHeaderProto,
                              clientprotocolversion_),
        0,
        1,
        2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::Hdfs::Internal::RequestHeaderProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RequestHeaderProto_default_instance_),
};

const char descriptor_table_protodef_ProtobufRpcEngine_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\027ProtobufRpcEngine.proto\022\rHdfs.Internal"
        "\"k\n\022RequestHeaderProto\022\022\n\nmethodName\030\001 \002"
        "(\t\022\"\n\032declaringClassProtocolName\030\002 \002(\t\022\035"
        "\n\025clientProtocolVersion\030\003 \002(\004B<\n\036org.apa"
        "che.hadoop.ipc.protobufB\027ProtobufRpcEngi"
        "neProtos\240\001\001";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_ProtobufRpcEngine_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_ProtobufRpcEngine_2eproto_sccs[1] = {
        &scc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_ProtobufRpcEngine_2eproto_once;
static bool descriptor_table_ProtobufRpcEngine_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ProtobufRpcEngine_2eproto = {
        &descriptor_table_ProtobufRpcEngine_2eproto_initialized,
        descriptor_table_protodef_ProtobufRpcEngine_2eproto,
        "ProtobufRpcEngine.proto",
        211,
        &descriptor_table_ProtobufRpcEngine_2eproto_once,
        descriptor_table_ProtobufRpcEngine_2eproto_sccs,
        descriptor_table_ProtobufRpcEngine_2eproto_deps,
        1,
        0,
        schemas,
        file_default_instances,
        TableStruct_ProtobufRpcEngine_2eproto::offsets,
        file_level_metadata_ProtobufRpcEngine_2eproto,
        1,
        file_level_enum_descriptors_ProtobufRpcEngine_2eproto,
        file_level_service_descriptors_ProtobufRpcEngine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProtobufRpcEngine_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_ProtobufRpcEngine_2eproto),
     true);
namespace Hdfs {
namespace Internal {

// ===================================================================

void RequestHeaderProto::InitAsDefaultInstance() {}
class RequestHeaderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestHeaderProto>()._has_bits_);
  static void set_has_methodname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_declaringclassprotocolname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientprotocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RequestHeaderProto::RequestHeaderProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RequestHeaderProto)
}
RequestHeaderProto::RequestHeaderProto(const RequestHeaderProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  methodname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_methodname()) {
    methodname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.methodname_);
  }
  declaringclassprotocolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_declaringclassprotocolname()) {
    declaringclassprotocolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.declaringclassprotocolname_);
  }
  clientprotocolversion_ = from.clientprotocolversion_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RequestHeaderProto)
}

void RequestHeaderProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto.base);
  methodname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declaringclassprotocolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientprotocolversion_ = PROTOBUF_ULONGLONG(0);
}

RequestHeaderProto::~RequestHeaderProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RequestHeaderProto)
  SharedDtor();
}

void RequestHeaderProto::SharedDtor() {
  methodname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declaringclassprotocolname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestHeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeaderProto& RequestHeaderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RequestHeaderProto_ProtobufRpcEngine_2eproto.base);
  return *internal_default_instance();
}

void RequestHeaderProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RequestHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      methodname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      declaringclassprotocolname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  clientprotocolversion_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RequestHeaderProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string methodName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_methodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RequestHeaderProto.methodName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string declaringClassProtocolName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_declaringclassprotocolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 clientProtocolVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clientprotocolversion(&has_bits);
          clientprotocolversion_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeaderProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RequestHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string methodName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_methodname().data(),
        static_cast<int>(this->_internal_methodname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RequestHeaderProto.methodName");
    target = stream->WriteStringMaybeAliased(1, this->_internal_methodname(),
                                             target);
  }

  // required string declaringClassProtocolName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_declaringclassprotocolname().data(),
        static_cast<int>(this->_internal_declaringclassprotocolname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_declaringclassprotocolname(), target);
  }

  // required uint64 clientProtocolVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->_internal_clientprotocolversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RequestHeaderProto)
  return target;
}

size_t RequestHeaderProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.RequestHeaderProto)
  size_t total_size = 0;

  if (_internal_has_methodname()) {
    // required string methodName = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_methodname());
  }

  if (_internal_has_declaringclassprotocolname()) {
    // required string declaringClassProtocolName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_declaringclassprotocolname());
  }

  if (_internal_has_clientprotocolversion()) {
    // required uint64 clientProtocolVersion = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_clientprotocolversion());
  }

  return total_size;
}
size_t RequestHeaderProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RequestHeaderProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string methodName = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_methodname());

    // required string declaringClassProtocolName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_declaringclassprotocolname());

    // required uint64 clientProtocolVersion = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_clientprotocolversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeaderProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RequestHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeaderProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeaderProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RequestHeaderProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RequestHeaderProto)
    MergeFrom(*source);
  }
}

void RequestHeaderProto::MergeFrom(const RequestHeaderProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RequestHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      methodname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.methodname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      declaringclassprotocolname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.declaringclassprotocolname_);
    }
    if (cached_has_bits & 0x00000004u) {
      clientprotocolversion_ = from.clientprotocolversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestHeaderProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RequestHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeaderProto::CopyFrom(const RequestHeaderProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RequestHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeaderProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RequestHeaderProto::InternalSwap(RequestHeaderProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  methodname_.Swap(
      &other->methodname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  declaringclassprotocolname_.Swap(
      &other->declaringclassprotocolname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(clientprotocolversion_, other->clientprotocolversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaderProto::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RequestHeaderProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RequestHeaderProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RequestHeaderProto>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
