// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenodeProtocol.proto

#include "ClientNamenodeProtocol.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
        scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
        scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
        scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ContentSummaryProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_CorruptFileBlocksProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_DataEncryptionKeyProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_DatanodeIDProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_DatanodeInfoProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_DirectoryListingProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ExtendedBlockProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_FsPermissionProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_FsServerDefaultsProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<3>
        scc_info_HdfsFileStatusProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<3>
        scc_info_LocatedBlockProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_LocatedBlocksProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_SnapshotDiffReportProto_hdfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hdfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_SnapshottableDirectoryListingProto_hdfs_2eproto;
namespace Hdfs {
namespace Internal {
class GetBlockLocationsRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetBlockLocationsRequestProto>
      _instance;
} _GetBlockLocationsRequestProto_default_instance_;
class GetBlockLocationsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetBlockLocationsResponseProto>
      _instance;
} _GetBlockLocationsResponseProto_default_instance_;
class GetServerDefaultsRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetServerDefaultsRequestProto>
      _instance;
} _GetServerDefaultsRequestProto_default_instance_;
class GetServerDefaultsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetServerDefaultsResponseProto>
      _instance;
} _GetServerDefaultsResponseProto_default_instance_;
class CreateRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRequestProto>
      _instance;
} _CreateRequestProto_default_instance_;
class CreateResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateResponseProto>
      _instance;
} _CreateResponseProto_default_instance_;
class AppendRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRequestProto>
      _instance;
} _AppendRequestProto_default_instance_;
class AppendResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendResponseProto>
      _instance;
} _AppendResponseProto_default_instance_;
class SetReplicationRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetReplicationRequestProto>
      _instance;
} _SetReplicationRequestProto_default_instance_;
class SetReplicationResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetReplicationResponseProto>
      _instance;
} _SetReplicationResponseProto_default_instance_;
class SetPermissionRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetPermissionRequestProto>
      _instance;
} _SetPermissionRequestProto_default_instance_;
class SetPermissionResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetPermissionResponseProto>
      _instance;
} _SetPermissionResponseProto_default_instance_;
class SetOwnerRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetOwnerRequestProto>
      _instance;
} _SetOwnerRequestProto_default_instance_;
class SetOwnerResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetOwnerResponseProto>
      _instance;
} _SetOwnerResponseProto_default_instance_;
class AbandonBlockRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AbandonBlockRequestProto>
      _instance;
} _AbandonBlockRequestProto_default_instance_;
class AbandonBlockResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AbandonBlockResponseProto>
      _instance;
} _AbandonBlockResponseProto_default_instance_;
class AddBlockRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddBlockRequestProto>
      _instance;
} _AddBlockRequestProto_default_instance_;
class AddBlockResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AddBlockResponseProto>
      _instance;
} _AddBlockResponseProto_default_instance_;
class GetAdditionalDatanodeRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetAdditionalDatanodeRequestProto>
      _instance;
} _GetAdditionalDatanodeRequestProto_default_instance_;
class GetAdditionalDatanodeResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetAdditionalDatanodeResponseProto>
      _instance;
} _GetAdditionalDatanodeResponseProto_default_instance_;
class CompleteRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteRequestProto>
      _instance;
} _CompleteRequestProto_default_instance_;
class CompleteResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CompleteResponseProto>
      _instance;
} _CompleteResponseProto_default_instance_;
class ReportBadBlocksRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ReportBadBlocksRequestProto>
      _instance;
} _ReportBadBlocksRequestProto_default_instance_;
class ReportBadBlocksResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ReportBadBlocksResponseProto>
      _instance;
} _ReportBadBlocksResponseProto_default_instance_;
class ConcatRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcatRequestProto>
      _instance;
} _ConcatRequestProto_default_instance_;
class ConcatResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcatResponseProto>
      _instance;
} _ConcatResponseProto_default_instance_;
class TruncateRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TruncateRequestProto>
      _instance;
} _TruncateRequestProto_default_instance_;
class TruncateResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      TruncateResponseProto>
      _instance;
} _TruncateResponseProto_default_instance_;
class GetLeaseRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLeaseRequestProto>
      _instance;
} _GetLeaseRequestProto_default_instance_;
class GetLeaseResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetLeaseResponseProto>
      _instance;
} _GetLeaseResponseProto_default_instance_;
class ReleaseLeaseRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ReleaseLeaseRequestProto>
      _instance;
} _ReleaseLeaseRequestProto_default_instance_;
class ReleaseLeaseResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ReleaseLeaseResponseProto>
      _instance;
} _ReleaseLeaseResponseProto_default_instance_;
class RenameRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameRequestProto>
      _instance;
} _RenameRequestProto_default_instance_;
class RenameResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameResponseProto>
      _instance;
} _RenameResponseProto_default_instance_;
class Rename2RequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rename2RequestProto>
      _instance;
} _Rename2RequestProto_default_instance_;
class Rename2ResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rename2ResponseProto>
      _instance;
} _Rename2ResponseProto_default_instance_;
class DeleteRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRequestProto>
      _instance;
} _DeleteRequestProto_default_instance_;
class DeleteResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResponseProto>
      _instance;
} _DeleteResponseProto_default_instance_;
class MkdirsRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MkdirsRequestProto>
      _instance;
} _MkdirsRequestProto_default_instance_;
class MkdirsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MkdirsResponseProto>
      _instance;
} _MkdirsResponseProto_default_instance_;
class GetListingRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetListingRequestProto>
      _instance;
} _GetListingRequestProto_default_instance_;
class GetListingResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetListingResponseProto>
      _instance;
} _GetListingResponseProto_default_instance_;
class GetSnapshottableDirListingRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetSnapshottableDirListingRequestProto>
      _instance;
} _GetSnapshottableDirListingRequestProto_default_instance_;
class GetSnapshottableDirListingResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetSnapshottableDirListingResponseProto>
      _instance;
} _GetSnapshottableDirListingResponseProto_default_instance_;
class GetSnapshotDiffReportRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetSnapshotDiffReportRequestProto>
      _instance;
} _GetSnapshotDiffReportRequestProto_default_instance_;
class GetSnapshotDiffReportResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetSnapshotDiffReportResponseProto>
      _instance;
} _GetSnapshotDiffReportResponseProto_default_instance_;
class RenewLeaseRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RenewLeaseRequestProto>
      _instance;
} _RenewLeaseRequestProto_default_instance_;
class RenewLeaseResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RenewLeaseResponseProto>
      _instance;
} _RenewLeaseResponseProto_default_instance_;
class RecoverLeaseRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RecoverLeaseRequestProto>
      _instance;
} _RecoverLeaseRequestProto_default_instance_;
class RecoverLeaseResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RecoverLeaseResponseProto>
      _instance;
} _RecoverLeaseResponseProto_default_instance_;
class GetFsStatusRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFsStatusRequestProto>
      _instance;
} _GetFsStatusRequestProto_default_instance_;
class GetFsStatsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFsStatsResponseProto>
      _instance;
} _GetFsStatsResponseProto_default_instance_;
class GetDatanodeReportRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetDatanodeReportRequestProto>
      _instance;
} _GetDatanodeReportRequestProto_default_instance_;
class GetDatanodeReportResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetDatanodeReportResponseProto>
      _instance;
} _GetDatanodeReportResponseProto_default_instance_;
class GetPreferredBlockSizeRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetPreferredBlockSizeRequestProto>
      _instance;
} _GetPreferredBlockSizeRequestProto_default_instance_;
class GetPreferredBlockSizeResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetPreferredBlockSizeResponseProto>
      _instance;
} _GetPreferredBlockSizeResponseProto_default_instance_;
class SetSafeModeRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetSafeModeRequestProto>
      _instance;
} _SetSafeModeRequestProto_default_instance_;
class SetSafeModeResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetSafeModeResponseProto>
      _instance;
} _SetSafeModeResponseProto_default_instance_;
class SaveNamespaceRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SaveNamespaceRequestProto>
      _instance;
} _SaveNamespaceRequestProto_default_instance_;
class SaveNamespaceResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SaveNamespaceResponseProto>
      _instance;
} _SaveNamespaceResponseProto_default_instance_;
class RollEditsRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RollEditsRequestProto>
      _instance;
} _RollEditsRequestProto_default_instance_;
class RollEditsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RollEditsResponseProto>
      _instance;
} _RollEditsResponseProto_default_instance_;
class RestoreFailedStorageRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RestoreFailedStorageRequestProto>
      _instance;
} _RestoreFailedStorageRequestProto_default_instance_;
class RestoreFailedStorageResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RestoreFailedStorageResponseProto>
      _instance;
} _RestoreFailedStorageResponseProto_default_instance_;
class RefreshNodesRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RefreshNodesRequestProto>
      _instance;
} _RefreshNodesRequestProto_default_instance_;
class RefreshNodesResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RefreshNodesResponseProto>
      _instance;
} _RefreshNodesResponseProto_default_instance_;
class FinalizeUpgradeRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      FinalizeUpgradeRequestProto>
      _instance;
} _FinalizeUpgradeRequestProto_default_instance_;
class FinalizeUpgradeResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      FinalizeUpgradeResponseProto>
      _instance;
} _FinalizeUpgradeResponseProto_default_instance_;
class ListCorruptFileBlocksRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCorruptFileBlocksRequestProto>
      _instance;
} _ListCorruptFileBlocksRequestProto_default_instance_;
class ListCorruptFileBlocksResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCorruptFileBlocksResponseProto>
      _instance;
} _ListCorruptFileBlocksResponseProto_default_instance_;
class MetaSaveRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaSaveRequestProto>
      _instance;
} _MetaSaveRequestProto_default_instance_;
class MetaSaveResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      MetaSaveResponseProto>
      _instance;
} _MetaSaveResponseProto_default_instance_;
class GetFileInfoRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFileInfoRequestProto>
      _instance;
} _GetFileInfoRequestProto_default_instance_;
class GetFileInfoResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFileInfoResponseProto>
      _instance;
} _GetFileInfoResponseProto_default_instance_;
class IsFileClosedRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      IsFileClosedRequestProto>
      _instance;
} _IsFileClosedRequestProto_default_instance_;
class IsFileClosedResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      IsFileClosedResponseProto>
      _instance;
} _IsFileClosedResponseProto_default_instance_;
class CacheDirectiveInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CacheDirectiveInfoProto>
      _instance;
} _CacheDirectiveInfoProto_default_instance_;
class CacheDirectiveInfoExpirationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CacheDirectiveInfoExpirationProto>
      _instance;
} _CacheDirectiveInfoExpirationProto_default_instance_;
class CacheDirectiveStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CacheDirectiveStatsProto>
      _instance;
} _CacheDirectiveStatsProto_default_instance_;
class AddCacheDirectiveRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AddCacheDirectiveRequestProto>
      _instance;
} _AddCacheDirectiveRequestProto_default_instance_;
class AddCacheDirectiveResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AddCacheDirectiveResponseProto>
      _instance;
} _AddCacheDirectiveResponseProto_default_instance_;
class ModifyCacheDirectiveRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ModifyCacheDirectiveRequestProto>
      _instance;
} _ModifyCacheDirectiveRequestProto_default_instance_;
class ModifyCacheDirectiveResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ModifyCacheDirectiveResponseProto>
      _instance;
} _ModifyCacheDirectiveResponseProto_default_instance_;
class RemoveCacheDirectiveRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RemoveCacheDirectiveRequestProto>
      _instance;
} _RemoveCacheDirectiveRequestProto_default_instance_;
class RemoveCacheDirectiveResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RemoveCacheDirectiveResponseProto>
      _instance;
} _RemoveCacheDirectiveResponseProto_default_instance_;
class ListCacheDirectivesRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCacheDirectivesRequestProto>
      _instance;
} _ListCacheDirectivesRequestProto_default_instance_;
class CacheDirectiveEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CacheDirectiveEntryProto>
      _instance;
} _CacheDirectiveEntryProto_default_instance_;
class ListCacheDirectivesResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCacheDirectivesResponseProto>
      _instance;
} _ListCacheDirectivesResponseProto_default_instance_;
class CachePoolInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CachePoolInfoProto>
      _instance;
} _CachePoolInfoProto_default_instance_;
class CachePoolStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CachePoolStatsProto>
      _instance;
} _CachePoolStatsProto_default_instance_;
class AddCachePoolRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AddCachePoolRequestProto>
      _instance;
} _AddCachePoolRequestProto_default_instance_;
class AddCachePoolResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AddCachePoolResponseProto>
      _instance;
} _AddCachePoolResponseProto_default_instance_;
class ModifyCachePoolRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ModifyCachePoolRequestProto>
      _instance;
} _ModifyCachePoolRequestProto_default_instance_;
class ModifyCachePoolResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ModifyCachePoolResponseProto>
      _instance;
} _ModifyCachePoolResponseProto_default_instance_;
class RemoveCachePoolRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RemoveCachePoolRequestProto>
      _instance;
} _RemoveCachePoolRequestProto_default_instance_;
class RemoveCachePoolResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RemoveCachePoolResponseProto>
      _instance;
} _RemoveCachePoolResponseProto_default_instance_;
class ListCachePoolsRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCachePoolsRequestProto>
      _instance;
} _ListCachePoolsRequestProto_default_instance_;
class ListCachePoolsResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ListCachePoolsResponseProto>
      _instance;
} _ListCachePoolsResponseProto_default_instance_;
class CachePoolEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CachePoolEntryProto>
      _instance;
} _CachePoolEntryProto_default_instance_;
class GetFileLinkInfoRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFileLinkInfoRequestProto>
      _instance;
} _GetFileLinkInfoRequestProto_default_instance_;
class GetFileLinkInfoResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetFileLinkInfoResponseProto>
      _instance;
} _GetFileLinkInfoResponseProto_default_instance_;
class GetContentSummaryRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetContentSummaryRequestProto>
      _instance;
} _GetContentSummaryRequestProto_default_instance_;
class GetContentSummaryResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetContentSummaryResponseProto>
      _instance;
} _GetContentSummaryResponseProto_default_instance_;
class SetQuotaRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetQuotaRequestProto>
      _instance;
} _SetQuotaRequestProto_default_instance_;
class SetQuotaResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetQuotaResponseProto>
      _instance;
} _SetQuotaResponseProto_default_instance_;
class FsyncRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FsyncRequestProto>
      _instance;
} _FsyncRequestProto_default_instance_;
class FsyncResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FsyncResponseProto>
      _instance;
} _FsyncResponseProto_default_instance_;
class SetTimesRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTimesRequestProto>
      _instance;
} _SetTimesRequestProto_default_instance_;
class SetTimesResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetTimesResponseProto>
      _instance;
} _SetTimesResponseProto_default_instance_;
class CreateSymlinkRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CreateSymlinkRequestProto>
      _instance;
} _CreateSymlinkRequestProto_default_instance_;
class CreateSymlinkResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CreateSymlinkResponseProto>
      _instance;
} _CreateSymlinkResponseProto_default_instance_;
class GetLinkTargetRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetLinkTargetRequestProto>
      _instance;
} _GetLinkTargetRequestProto_default_instance_;
class GetLinkTargetResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetLinkTargetResponseProto>
      _instance;
} _GetLinkTargetResponseProto_default_instance_;
class UpdateBlockForPipelineRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      UpdateBlockForPipelineRequestProto>
      _instance;
} _UpdateBlockForPipelineRequestProto_default_instance_;
class UpdateBlockForPipelineResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      UpdateBlockForPipelineResponseProto>
      _instance;
} _UpdateBlockForPipelineResponseProto_default_instance_;
class UpdatePipelineRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      UpdatePipelineRequestProto>
      _instance;
} _UpdatePipelineRequestProto_default_instance_;
class UpdatePipelineResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      UpdatePipelineResponseProto>
      _instance;
} _UpdatePipelineResponseProto_default_instance_;
class SetBalancerBandwidthRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetBalancerBandwidthRequestProto>
      _instance;
} _SetBalancerBandwidthRequestProto_default_instance_;
class SetBalancerBandwidthResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      SetBalancerBandwidthResponseProto>
      _instance;
} _SetBalancerBandwidthResponseProto_default_instance_;
class GetDataEncryptionKeyRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetDataEncryptionKeyRequestProto>
      _instance;
} _GetDataEncryptionKeyRequestProto_default_instance_;
class GetDataEncryptionKeyResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      GetDataEncryptionKeyResponseProto>
      _instance;
} _GetDataEncryptionKeyResponseProto_default_instance_;
class CreateSnapshotRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CreateSnapshotRequestProto>
      _instance;
} _CreateSnapshotRequestProto_default_instance_;
class CreateSnapshotResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      CreateSnapshotResponseProto>
      _instance;
} _CreateSnapshotResponseProto_default_instance_;
class RenameSnapshotRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RenameSnapshotRequestProto>
      _instance;
} _RenameSnapshotRequestProto_default_instance_;
class RenameSnapshotResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      RenameSnapshotResponseProto>
      _instance;
} _RenameSnapshotResponseProto_default_instance_;
class AllowSnapshotRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AllowSnapshotRequestProto>
      _instance;
} _AllowSnapshotRequestProto_default_instance_;
class AllowSnapshotResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AllowSnapshotResponseProto>
      _instance;
} _AllowSnapshotResponseProto_default_instance_;
class DisallowSnapshotRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      DisallowSnapshotRequestProto>
      _instance;
} _DisallowSnapshotRequestProto_default_instance_;
class DisallowSnapshotResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      DisallowSnapshotResponseProto>
      _instance;
} _DisallowSnapshotResponseProto_default_instance_;
class DeleteSnapshotRequestProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      DeleteSnapshotRequestProto>
      _instance;
} _DeleteSnapshotRequestProto_default_instance_;
class DeleteSnapshotResponseProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      DeleteSnapshotResponseProto>
      _instance;
} _DeleteSnapshotResponseProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
static void
InitDefaultsscc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AbandonBlockRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AbandonBlockRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AbandonBlockRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_AbandonBlockResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AbandonBlockResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AbandonBlockResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AbandonBlockResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AbandonBlockResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AbandonBlockResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AddBlockRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddBlockRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddBlockRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
            &scc_info_DatanodeInfoProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AddBlockResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddBlockResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddBlockResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_AddCacheDirectiveRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddCacheDirectiveRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddCacheDirectiveRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_AddCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_AddCacheDirectiveResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddCacheDirectiveResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddCacheDirectiveResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AddCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AddCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AddCachePoolRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddCachePoolRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddCachePoolRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base,
        }};

static void
InitDefaultsscc_info_AddCachePoolResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AddCachePoolResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AddCachePoolResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AddCachePoolResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AddCachePoolResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AddCachePoolResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AllowSnapshotRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AllowSnapshotRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AllowSnapshotRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AllowSnapshotResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_AllowSnapshotResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AllowSnapshotResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AllowSnapshotResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AllowSnapshotResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AllowSnapshotResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AppendRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::AppendRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AppendRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_AppendResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::AppendResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::AppendResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlockProto_hdfs_2eproto.base,
            &scc_info_HdfsFileStatusProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CacheDirectiveEntryProto_default_instance_;
    new (ptr)::Hdfs::Internal::CacheDirectiveEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CacheDirectiveEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto
                 .base,
            &scc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_CacheDirectiveInfoExpirationProto_default_instance_;
    new (ptr)::Hdfs::Internal::CacheDirectiveInfoExpirationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_;
    new (ptr)::Hdfs::Internal::CacheDirectiveInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CacheDirectiveInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CacheDirectiveStatsProto_default_instance_;
    new (ptr)::Hdfs::Internal::CacheDirectiveStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CacheDirectiveStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CachePoolEntryProto_default_instance_;
    new (ptr)::Hdfs::Internal::CachePoolEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CachePoolEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base,
            &scc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto.base,
        }};

static void
InitDefaultsscc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CachePoolInfoProto_default_instance_;
    new (ptr)::Hdfs::Internal::CachePoolInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CachePoolInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CachePoolStatsProto_default_instance_;
    new (ptr)::Hdfs::Internal::CachePoolStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CachePoolStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CompleteRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::CompleteRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CompleteRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_CompleteResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CompleteResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::CompleteResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CompleteResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CompleteResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CompleteResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_ConcatRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ConcatRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ConcatRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ConcatResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_ConcatResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ConcatResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ConcatResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ConcatResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ConcatResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CreateRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_FsPermissionProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CreateResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_HdfsFileStatusProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_CreateSnapshotRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateSnapshotRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateSnapshotRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_CreateSnapshotResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateSnapshotResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateSnapshotResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_CreateSymlinkRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateSymlinkRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateSymlinkRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_FsPermissionProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_CreateSymlinkResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_CreateSymlinkResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::CreateSymlinkResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::CreateSymlinkResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CreateSymlinkResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_CreateSymlinkResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_DeleteRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::DeleteRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DeleteRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DeleteResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_DeleteResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::DeleteResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DeleteResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DeleteResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DeleteResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_DeleteSnapshotRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::DeleteSnapshotRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DeleteSnapshotRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DeleteSnapshotResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_DeleteSnapshotResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::DeleteSnapshotResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DeleteSnapshotResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DeleteSnapshotResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DeleteSnapshotResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_DisallowSnapshotRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::DisallowSnapshotRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DisallowSnapshotRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_DisallowSnapshotResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_DisallowSnapshotResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::DisallowSnapshotResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::DisallowSnapshotResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DisallowSnapshotResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_DisallowSnapshotResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_FinalizeUpgradeRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_FinalizeUpgradeRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::FinalizeUpgradeRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::FinalizeUpgradeRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FinalizeUpgradeRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_FinalizeUpgradeRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_FinalizeUpgradeResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_FinalizeUpgradeResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::FinalizeUpgradeResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::FinalizeUpgradeResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FinalizeUpgradeResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_FinalizeUpgradeResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_FsyncRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::FsyncRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::FsyncRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_FsyncResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_FsyncResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::FsyncResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::FsyncResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FsyncResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_FsyncResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetAdditionalDatanodeRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetAdditionalDatanodeRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetAdditionalDatanodeRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
            &scc_info_DatanodeInfoProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _GetAdditionalDatanodeResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetAdditionalDatanodeResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetAdditionalDatanodeResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetBlockLocationsRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetBlockLocationsRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetBlockLocationsRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetBlockLocationsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetBlockLocationsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetBlockLocationsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlocksProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetContentSummaryRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetContentSummaryRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetContentSummaryRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetContentSummaryResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetContentSummaryResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetContentSummaryResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ContentSummaryProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetDataEncryptionKeyRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetDataEncryptionKeyRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetDataEncryptionKeyRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetDataEncryptionKeyRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetDataEncryptionKeyRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetDataEncryptionKeyRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetDataEncryptionKeyResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetDataEncryptionKeyResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetDataEncryptionKeyResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_DataEncryptionKeyProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetDatanodeReportRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetDatanodeReportRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetDatanodeReportRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetDatanodeReportRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetDatanodeReportRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetDatanodeReportRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetDatanodeReportResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetDatanodeReportResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetDatanodeReportResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_DatanodeInfoProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetFileInfoRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFileInfoRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFileInfoRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetFileInfoResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFileInfoResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFileInfoResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_HdfsFileStatusProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetFileLinkInfoRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFileLinkInfoRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFileLinkInfoRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetFileLinkInfoResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFileLinkInfoResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFileLinkInfoResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_HdfsFileStatusProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetFsStatsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetFsStatsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFsStatsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFsStatsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetFsStatsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetFsStatsResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetFsStatusRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetFsStatusRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetFsStatusRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetFsStatusRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetFsStatusRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetFsStatusRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetLeaseRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetLeaseRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetLeaseRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetLeaseResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetLeaseResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetLeaseResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetLeaseResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetLeaseResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetLeaseResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetLinkTargetRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetLinkTargetRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetLinkTargetRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetLinkTargetResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetLinkTargetResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetLinkTargetResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetListingRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetListingRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetListingRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_GetListingResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetListingResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetListingResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_DirectoryListingProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetPreferredBlockSizeRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetPreferredBlockSizeRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetPreferredBlockSizeRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetPreferredBlockSizeResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _GetPreferredBlockSizeResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetPreferredBlockSizeResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetPreferredBlockSizeResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetPreferredBlockSizeResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetPreferredBlockSizeResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetServerDefaultsRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetServerDefaultsRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetServerDefaultsRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetServerDefaultsRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetServerDefaultsRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetServerDefaultsRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetServerDefaultsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetServerDefaultsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetServerDefaultsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_FsServerDefaultsProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_GetSnapshotDiffReportRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetSnapshotDiffReportRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetSnapshotDiffReportRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _GetSnapshotDiffReportResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetSnapshotDiffReportResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetSnapshotDiffReportResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_SnapshotDiffReportProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_GetSnapshottableDirListingRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _GetSnapshottableDirListingRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetSnapshottableDirListingRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetSnapshottableDirListingRequestProto::
      InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GetSnapshottableDirListingRequestProto_ClientNamenodeProtocol_2eproto =
        {{ATOMIC_VAR_INIT(
              ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
          0, 0,
          InitDefaultsscc_info_GetSnapshottableDirListingRequestProto_ClientNamenodeProtocol_2eproto},
         {}};

static void
InitDefaultsscc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _GetSnapshottableDirListingResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::GetSnapshottableDirListingResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::GetSnapshottableDirListingResponseProto::
      InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto =
        {{ATOMIC_VAR_INIT(
              ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
          1, 0,
          InitDefaultsscc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto},
         {
             &scc_info_SnapshottableDirectoryListingProto_hdfs_2eproto.base,
         }};

static void
InitDefaultsscc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_IsFileClosedRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::IsFileClosedRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::IsFileClosedRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_IsFileClosedResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_IsFileClosedResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::IsFileClosedResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::IsFileClosedResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_IsFileClosedResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_IsFileClosedResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ListCacheDirectivesRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCacheDirectivesRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCacheDirectivesRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ListCacheDirectivesResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCacheDirectivesResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCacheDirectivesResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ListCachePoolsRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCachePoolsRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCachePoolsRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ListCachePoolsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCachePoolsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCachePoolsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto.base,
        }};

static void
InitDefaultsscc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ListCorruptFileBlocksRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCorruptFileBlocksRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCorruptFileBlocksRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _ListCorruptFileBlocksResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ListCorruptFileBlocksResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ListCorruptFileBlocksResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CorruptFileBlocksProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_MetaSaveRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::MetaSaveRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::MetaSaveRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_MetaSaveResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_MetaSaveResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::MetaSaveResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::MetaSaveResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_MetaSaveResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_MetaSaveResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_MkdirsRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::MkdirsRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::MkdirsRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_FsPermissionProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_MkdirsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_MkdirsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::MkdirsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::MkdirsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_MkdirsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_MkdirsResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ModifyCacheDirectiveRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ModifyCacheDirectiveRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ModifyCacheDirectiveRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_ModifyCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ModifyCacheDirectiveResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ModifyCacheDirectiveResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ModifyCacheDirectiveResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ModifyCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ModifyCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ModifyCachePoolRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ModifyCachePoolRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ModifyCachePoolRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base,
        }};

static void
InitDefaultsscc_info_ModifyCachePoolResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ModifyCachePoolResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ModifyCachePoolResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ModifyCachePoolResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ModifyCachePoolResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ModifyCachePoolResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RecoverLeaseRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RecoverLeaseRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RecoverLeaseRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RecoverLeaseResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RecoverLeaseResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RecoverLeaseResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RecoverLeaseResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RecoverLeaseResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RecoverLeaseResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RefreshNodesRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RefreshNodesRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RefreshNodesRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RefreshNodesRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RefreshNodesRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RefreshNodesRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RefreshNodesResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RefreshNodesResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RefreshNodesResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RefreshNodesResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RefreshNodesResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RefreshNodesResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_ReleaseLeaseRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ReleaseLeaseRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ReleaseLeaseRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ReleaseLeaseResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_ReleaseLeaseResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ReleaseLeaseResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ReleaseLeaseResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ReleaseLeaseResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ReleaseLeaseResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RemoveCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RemoveCacheDirectiveRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RemoveCacheDirectiveRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RemoveCacheDirectiveRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RemoveCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RemoveCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RemoveCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RemoveCacheDirectiveResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RemoveCacheDirectiveResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RemoveCacheDirectiveResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RemoveCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RemoveCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RemoveCachePoolRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RemoveCachePoolRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RemoveCachePoolRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RemoveCachePoolResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RemoveCachePoolResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RemoveCachePoolResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RemoveCachePoolResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RemoveCachePoolResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RemoveCachePoolResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_Rename2RequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::Rename2RequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::Rename2RequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_Rename2ResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_Rename2ResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::Rename2ResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::Rename2ResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Rename2ResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_Rename2ResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RenameRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenameRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenameRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenameResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RenameResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenameResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenameResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenameResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenameResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RenameSnapshotRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenameSnapshotRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenameSnapshotRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenameSnapshotResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RenameSnapshotResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenameSnapshotResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenameSnapshotResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenameSnapshotResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenameSnapshotResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RenewLeaseRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenewLeaseRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenewLeaseRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RenewLeaseResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RenewLeaseResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RenewLeaseResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RenewLeaseResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RenewLeaseResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RenewLeaseResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ReportBadBlocksRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::ReportBadBlocksRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ReportBadBlocksRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_ReportBadBlocksResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_ReportBadBlocksResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::ReportBadBlocksResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::ReportBadBlocksResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ReportBadBlocksResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ReportBadBlocksResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RestoreFailedStorageRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RestoreFailedStorageRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RestoreFailedStorageRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RestoreFailedStorageResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_RestoreFailedStorageResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RestoreFailedStorageResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RestoreFailedStorageResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RestoreFailedStorageResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RestoreFailedStorageResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RollEditsRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RollEditsRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::RollEditsRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RollEditsRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RollEditsRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RollEditsRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_RollEditsResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_RollEditsResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::RollEditsResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::RollEditsResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RollEditsResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_RollEditsResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SaveNamespaceRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SaveNamespaceRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SaveNamespaceRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SaveNamespaceRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SaveNamespaceRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SaveNamespaceRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SaveNamespaceResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SaveNamespaceResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SaveNamespaceResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SaveNamespaceResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SaveNamespaceResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SaveNamespaceResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetBalancerBandwidthRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SetBalancerBandwidthRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetBalancerBandwidthRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetBalancerBandwidthRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetBalancerBandwidthRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetBalancerBandwidthRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetBalancerBandwidthResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SetBalancerBandwidthResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetBalancerBandwidthResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetBalancerBandwidthResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetBalancerBandwidthResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetBalancerBandwidthResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetOwnerRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetOwnerRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetOwnerRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetOwnerResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetOwnerResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetOwnerResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetOwnerResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetOwnerResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetOwnerResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetPermissionRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetPermissionRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetPermissionRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_FsPermissionProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_SetPermissionResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SetPermissionResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetPermissionResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetPermissionResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetPermissionResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetPermissionResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetQuotaRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetQuotaRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetQuotaRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetQuotaResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetQuotaResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetQuotaResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetQuotaResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetQuotaResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetQuotaResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SetReplicationRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetReplicationRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetReplicationRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetReplicationResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_SetReplicationResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetReplicationResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetReplicationResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetReplicationResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetReplicationResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetSafeModeRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetSafeModeRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetSafeModeRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetSafeModeRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetSafeModeRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetSafeModeRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetSafeModeResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetSafeModeResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetSafeModeResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetSafeModeResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetSafeModeResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetSafeModeResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetTimesRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetTimesRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetTimesRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_SetTimesResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_SetTimesResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::SetTimesResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::SetTimesResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SetTimesResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_SetTimesResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_TruncateRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::TruncateRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::TruncateRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_TruncateResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::_TruncateResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::TruncateResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::TruncateResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_TruncateResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_TruncateResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static void
InitDefaultsscc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _UpdateBlockForPipelineRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::UpdateBlockForPipelineRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::UpdateBlockForPipelineRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Hdfs::Internal::
                    _UpdateBlockForPipelineResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::UpdateBlockForPipelineResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::UpdateBlockForPipelineResponseProto::
      InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_LocatedBlockProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_UpdatePipelineRequestProto_default_instance_;
    new (ptr)::Hdfs::Internal::UpdatePipelineRequestProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::UpdatePipelineRequestProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto},
        {
            &scc_info_ExtendedBlockProto_hdfs_2eproto.base,
            &scc_info_DatanodeIDProto_hdfs_2eproto.base,
        }};

static void
InitDefaultsscc_info_UpdatePipelineResponseProto_ClientNamenodeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr =
        &::Hdfs::Internal::_UpdatePipelineResponseProto_default_instance_;
    new (ptr)::Hdfs::Internal::UpdatePipelineResponseProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Hdfs::Internal::UpdatePipelineResponseProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_UpdatePipelineResponseProto_ClientNamenodeProtocol_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_UpdatePipelineResponseProto_ClientNamenodeProtocol_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_ClientNamenodeProtocol_2eproto[131];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
    file_level_enum_descriptors_ClientNamenodeProtocol_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor*
    file_level_service_descriptors_ClientNamenodeProtocol_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_ClientNamenodeProtocol_2eproto::offsets
        [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsRequestProto, offset_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsRequestProto, length_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetBlockLocationsResponseProto, locations_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetServerDefaultsRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetServerDefaultsRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetServerDefaultsResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetServerDefaultsResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetServerDefaultsResponseProto,
                serverdefaults_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  masked_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  clientname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  createflag_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  createparent_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  replication_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  blocksize_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateRequestProto,
                                  cryptoprotocolversion_),
            0,
            2,
            1,
            3,
            4,
            6,
            5,
            ~0u,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateResponseProto, fs_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendRequestProto,
                                  clientname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendResponseProto,
                                  block_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AppendResponseProto, stat_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationRequestProto,
                                  replication_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetReplicationResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionRequestProto,
                                  permission_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetPermissionResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerRequestProto,
                                  username_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerRequestProto,
                                  groupname_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetOwnerResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockRequestProto,
                                  b_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockRequestProto,
                                  holder_),
            2,
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AbandonBlockResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  clientname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  previous_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  excludenodes_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  fileid_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockRequestProto,
                                  favorednodes_),
            0,
            1,
            2,
            ~0u,
            3,
            ~0u,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddBlockResponseProto,
                                  block_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto, blk_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                existings_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto, excludes_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                numadditionalnodes_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                clientname_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeRequestProto,
                existingstorageuuids_),
            0,
            2,
            ~0u,
            ~0u,
            3,
            1,
            ~0u,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetAdditionalDatanodeResponseProto, block_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto,
                                  clientname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto,
                                  last_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteRequestProto,
                                  fileid_),
            0,
            1,
            2,
            3,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CompleteResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReportBadBlocksRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReportBadBlocksRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReportBadBlocksRequestProto,
                                  blocks_),
            ~0u,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ReportBadBlocksResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ReportBadBlocksResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatRequestProto, trg_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatRequestProto, srcs_),
            0,
            ~0u,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ConcatResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateRequestProto,
                                  newlength_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateRequestProto,
                                  clientname_),
            0,
            2,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::TruncateResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseRequestProto,
                                  clientname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLeaseResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseRequestProto,
                                  clientname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ReleaseLeaseResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameRequestProto, dst_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2RequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2RequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2RequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2RequestProto, dst_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2RequestProto,
                                  overwritedest_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2ResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::Rename2ResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteRequestProto,
                                  recursive_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsRequestProto,
                                  masked_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsRequestProto,
                                  createparent_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MkdirsResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingRequestProto,
                                  startafter_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingRequestProto,
                                  needlocation_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetListingResponseProto,
                                  dirlist_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshottableDirListingRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshottableDirListingRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshottableDirListingResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshottableDirListingResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshottableDirListingResponseProto,
                snapshottabledirlist_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportRequestProto,
                snapshotroot_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportRequestProto,
                fromsnapshot_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportRequestProto,
                tosnapshot_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetSnapshotDiffReportResponseProto,
                diffreport_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenewLeaseRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenewLeaseRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenewLeaseRequestProto,
                                  clientname_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenewLeaseResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenewLeaseResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseRequestProto,
                                  src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseRequestProto,
                                  clientname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RecoverLeaseResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatusRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatusRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  capacity_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  used_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  remaining_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  under_replicated_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  corrupt_blocks_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFsStatsResponseProto,
                                  missing_blocks_),
            0,
            1,
            2,
            3,
            4,
            5,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportRequestProto, type_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDatanodeReportResponseProto, di_),
            ~0u,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeRequestProto, filename_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetPreferredBlockSizeResponseProto, bsize_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeRequestProto,
                                  action_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeRequestProto,
                                  checked_),
            1,
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetSafeModeResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SaveNamespaceRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SaveNamespaceRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SaveNamespaceResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SaveNamespaceResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RollEditsRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RollEditsRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RollEditsResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RollEditsResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RollEditsResponseProto,
                                  newsegmenttxid_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageRequestProto, arg_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RestoreFailedStorageResponseProto, result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RefreshNodesRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RefreshNodesRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RefreshNodesResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RefreshNodesResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FinalizeUpgradeRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FinalizeUpgradeRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::FinalizeUpgradeResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::FinalizeUpgradeResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksRequestProto, path_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksRequestProto, cookie_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCorruptFileBlocksResponseProto, corrupt_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MetaSaveRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MetaSaveRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MetaSaveRequestProto,
                                  filename_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MetaSaveResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::MetaSaveResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoRequestProto,
                                  src_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileInfoResponseProto,
                                  fs_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedRequestProto,
                                  src_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::IsFileClosedResponseProto,
                                  result_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  id_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  path_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  replication_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  pool_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveInfoProto,
                                  expiration_),
            3,
            0,
            4,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::CacheDirectiveInfoExpirationProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::CacheDirectiveInfoExpirationProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::CacheDirectiveInfoExpirationProto, millis_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::CacheDirectiveInfoExpirationProto,
                isrelative_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  bytesneeded_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  bytescached_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  filesneeded_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  filescached_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveStatsProto,
                                  hasexpired_),
            0,
            1,
            2,
            3,
            4,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveRequestProto, info_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveRequestProto, cacheflags_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::AddCacheDirectiveResponseProto, id_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveRequestProto, info_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveRequestProto,
                cacheflags_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCacheDirectiveResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCacheDirectiveRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCacheDirectiveRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCacheDirectiveRequestProto, id_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCacheDirectiveResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCacheDirectiveResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesRequestProto, previd_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesRequestProto, filter_),
            1,
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveEntryProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveEntryProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveEntryProto,
                                  info_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CacheDirectiveEntryProto,
                                  stats_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesResponseProto, elements_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ListCacheDirectivesResponseProto, hasmore_),
            ~0u,
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  poolname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  ownername_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  groupname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto, mode_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto, limit_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolInfoProto,
                                  maxrelativeexpiry_),
            0,
            1,
            2,
            5,
            3,
            4,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  bytesneeded_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  bytescached_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  bytesoverlimit_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  filesneeded_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolStatsProto,
                                  filescached_),
            0,
            1,
            2,
            3,
            4,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddCachePoolRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddCachePoolRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddCachePoolRequestProto,
                                  info_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddCachePoolResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AddCachePoolResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ModifyCachePoolRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ModifyCachePoolRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ModifyCachePoolRequestProto,
                                  info_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCachePoolResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::ModifyCachePoolResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RemoveCachePoolRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RemoveCachePoolRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RemoveCachePoolRequestProto,
                                  poolname_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCachePoolResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::RemoveCachePoolResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsRequestProto,
                                  prevpoolname_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsResponseProto,
                                  entries_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::ListCachePoolsResponseProto,
                                  hasmore_),
            ~0u,
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolEntryProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolEntryProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolEntryProto, info_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CachePoolEntryProto,
                                  stats_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileLinkInfoRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileLinkInfoRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetFileLinkInfoRequestProto,
                                  src_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetFileLinkInfoResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetFileLinkInfoResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetFileLinkInfoResponseProto, fs_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryRequestProto, path_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetContentSummaryResponseProto, summary_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaRequestProto,
                                  path_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaRequestProto,
                                  namespacequota_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaRequestProto,
                                  diskspacequota_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetQuotaResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncRequestProto, client_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncRequestProto,
                                  lastblocklength_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::FsyncResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesRequestProto, src_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesRequestProto,
                                  mtime_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesRequestProto,
                                  atime_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::SetTimesResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  target_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  link_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  dirperm_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkRequestProto,
                                  createparent_),
            0,
            1,
            2,
            3,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSymlinkResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetRequestProto,
                                  path_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::GetLinkTargetResponseProto,
                                  targetpath_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineRequestProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineRequestProto, block_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineRequestProto,
                clientname_),
            1,
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::UpdateBlockForPipelineResponseProto, block_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  clientname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  oldblock_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  newblock_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  newnodes_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineRequestProto,
                                  storageids_),
            0,
            1,
            2,
            ~0u,
            ~0u,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::UpdatePipelineResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::SetBalancerBandwidthRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::SetBalancerBandwidthRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::SetBalancerBandwidthRequestProto, bandwidth_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::SetBalancerBandwidthResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::SetBalancerBandwidthResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDataEncryptionKeyRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDataEncryptionKeyRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDataEncryptionKeyResponseProto,
                _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDataEncryptionKeyResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::GetDataEncryptionKeyResponseProto,
                dataencryptionkey_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotRequestProto,
                                  snapshotroot_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotRequestProto,
                                  snapshotname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::CreateSnapshotResponseProto,
                                  snapshotpath_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotRequestProto,
                                  snapshotroot_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotRequestProto,
                                  snapshotoldname_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotRequestProto,
                                  snapshotnewname_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::RenameSnapshotResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AllowSnapshotRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AllowSnapshotRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AllowSnapshotRequestProto,
                                  snapshotroot_),
            0,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AllowSnapshotResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::AllowSnapshotResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::DisallowSnapshotRequestProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::DisallowSnapshotRequestProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::DisallowSnapshotRequestProto, snapshotroot_),
            0,
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::DisallowSnapshotResponseProto, _has_bits_),
            PROTOBUF_FIELD_OFFSET(
                ::Hdfs::Internal::DisallowSnapshotResponseProto,
                _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotRequestProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotRequestProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotRequestProto,
                                  snapshotroot_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotRequestProto,
                                  snapshotname_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotResponseProto,
                                  _has_bits_),
            PROTOBUF_FIELD_OFFSET(::Hdfs::Internal::DeleteSnapshotResponseProto,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::Hdfs::Internal::GetBlockLocationsRequestProto)},
        {11, 17, sizeof(::Hdfs::Internal::GetBlockLocationsResponseProto)},
        {18, 23, sizeof(::Hdfs::Internal::GetServerDefaultsRequestProto)},
        {23, 29, sizeof(::Hdfs::Internal::GetServerDefaultsResponseProto)},
        {30, 43, sizeof(::Hdfs::Internal::CreateRequestProto)},
        {51, 57, sizeof(::Hdfs::Internal::CreateResponseProto)},
        {58, 65, sizeof(::Hdfs::Internal::AppendRequestProto)},
        {67, 74, sizeof(::Hdfs::Internal::AppendResponseProto)},
        {76, 83, sizeof(::Hdfs::Internal::SetReplicationRequestProto)},
        {85, 91, sizeof(::Hdfs::Internal::SetReplicationResponseProto)},
        {92, 99, sizeof(::Hdfs::Internal::SetPermissionRequestProto)},
        {101, 106, sizeof(::Hdfs::Internal::SetPermissionResponseProto)},
        {106, 114, sizeof(::Hdfs::Internal::SetOwnerRequestProto)},
        {117, 122, sizeof(::Hdfs::Internal::SetOwnerResponseProto)},
        {122, 130, sizeof(::Hdfs::Internal::AbandonBlockRequestProto)},
        {133, 138, sizeof(::Hdfs::Internal::AbandonBlockResponseProto)},
        {138, 149, sizeof(::Hdfs::Internal::AddBlockRequestProto)},
        {155, 161, sizeof(::Hdfs::Internal::AddBlockResponseProto)},
        {162, 174, sizeof(::Hdfs::Internal::GetAdditionalDatanodeRequestProto)},
        {181, 187,
         sizeof(::Hdfs::Internal::GetAdditionalDatanodeResponseProto)},
        {188, 197, sizeof(::Hdfs::Internal::CompleteRequestProto)},
        {201, 207, sizeof(::Hdfs::Internal::CompleteResponseProto)},
        {208, 214, sizeof(::Hdfs::Internal::ReportBadBlocksRequestProto)},
        {215, 220, sizeof(::Hdfs::Internal::ReportBadBlocksResponseProto)},
        {220, 227, sizeof(::Hdfs::Internal::ConcatRequestProto)},
        {229, 234, sizeof(::Hdfs::Internal::ConcatResponseProto)},
        {234, 242, sizeof(::Hdfs::Internal::TruncateRequestProto)},
        {245, 251, sizeof(::Hdfs::Internal::TruncateResponseProto)},
        {252, 259, sizeof(::Hdfs::Internal::GetLeaseRequestProto)},
        {261, 266, sizeof(::Hdfs::Internal::GetLeaseResponseProto)},
        {266, 273, sizeof(::Hdfs::Internal::ReleaseLeaseRequestProto)},
        {275, 280, sizeof(::Hdfs::Internal::ReleaseLeaseResponseProto)},
        {280, 287, sizeof(::Hdfs::Internal::RenameRequestProto)},
        {289, 295, sizeof(::Hdfs::Internal::RenameResponseProto)},
        {296, 304, sizeof(::Hdfs::Internal::Rename2RequestProto)},
        {307, 312, sizeof(::Hdfs::Internal::Rename2ResponseProto)},
        {312, 319, sizeof(::Hdfs::Internal::DeleteRequestProto)},
        {321, 327, sizeof(::Hdfs::Internal::DeleteResponseProto)},
        {328, 336, sizeof(::Hdfs::Internal::MkdirsRequestProto)},
        {339, 345, sizeof(::Hdfs::Internal::MkdirsResponseProto)},
        {346, 354, sizeof(::Hdfs::Internal::GetListingRequestProto)},
        {357, 363, sizeof(::Hdfs::Internal::GetListingResponseProto)},
        {364, 369,
         sizeof(::Hdfs::Internal::GetSnapshottableDirListingRequestProto)},
        {369, 375,
         sizeof(::Hdfs::Internal::GetSnapshottableDirListingResponseProto)},
        {376, 384, sizeof(::Hdfs::Internal::GetSnapshotDiffReportRequestProto)},
        {387, 393,
         sizeof(::Hdfs::Internal::GetSnapshotDiffReportResponseProto)},
        {394, 400, sizeof(::Hdfs::Internal::RenewLeaseRequestProto)},
        {401, 406, sizeof(::Hdfs::Internal::RenewLeaseResponseProto)},
        {406, 413, sizeof(::Hdfs::Internal::RecoverLeaseRequestProto)},
        {415, 421, sizeof(::Hdfs::Internal::RecoverLeaseResponseProto)},
        {422, 427, sizeof(::Hdfs::Internal::GetFsStatusRequestProto)},
        {427, 438, sizeof(::Hdfs::Internal::GetFsStatsResponseProto)},
        {444, 450, sizeof(::Hdfs::Internal::GetDatanodeReportRequestProto)},
        {451, 457, sizeof(::Hdfs::Internal::GetDatanodeReportResponseProto)},
        {458, 464, sizeof(::Hdfs::Internal::GetPreferredBlockSizeRequestProto)},
        {465, 471,
         sizeof(::Hdfs::Internal::GetPreferredBlockSizeResponseProto)},
        {472, 479, sizeof(::Hdfs::Internal::SetSafeModeRequestProto)},
        {481, 487, sizeof(::Hdfs::Internal::SetSafeModeResponseProto)},
        {488, 493, sizeof(::Hdfs::Internal::SaveNamespaceRequestProto)},
        {493, 498, sizeof(::Hdfs::Internal::SaveNamespaceResponseProto)},
        {498, 503, sizeof(::Hdfs::Internal::RollEditsRequestProto)},
        {503, 509, sizeof(::Hdfs::Internal::RollEditsResponseProto)},
        {510, 516, sizeof(::Hdfs::Internal::RestoreFailedStorageRequestProto)},
        {517, 523, sizeof(::Hdfs::Internal::RestoreFailedStorageResponseProto)},
        {524, 529, sizeof(::Hdfs::Internal::RefreshNodesRequestProto)},
        {529, 534, sizeof(::Hdfs::Internal::RefreshNodesResponseProto)},
        {534, 539, sizeof(::Hdfs::Internal::FinalizeUpgradeRequestProto)},
        {539, 544, sizeof(::Hdfs::Internal::FinalizeUpgradeResponseProto)},
        {544, 551, sizeof(::Hdfs::Internal::ListCorruptFileBlocksRequestProto)},
        {553, 559,
         sizeof(::Hdfs::Internal::ListCorruptFileBlocksResponseProto)},
        {560, 566, sizeof(::Hdfs::Internal::MetaSaveRequestProto)},
        {567, 572, sizeof(::Hdfs::Internal::MetaSaveResponseProto)},
        {572, 578, sizeof(::Hdfs::Internal::GetFileInfoRequestProto)},
        {579, 585, sizeof(::Hdfs::Internal::GetFileInfoResponseProto)},
        {586, 592, sizeof(::Hdfs::Internal::IsFileClosedRequestProto)},
        {593, 599, sizeof(::Hdfs::Internal::IsFileClosedResponseProto)},
        {600, 610, sizeof(::Hdfs::Internal::CacheDirectiveInfoProto)},
        {615, 622, sizeof(::Hdfs::Internal::CacheDirectiveInfoExpirationProto)},
        {624, 634, sizeof(::Hdfs::Internal::CacheDirectiveStatsProto)},
        {639, 646, sizeof(::Hdfs::Internal::AddCacheDirectiveRequestProto)},
        {648, 654, sizeof(::Hdfs::Internal::AddCacheDirectiveResponseProto)},
        {655, 662, sizeof(::Hdfs::Internal::ModifyCacheDirectiveRequestProto)},
        {664, 669, sizeof(::Hdfs::Internal::ModifyCacheDirectiveResponseProto)},
        {669, 675, sizeof(::Hdfs::Internal::RemoveCacheDirectiveRequestProto)},
        {676, 681, sizeof(::Hdfs::Internal::RemoveCacheDirectiveResponseProto)},
        {681, 688, sizeof(::Hdfs::Internal::ListCacheDirectivesRequestProto)},
        {690, 697, sizeof(::Hdfs::Internal::CacheDirectiveEntryProto)},
        {699, 706, sizeof(::Hdfs::Internal::ListCacheDirectivesResponseProto)},
        {708, 719, sizeof(::Hdfs::Internal::CachePoolInfoProto)},
        {725, 735, sizeof(::Hdfs::Internal::CachePoolStatsProto)},
        {740, 746, sizeof(::Hdfs::Internal::AddCachePoolRequestProto)},
        {747, 752, sizeof(::Hdfs::Internal::AddCachePoolResponseProto)},
        {752, 758, sizeof(::Hdfs::Internal::ModifyCachePoolRequestProto)},
        {759, 764, sizeof(::Hdfs::Internal::ModifyCachePoolResponseProto)},
        {764, 770, sizeof(::Hdfs::Internal::RemoveCachePoolRequestProto)},
        {771, 776, sizeof(::Hdfs::Internal::RemoveCachePoolResponseProto)},
        {776, 782, sizeof(::Hdfs::Internal::ListCachePoolsRequestProto)},
        {783, 790, sizeof(::Hdfs::Internal::ListCachePoolsResponseProto)},
        {792, 799, sizeof(::Hdfs::Internal::CachePoolEntryProto)},
        {801, 807, sizeof(::Hdfs::Internal::GetFileLinkInfoRequestProto)},
        {808, 814, sizeof(::Hdfs::Internal::GetFileLinkInfoResponseProto)},
        {815, 821, sizeof(::Hdfs::Internal::GetContentSummaryRequestProto)},
        {822, 828, sizeof(::Hdfs::Internal::GetContentSummaryResponseProto)},
        {829, 837, sizeof(::Hdfs::Internal::SetQuotaRequestProto)},
        {840, 845, sizeof(::Hdfs::Internal::SetQuotaResponseProto)},
        {845, 853, sizeof(::Hdfs::Internal::FsyncRequestProto)},
        {856, 861, sizeof(::Hdfs::Internal::FsyncResponseProto)},
        {861, 869, sizeof(::Hdfs::Internal::SetTimesRequestProto)},
        {872, 877, sizeof(::Hdfs::Internal::SetTimesResponseProto)},
        {877, 886, sizeof(::Hdfs::Internal::CreateSymlinkRequestProto)},
        {890, 895, sizeof(::Hdfs::Internal::CreateSymlinkResponseProto)},
        {895, 901, sizeof(::Hdfs::Internal::GetLinkTargetRequestProto)},
        {902, 908, sizeof(::Hdfs::Internal::GetLinkTargetResponseProto)},
        {909, 916,
         sizeof(::Hdfs::Internal::UpdateBlockForPipelineRequestProto)},
        {918, 924,
         sizeof(::Hdfs::Internal::UpdateBlockForPipelineResponseProto)},
        {925, 935, sizeof(::Hdfs::Internal::UpdatePipelineRequestProto)},
        {940, 945, sizeof(::Hdfs::Internal::UpdatePipelineResponseProto)},
        {945, 951, sizeof(::Hdfs::Internal::SetBalancerBandwidthRequestProto)},
        {952, 957, sizeof(::Hdfs::Internal::SetBalancerBandwidthResponseProto)},
        {957, 962, sizeof(::Hdfs::Internal::GetDataEncryptionKeyRequestProto)},
        {962, 968, sizeof(::Hdfs::Internal::GetDataEncryptionKeyResponseProto)},
        {969, 976, sizeof(::Hdfs::Internal::CreateSnapshotRequestProto)},
        {978, 984, sizeof(::Hdfs::Internal::CreateSnapshotResponseProto)},
        {985, 993, sizeof(::Hdfs::Internal::RenameSnapshotRequestProto)},
        {996, 1001, sizeof(::Hdfs::Internal::RenameSnapshotResponseProto)},
        {1001, 1007, sizeof(::Hdfs::Internal::AllowSnapshotRequestProto)},
        {1008, 1013, sizeof(::Hdfs::Internal::AllowSnapshotResponseProto)},
        {1013, 1019, sizeof(::Hdfs::Internal::DisallowSnapshotRequestProto)},
        {1020, 1025, sizeof(::Hdfs::Internal::DisallowSnapshotResponseProto)},
        {1025, 1032, sizeof(::Hdfs::Internal::DeleteSnapshotRequestProto)},
        {1034, 1039, sizeof(::Hdfs::Internal::DeleteSnapshotResponseProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetBlockLocationsRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetBlockLocationsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetServerDefaultsRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetServerDefaultsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AppendRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AppendResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetReplicationRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetReplicationResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetPermissionRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetPermissionResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetOwnerRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetOwnerResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AbandonBlockRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AbandonBlockResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AddBlockRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AddBlockResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetAdditionalDatanodeRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetAdditionalDatanodeResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CompleteRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CompleteResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ReportBadBlocksRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ReportBadBlocksResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ConcatRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ConcatResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_TruncateRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_TruncateResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetLeaseRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetLeaseResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ReleaseLeaseRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ReleaseLeaseResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenameRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenameResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_Rename2RequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_Rename2ResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_DeleteRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_DeleteResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_MkdirsRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_MkdirsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetListingRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetListingResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetSnapshottableDirListingRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetSnapshottableDirListingResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetSnapshotDiffReportRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetSnapshotDiffReportResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenewLeaseRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenewLeaseResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RecoverLeaseRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RecoverLeaseResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFsStatusRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFsStatsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetDatanodeReportRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetDatanodeReportResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetPreferredBlockSizeRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetPreferredBlockSizeResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetSafeModeRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetSafeModeResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SaveNamespaceRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SaveNamespaceResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RollEditsRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RollEditsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _RestoreFailedStorageRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _RestoreFailedStorageResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RefreshNodesRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RefreshNodesResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_FinalizeUpgradeRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_FinalizeUpgradeResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ListCorruptFileBlocksRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ListCorruptFileBlocksResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_MetaSaveRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_MetaSaveResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFileInfoRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFileInfoResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_IsFileClosedRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_IsFileClosedResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _CacheDirectiveInfoExpirationProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CacheDirectiveStatsProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _AddCacheDirectiveRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _AddCacheDirectiveResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ModifyCacheDirectiveRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ModifyCacheDirectiveResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _RemoveCacheDirectiveRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _RemoveCacheDirectiveResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ListCacheDirectivesRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CacheDirectiveEntryProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _ListCacheDirectivesResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CachePoolInfoProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CachePoolStatsProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AddCachePoolRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AddCachePoolResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ModifyCachePoolRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ModifyCachePoolResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RemoveCachePoolRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RemoveCachePoolResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ListCachePoolsRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_ListCachePoolsResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CachePoolEntryProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFileLinkInfoRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetFileLinkInfoResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetContentSummaryRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetContentSummaryResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetQuotaRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetQuotaResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_FsyncRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_FsyncResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetTimesRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_SetTimesResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateSymlinkRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateSymlinkResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetLinkTargetRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_GetLinkTargetResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _UpdateBlockForPipelineRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _UpdateBlockForPipelineResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_UpdatePipelineRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_UpdatePipelineResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _SetBalancerBandwidthRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _SetBalancerBandwidthResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetDataEncryptionKeyRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _GetDataEncryptionKeyResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateSnapshotRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_CreateSnapshotResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenameSnapshotRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_RenameSnapshotResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AllowSnapshotRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_AllowSnapshotResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_DisallowSnapshotRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::
                _DisallowSnapshotResponseProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_DeleteSnapshotRequestProto_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::Hdfs::Internal::_DeleteSnapshotResponseProto_default_instance_),
};

const char descriptor_table_protodef_ClientNamenodeProtocol_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\034ClientNamenodeProtocol.proto\022\rHdfs.Int"
        "ernal\032\nhdfs.proto\032\016Security.proto\032\020encry"
        "ption.proto\"L\n\035GetBlockLocationsRequestP"
        "roto\022\013\n\003src\030\001 \002(\t\022\016\n\006offset\030\002 "
        "\002(\004\022\016\n\006len"
        "gth\030\003 \002(\004\"V\n\036GetBlockLocationsResponsePr"
        "oto\0224\n\tlocations\030\001 \001(\0132!.Hdfs.Internal.L"
        "ocatedBlocksProto\"\037\n\035GetServerDefaultsRe"
        "questProto\"^\n\036GetServerDefaultsResponseP"
        "roto\022<\n\016serverDefaults\030\001 \002(\0132$.Hdfs.Inte"
        "rnal.FsServerDefaultsProto\"\203\002\n\022CreateReq"
        "uestProto\022\013\n\003src\030\001 \002(\t\0220\n\006masked\030\002 "
        "\002(\0132 "
        ".Hdfs.Internal.FsPermissionProto\022\022\n\nclie"
        "ntName\030\003 \002(\t\022\022\n\ncreateFlag\030\004 "
        "\002(\r\022\024\n\014crea"
        "teParent\030\005 \002(\010\022\023\n\013replication\030\006 "
        "\002(\r\022\021\n\tb"
        "lockSize\030\007 \002(\004\022H\n\025cryptoProtocolVersion\030"
        "\010 \003(\0162).Hdfs.Internal.CryptoProtocolVers"
        "ionProto\"E\n\023CreateResponseProto\022.\n\002fs\030\001 "
        "\001(\0132\".Hdfs.Internal.HdfsFileStatusProto\""
        "5\n\022AppendRequestProto\022\013\n\003src\030\001 "
        "\002(\t\022\022\n\ncl"
        "ientName\030\002 \002(\t\"x\n\023AppendResponseProto\022/\n"
        "\005block\030\001 \001(\0132 .Hdfs.Internal.LocatedBloc"
        "kProto\0220\n\004stat\030\002 \001(\0132\".Hdfs.Internal.Hdf"
        "sFileStatusProto\">\n\032SetReplicationReques"
        "tProto\022\013\n\003src\030\001 "
        "\002(\t\022\023\n\013replication\030\002 \002(\r"
        "\"-\n\033SetReplicationResponseProto\022\016\n\006resul"
        "t\030\001 \002(\010\"^\n\031SetPermissionRequestProto\022\013\n\003"
        "src\030\001 \002(\t\0224\n\npermission\030\002 \002(\0132 .Hdfs.Int"
        "ernal.FsPermissionProto\"\034\n\032SetPermission"
        "ResponseProto\"H\n\024SetOwnerRequestProto\022\013\n"
        "\003src\030\001 \002(\t\022\020\n\010username\030\002 "
        "\001(\t\022\021\n\tgroupnam"
        "e\030\003 \001(\t\"\027\n\025SetOwnerResponseProto\"e\n\030Aban"
        "donBlockRequestProto\022,\n\001b\030\001 \002(\0132!.Hdfs.I"
        "nternal.ExtendedBlockProto\022\013\n\003src\030\002 \002(\t\022"
        "\016\n\006holder\030\003 \002(\t\"\033\n\031AbandonBlockResponseP"
        "roto\"\315\001\n\024AddBlockRequestProto\022\013\n\003src\030\001 \002"
        "(\t\022\022\n\nclientName\030\002 \002(\t\0223\n\010previous\030\003 "
        "\001(\013"
        "2!.Hdfs.Internal.ExtendedBlockProto\0226\n\014e"
        "xcludeNodes\030\004 \003(\0132 .Hdfs.Internal.Datano"
        "deInfoProto\022\021\n\006fileId\030\005 "
        "\001(\004:\0010\022\024\n\014favore"
        "dNodes\030\006 \003(\t\"H\n\025AddBlockResponseProto\022/\n"
        "\005block\030\001 \002(\0132 .Hdfs.Internal.LocatedBloc"
        "kProto\"\227\002\n!GetAdditionalDatanodeRequestP"
        "roto\022\013\n\003src\030\001 \002(\t\022.\n\003blk\030\002 "
        "\002(\0132!.Hdfs.In"
        "ternal.ExtendedBlockProto\0223\n\texistings\030\003"
        " \003(\0132 .Hdfs.Internal.DatanodeInfoProto\0222"
        "\n\010excludes\030\004 \003(\0132 .Hdfs.Internal.Datanod"
        "eInfoProto\022\032\n\022numAdditionalNodes\030\005 \002(\r\022\022"
        "\n\nclientName\030\006 \002(\t\022\034\n\024existingStorageUui"
        "ds\030\007 \003(\t\"U\n\"GetAdditionalDatanodeRespons"
        "eProto\022/\n\005block\030\001 \002(\0132 .Hdfs.Internal.Lo"
        "catedBlockProto\"{\n\024CompleteRequestProto\022"
        "\013\n\003src\030\001 \002(\t\022\022\n\nclientName\030\002 "
        "\002(\t\022/\n\004last"
        "\030\003 \001(\0132!.Hdfs.Internal.ExtendedBlockProt"
        "o\022\021\n\006fileId\030\004 "
        "\001(\004:\0010\"\'\n\025CompleteResponse"
        "Proto\022\016\n\006result\030\001 \002(\010\"O\n\033ReportBadBlocks"
        "RequestProto\0220\n\006blocks\030\001 \003(\0132 .Hdfs.Inte"
        "rnal.LocatedBlockProto\"\036\n\034ReportBadBlock"
        "sResponseProto\"/\n\022ConcatRequestProto\022\013\n\003"
        "trg\030\001 \002(\t\022\014\n\004srcs\030\002 "
        "\003(\t\"\025\n\023ConcatRespons"
        "eProto\"J\n\024TruncateRequestProto\022\013\n\003src\030\001 "
        "\002(\t\022\021\n\tnewLength\030\002 "
        "\002(\004\022\022\n\nclientName\030\003 \002"
        "(\t\"\'\n\025TruncateResponseProto\022\016\n\006result\030\001 "
        "\002(\010\"7\n\024GetLeaseRequestProto\022\013\n\003src\030\001 "
        "\002(\t"
        "\022\022\n\nclientName\030\002 \002(\t\"\027\n\025GetLeaseResponse"
        "Proto\";\n\030ReleaseLeaseRequestProto\022\013\n\003src"
        "\030\001 \002(\t\022\022\n\nclientName\030\002 "
        "\002(\t\"\033\n\031ReleaseLea"
        "seResponseProto\".\n\022RenameRequestProto\022\013\n"
        "\003src\030\001 \002(\t\022\013\n\003dst\030\002 "
        "\002(\t\"%\n\023RenameRespons"
        "eProto\022\016\n\006result\030\001 \002(\010\"F\n\023Rename2Request"
        "Proto\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002 "
        "\002(\t\022\025\n\roverw"
        "riteDest\030\003 \002(\010\"\026\n\024Rename2ResponseProto\"4"
        "\n\022DeleteRequestProto\022\013\n\003src\030\001 "
        "\002(\t\022\021\n\trec"
        "ursive\030\002 \002(\010\"%\n\023DeleteResponseProto\022\016\n\006r"
        "esult\030\001 \002(\010\"i\n\022MkdirsRequestProto\022\013\n\003src"
        "\030\001 \002(\t\0220\n\006masked\030\002 \002(\0132 .Hdfs.Internal.F"
        "sPermissionProto\022\024\n\014createParent\030\003 \002(\010\"%"
        "\n\023MkdirsResponseProto\022\016\n\006result\030\001 \002(\010\"O\n"
        "\026GetListingRequestProto\022\013\n\003src\030\001 "
        "\002(\t\022\022\n\n"
        "startAfter\030\002 \002(\014\022\024\n\014needLocation\030\003 "
        "\002(\010\"P"
        "\n\027GetListingResponseProto\0225\n\007dirList\030\001 \001"
        "(\0132$.Hdfs.Internal.DirectoryListingProto"
        "\"(\n&GetSnapshottableDirListingRequestPro"
        "to\"z\n\'GetSnapshottableDirListingResponse"
        "Proto\022O\n\024snapshottableDirList\030\001 \001(\01321.Hd"
        "fs.Internal.SnapshottableDirectoryListin"
        "gProto\"c\n!GetSnapshotDiffReportRequestPr"
        "oto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n\014fromSnapsho"
        "t\030\002 \002(\t\022\022\n\ntoSnapshot\030\003 "
        "\002(\t\"`\n\"GetSnapsh"
        "otDiffReportResponseProto\022:\n\ndiffReport\030"
        "\001 \002(\0132&.Hdfs.Internal.SnapshotDiffReport"
        "Proto\",\n\026RenewLeaseRequestProto\022\022\n\nclien"
        "tName\030\001 \002(\t\"\031\n\027RenewLeaseResponseProto\";"
        "\n\030RecoverLeaseRequestProto\022\013\n\003src\030\001 \002(\t\022"
        "\022\n\nclientName\030\002 \002(\t\"+\n\031RecoverLeaseRespo"
        "nseProto\022\016\n\006result\030\001 \002(\010\"\031\n\027GetFsStatusR"
        "equestProto\"\226\001\n\027GetFsStatsResponseProto\022"
        "\020\n\010capacity\030\001 \002(\004\022\014\n\004used\030\002 "
        "\002(\004\022\021\n\tremai"
        "ning\030\003 \002(\004\022\030\n\020under_replicated\030\004 "
        "\002(\004\022\026\n\016"
        "corrupt_blocks\030\005 \002(\004\022\026\n\016missing_blocks\030\006"
        " \002(\004\"U\n\035GetDatanodeReportRequestProto\0224\n"
        "\004type\030\001 \002(\0162&.Hdfs.Internal.DatanodeRepo"
        "rtTypeProto\"N\n\036GetDatanodeReportResponse"
        "Proto\022,\n\002di\030\001 \003(\0132 .Hdfs.Internal.Datano"
        "deInfoProto\"5\n!GetPreferredBlockSizeRequ"
        "estProto\022\020\n\010filename\030\001 \002(\t\"3\n\"GetPreferr"
        "edBlockSizeResponseProto\022\r\n\005bsize\030\001 \002(\004\""
        "e\n\027SetSafeModeRequestProto\0222\n\006action\030\001 \002"
        "(\0162\".Hdfs.Internal.SafeModeActionProto\022\026"
        "\n\007checked\030\002 \001(\010:\005false\"*\n\030SetSafeModeRes"
        "ponseProto\022\016\n\006result\030\001 \002(\010\"\033\n\031SaveNamesp"
        "aceRequestProto\"\034\n\032SaveNamespaceResponse"
        "Proto\"\027\n\025RollEditsRequestProto\"0\n\026RollEd"
        "itsResponseProto\022\026\n\016newSegmentTxId\030\001 \002(\004"
        "\"/\n RestoreFailedStorageRequestProto\022\013\n\003"
        "arg\030\001 \002(\t\"3\n!RestoreFailedStorageRespons"
        "eProto\022\016\n\006result\030\001 \002(\010\"\032\n\030RefreshNodesRe"
        "questProto\"\033\n\031RefreshNodesResponseProto\""
        "\035\n\033FinalizeUpgradeRequestProto\"\036\n\034Finali"
        "zeUpgradeResponseProto\"A\n!ListCorruptFil"
        "eBlocksRequestProto\022\014\n\004path\030\001 \002(\t\022\016\n\006coo"
        "kie\030\002 \001(\t\"\\\n\"ListCorruptFileBlocksRespon"
        "seProto\0226\n\007corrupt\030\001 \002(\0132%.Hdfs.Internal"
        ".CorruptFileBlocksProto\"(\n\024MetaSaveReque"
        "stProto\022\020\n\010filename\030\001 \002(\t\"\027\n\025MetaSaveRes"
        "ponseProto\"&\n\027GetFileInfoRequestProto\022\013\n"
        "\003src\030\001 \002(\t\"J\n\030GetFileInfoResponseProto\022."
        "\n\002fs\030\001 \001(\0132\".Hdfs.Internal.HdfsFileStatu"
        "sProto\"\'\n\030IsFileClosedRequestProto\022\013\n\003sr"
        "c\030\001 \002(\t\"+\n\031IsFileClosedResponseProto\022\016\n\006"
        "result\030\001 \002(\010\"\234\001\n\027CacheDirectiveInfoProto"
        "\022\n\n\002id\030\001 \001(\003\022\014\n\004path\030\002 "
        "\001(\t\022\023\n\013replicatio"
        "n\030\003 \001(\r\022\014\n\004pool\030\004 "
        "\001(\t\022D\n\nexpiration\030\005 \001("
        "\01320.Hdfs.Internal.CacheDirectiveInfoExpi"
        "rationProto\"G\n!CacheDirectiveInfoExpirat"
        "ionProto\022\016\n\006millis\030\001 "
        "\002(\003\022\022\n\nisRelative\030\002"
        " \002(\010\"\202\001\n\030CacheDirectiveStatsProto\022\023\n\013byt"
        "esNeeded\030\001 \002(\003\022\023\n\013bytesCached\030\002 "
        "\002(\003\022\023\n\013f"
        "ilesNeeded\030\003 \002(\003\022\023\n\013filesCached\030\004 "
        "\002(\003\022\022\n"
        "\nhasExpired\030\005 \002(\010\"i\n\035AddCacheDirectiveRe"
        "questProto\0224\n\004info\030\001 \002(\0132&.Hdfs.Internal"
        ".CacheDirectiveInfoProto\022\022\n\ncacheFlags\030\002"
        " \001(\r\",\n\036AddCacheDirectiveResponseProto\022\n"
        "\n\002id\030\001 \002(\003\"l\n ModifyCacheDirectiveReques"
        "tProto\0224\n\004info\030\001 \002(\0132&.Hdfs.Internal.Cac"
        "heDirectiveInfoProto\022\022\n\ncacheFlags\030\002 \001(\r"
        "\"#\n!ModifyCacheDirectiveResponseProto\".\n"
        " RemoveCacheDirectiveRequestProto\022\n\n\002id\030"
        "\001 \002(\003\"#\n!RemoveCacheDirectiveResponsePro"
        "to\"i\n\037ListCacheDirectivesRequestProto\022\016\n"
        "\006prevId\030\001 \002(\003\0226\n\006filter\030\002 "
        "\002(\0132&.Hdfs.Int"
        "ernal.CacheDirectiveInfoProto\"\210\001\n\030CacheD"
        "irectiveEntryProto\0224\n\004info\030\001 \002(\0132&.Hdfs."
        "Internal.CacheDirectiveInfoProto\0226\n\005stat"
        "s\030\002 \002(\0132\'.Hdfs.Internal.CacheDirectiveSt"
        "atsProto\"n\n ListCacheDirectivesResponseP"
        "roto\0229\n\010elements\030\001 \003(\0132\'.Hdfs.Internal.C"
        "acheDirectiveEntryProto\022\017\n\007hasMore\030\002 \002(\010"
        "\"\204\001\n\022CachePoolInfoProto\022\020\n\010poolName\030\001 \001("
        "\t\022\021\n\townerName\030\002 \001(\t\022\021\n\tgroupName\030\003 "
        "\001(\t\022"
        "\014\n\004mode\030\004 \001(\005\022\r\n\005limit\030\005 "
        "\001(\003\022\031\n\021maxRelat"
        "iveExpiry\030\006 \001(\003\"\201\001\n\023CachePoolStatsProto\022"
        "\023\n\013bytesNeeded\030\001 "
        "\002(\003\022\023\n\013bytesCached\030\002 \002("
        "\003\022\026\n\016bytesOverlimit\030\003 "
        "\002(\003\022\023\n\013filesNeeded"
        "\030\004 \002(\003\022\023\n\013filesCached\030\005 "
        "\002(\003\"K\n\030AddCacheP"
        "oolRequestProto\022/\n\004info\030\001 \002(\0132!.Hdfs.Int"
        "ernal.CachePoolInfoProto\"\033\n\031AddCachePool"
        "ResponseProto\"N\n\033ModifyCachePoolRequestP"
        "roto\022/\n\004info\030\001 \002(\0132!.Hdfs.Internal.Cache"
        "PoolInfoProto\"\036\n\034ModifyCachePoolResponse"
        "Proto\"/\n\033RemoveCachePoolRequestProto\022\020\n\010"
        "poolName\030\001 \002(\t\"\036\n\034RemoveCachePoolRespons"
        "eProto\"2\n\032ListCachePoolsRequestProto\022\024\n\014"
        "prevPoolName\030\001 \002(\t\"c\n\033ListCachePoolsResp"
        "onseProto\0223\n\007entries\030\001 \003(\0132\".Hdfs.Intern"
        "al.CachePoolEntryProto\022\017\n\007hasMore\030\002 \002(\010\""
        "y\n\023CachePoolEntryProto\022/\n\004info\030\001 \002(\0132!.H"
        "dfs.Internal.CachePoolInfoProto\0221\n\005stats"
        "\030\002 \002(\0132\".Hdfs.Internal.CachePoolStatsPro"
        "to\"*\n\033GetFileLinkInfoRequestProto\022\013\n\003src"
        "\030\001 \002(\t\"N\n\034GetFileLinkInfoResponseProto\022."
        "\n\002fs\030\001 \001(\0132\".Hdfs.Internal.HdfsFileStatu"
        "sProto\"-\n\035GetContentSummaryRequestProto\022"
        "\014\n\004path\030\001 \002(\t\"U\n\036GetContentSummaryRespon"
        "seProto\0223\n\007summary\030\001 \002(\0132\".Hdfs.Internal"
        ".ContentSummaryProto\"T\n\024SetQuotaRequestP"
        "roto\022\014\n\004path\030\001 "
        "\002(\t\022\026\n\016namespaceQuota\030\002 \002"
        "(\004\022\026\n\016diskspaceQuota\030\003 "
        "\002(\004\"\027\n\025SetQuotaRe"
        "sponseProto\"M\n\021FsyncRequestProto\022\013\n\003src\030"
        "\001 \002(\t\022\016\n\006client\030\002 "
        "\002(\t\022\033\n\017lastBlockLength"
        "\030\003 \001(\022:\002-1\"\024\n\022FsyncResponseProto\"A\n\024SetT"
        "imesRequestProto\022\013\n\003src\030\001 "
        "\002(\t\022\r\n\005mtime\030\002"
        " \002(\004\022\r\n\005atime\030\003 "
        "\002(\004\"\027\n\025SetTimesResponseP"
        "roto\"\202\001\n\031CreateSymlinkRequestProto\022\016\n\006ta"
        "rget\030\001 \002(\t\022\014\n\004link\030\002 "
        "\002(\t\0221\n\007dirPerm\030\003 \002("
        "\0132 .Hdfs.Internal.FsPermissionProto\022\024\n\014c"
        "reateParent\030\004 \002(\010\"\034\n\032CreateSymlinkRespon"
        "seProto\")\n\031GetLinkTargetRequestProto\022\014\n\004"
        "path\030\001 \002(\t\"0\n\032GetLinkTargetResponseProto"
        "\022\022\n\ntargetPath\030\001 \001(\t\"j\n\"UpdateBlockForPi"
        "pelineRequestProto\0220\n\005block\030\001 \002(\0132!.Hdfs"
        ".Internal.ExtendedBlockProto\022\022\n\nclientNa"
        "me\030\002 \002(\t\"V\n#UpdateBlockForPipelineRespon"
        "seProto\022/\n\005block\030\001 \002(\0132 .Hdfs.Internal.L"
        "ocatedBlockProto\"\340\001\n\032UpdatePipelineReque"
        "stProto\022\022\n\nclientName\030\001 \002(\t\0223\n\010oldBlock\030"
        "\002 \002(\0132!.Hdfs.Internal.ExtendedBlockProto"
        "\0223\n\010newBlock\030\003 \002(\0132!.Hdfs.Internal.Exten"
        "dedBlockProto\0220\n\010newNodes\030\004 \003(\0132\036.Hdfs.I"
        "nternal.DatanodeIDProto\022\022\n\nstorageIDs\030\005 "
        "\003(\t\"\035\n\033UpdatePipelineResponseProto\"5\n Se"
        "tBalancerBandwidthRequestProto\022\021\n\tbandwi"
        "dth\030\001 \002(\003\"#\n!SetBalancerBandwidthRespons"
        "eProto\"\"\n GetDataEncryptionKeyRequestPro"
        "to\"e\n!GetDataEncryptionKeyResponseProto\022"
        "@\n\021dataEncryptionKey\030\001 \001(\0132%.Hdfs.Intern"
        "al.DataEncryptionKeyProto\"H\n\032CreateSnaps"
        "hotRequestProto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n"
        "\014snapshotName\030\002 \001(\t\"3\n\033CreateSnapshotRes"
        "ponseProto\022\024\n\014snapshotPath\030\001 \002(\t\"d\n\032Rena"
        "meSnapshotRequestProto\022\024\n\014snapshotRoot\030\001"
        " \002(\t\022\027\n\017snapshotOldName\030\002 "
        "\002(\t\022\027\n\017snapsho"
        "tNewName\030\003 \002(\t\"\035\n\033RenameSnapshotResponse"
        "Proto\"1\n\031AllowSnapshotRequestProto\022\024\n\014sn"
        "apshotRoot\030\001 \002(\t\"\034\n\032AllowSnapshotRespons"
        "eProto\"4\n\034DisallowSnapshotRequestProto\022\024"
        "\n\014snapshotRoot\030\001 \002(\t\"\037\n\035DisallowSnapshot"
        "ResponseProto\"H\n\032DeleteSnapshotRequestPr"
        "oto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n\014snapshotNam"
        "e\030\002 \002(\t\"\035\n\033DeleteSnapshotResponseProto*8"
        "\n\017CreateFlagProto\022\n\n\006CREATE\020\001\022\r\n\tOVERWRI"
        "TE\020\002\022\n\n\006APPEND\020\004*6\n\027DatanodeReportTypePr"
        "oto\022\007\n\003ALL\020\001\022\010\n\004LIVE\020\002\022\010\n\004DE"
        "AD\020\003*O\n\023Safe"
        "ModeActionProto\022\022\n\016SAFEMODE_LEAVE\020\001\022\022\n\016S"
        "AFEMODE_ENTER\020\002\022\020\n\014SAFEMODE_GET\020\003*\033\n\016Cac"
        "heFlagProto\022\t\n\005FORCE\020\0012\3037\n\026ClientNamenod"
        "eProtocol\022p\n\021getBlockLocations\022,.Hdfs.In"
        "ternal.GetBlockLocationsRequestProto\032-.H"
        "dfs.Internal.GetBlockLocationsResponsePr"
        "oto\022p\n\021getServerDefaults\022,.Hdfs.Internal"
        ".GetServerDefaultsRequestProto\032-.Hdfs.In"
        "ternal.GetServerDefaultsResponseProto\022O\n"
        "\006create\022!.Hdfs.Internal.CreateRequestPro"
        "to\032\".Hdfs.Internal.CreateResponseProto\022O"
        "\n\006append\022!.Hdfs.Internal.AppendRequestPr"
        "oto\032\".Hdfs.Internal.AppendResponseProto\022"
        "g\n\016setReplication\022).Hdfs.Internal.SetRep"
        "licationRequestProto\032*.Hdfs.Internal.Set"
        "ReplicationResponseProto\022d\n\rsetPermissio"
        "n\022(.Hdfs.Internal.SetPermissionRequestPr"
        "oto\032).Hdfs.Internal.SetPermissionRespons"
        "eProto\022U\n\010setOwner\022#.Hdfs.Internal.SetOw"
        "nerRequestProto\032$.Hdfs.Internal.SetOwner"
        "ResponseProto\022a\n\014abandonBlock\022\'.Hdfs.Int"
        "ernal.AbandonBlockRequestProto\032(.Hdfs.In"
        "ternal.AbandonBlockResponseProto\022U\n\010addB"
        "lock\022#.Hdfs.Internal.AddBlockRequestProt"
        "o\032$.Hdfs.Internal.AddBlockResponseProto\022"
        "|\n\025getAdditionalDatanode\0220.Hdfs.Internal"
        ".GetAdditionalDatanodeRequestProto\0321.Hdf"
        "s.Internal.GetAdditionalDatanodeResponse"
        "Proto\022U\n\010complete\022#.Hdfs.Internal.Comple"
        "teRequestProto\032$.Hdfs.Internal.CompleteR"
        "esponseProto\022j\n\017reportBadBlocks\022*.Hdfs.I"
        "nternal.ReportBadBlocksRequestProto\032+.Hd"
        "fs.Internal.ReportBadBlocksResponseProto"
        "\022O\n\006concat\022!.Hdfs.Internal.ConcatRequest"
        "Proto\032\".Hdfs.Internal.ConcatResponseProt"
        "o\022U\n\010truncate\022#.Hdfs.Internal.TruncateRe"
        "questProto\032$.Hdfs.Internal.TruncateRespo"
        "nseProto\022U\n\010getLease\022#.Hdfs.Internal.Get"
        "LeaseRequestProto\032$.Hdfs.Internal.GetLea"
        "seResponseProto\022a\n\014releaseLease\022\'.Hdfs.I"
        "nternal.ReleaseLeaseRequestProto\032(.Hdfs."
        "Internal.ReleaseLeaseResponseProto\022O\n\006re"
        "name\022!.Hdfs.Internal.RenameRequestProto\032"
        "\".Hdfs.Internal.RenameResponseProto\022R\n\007r"
        "ename2\022\".Hdfs.Internal.Rename2RequestPro"
        "to\032#.Hdfs.Internal.Rename2ResponseProto\022"
        "S\n\ndeleteFile\022!.Hdfs.Internal.DeleteRequ"
        "estProto\032\".Hdfs.Internal.DeleteResponseP"
        "roto\022O\n\006mkdirs\022!.Hdfs.Internal.MkdirsReq"
        "uestProto\032\".Hdfs.Internal.MkdirsResponse"
        "Proto\022[\n\ngetListing\022%.Hdfs.Internal.GetL"
        "istingRequestProto\032&.Hdfs.Internal.GetLi"
        "stingResponseProto\022[\n\nrenewLease\022%.Hdfs."
        "Internal.RenewLeaseRequestProto\032&.Hdfs.I"
        "nternal.RenewLeaseResponseProto\022a\n\014recov"
        "erLease\022\'.Hdfs.Internal.RecoverLeaseRequ"
        "estProto\032(.Hdfs.Internal.RecoverLeaseRes"
        "ponseProto\022\\\n\ngetFsStats\022&.Hdfs.Internal"
        ".GetFsStatusRequestProto\032&.Hdfs.Internal"
        ".GetFsStatsResponseProto\022p\n\021getDatanodeR"
        "eport\022,.Hdfs.Internal.GetDatanodeReportR"
        "equestProto\032-.Hdfs.Internal.GetDatanodeR"
        "eportResponseProto\022|\n\025getPreferredBlockS"
        "ize\0220.Hdfs.Internal.GetPreferredBlockSiz"
        "eRequestProto\0321.Hdfs.Internal.GetPreferr"
        "edBlockSizeResponseProto\022^\n\013setSafeMode\022"
        "&.Hdfs.Internal.SetSafeModeRequestProto\032"
        "\'.Hdfs.Internal.SetSafeModeResponseProto"
        "\022d\n\rsaveNamespace\022(.Hdfs.Internal.SaveNa"
        "mespaceRequestProto\032).Hdfs.Internal.Save"
        "NamespaceResponseProto\022X\n\trollEdits\022$.Hd"
        "fs.Internal.RollEditsRequestProto\032%.Hdfs"
        ".Internal.RollEditsResponseProto\022y\n\024rest"
        "oreFailedStorage\022/.Hdfs.Internal.Restore"
        "FailedStorageRequestProto\0320.Hdfs.Interna"
        "l.RestoreFailedStorageResponseProto\022a\n\014r"
        "efreshNodes\022\'.Hdfs.Internal.RefreshNodes"
        "RequestProto\032(.Hdfs.Internal.RefreshNode"
        "sResponseProto\022j\n\017finalizeUpgrade\022*.Hdfs"
        ".Internal.FinalizeUpgradeRequestProto\032+."
        "Hdfs.Internal.FinalizeUpgradeResponsePro"
        "to\022|\n\025listCorruptFileBlocks\0220.Hdfs.Inter"
        "nal.ListCorruptFileBlocksRequestProto\0321."
        "Hdfs.Internal.ListCorruptFileBlocksRespo"
        "nseProto\022U\n\010metaSave\022#.Hdfs.Internal.Met"
        "aSaveRequestProto\032$.Hdfs.Internal.MetaSa"
        "veResponseProto\022^\n\013getFileInfo\022&.Hdfs.In"
        "ternal.GetFileInfoRequestProto\032\'.Hdfs.In"
        "ternal.GetFileInfoResponseProto\022p\n\021addCa"
        "cheDirective\022,.Hdfs.Internal.AddCacheDir"
        "ectiveRequestProto\032-.Hdfs.Internal.AddCa"
        "cheDirectiveResponseProto\022y\n\024modifyCache"
        "Directive\022/.Hdfs.Internal.ModifyCacheDir"
        "ectiveRequestProto\0320.Hdfs.Internal.Modif"
        "yCacheDirectiveResponseProto\022y\n\024removeCa"
        "cheDirective\022/.Hdfs.Internal.RemoveCache"
        "DirectiveRequestProto\0320.Hdfs.Internal.Re"
        "moveCacheDirectiveResponseProto\022v\n\023listC"
        "acheDirectives\022..Hdfs.Internal.ListCache"
        "DirectivesRequestProto\032/.Hdfs.Internal.L"
        "istCacheDirectivesResponseProto\022a\n\014addCa"
        "chePool\022\'.Hdfs.Internal.AddCachePoolRequ"
        "estProto\032(.Hdfs.Internal.AddCachePoolRes"
        "ponseProto\022j\n\017modifyCachePool\022*.Hdfs.Int"
        "ernal.ModifyCachePoolRequestProto\032+.Hdfs"
        ".Internal.ModifyCachePoolResponseProto\022j"
        "\n\017removeCachePool\022*.Hdfs.Internal.Remove"
        "CachePoolRequestProto\032+.Hdfs.Internal.Re"
        "moveCachePoolResponseProto\022g\n\016listCacheP"
        "ools\022).Hdfs.Internal.ListCachePoolsReque"
        "stProto\032*.Hdfs.Internal.ListCachePoolsRe"
        "sponseProto\022j\n\017getFileLinkInfo\022*.Hdfs.In"
        "ternal.GetFileLinkInfoRequestProto\032+.Hdf"
        "s.Internal.GetFileLinkInfoResponseProto\022"
        "p\n\021getContentSummary\022,.Hdfs.Internal.Get"
        "ContentSummaryRequestProto\032-.Hdfs.Intern"
        "al.GetContentSummaryResponseProto\022U\n\010set"
        "Quota\022#.Hdfs.Internal.SetQuotaRequestPro"
        "to\032$.Hdfs.Internal.SetQuotaResponseProto"
        "\022L\n\005fsync\022 .Hdfs.Internal.FsyncRequestPr"
        "oto\032!.Hdfs.Internal.FsyncResponseProto\022U"
        "\n\010setTimes\022#.Hdfs.Internal.SetTimesReque"
        "stProto\032$.Hdfs.Internal.SetTimesResponse"
        "Proto\022d\n\rcreateSymlink\022(.Hdfs.Internal.C"
        "reateSymlinkRequestProto\032).Hdfs.Internal"
        ".CreateSymlinkResponseProto\022d\n\rgetLinkTa"
        "rget\022(.Hdfs.Internal.GetLinkTargetReques"
        "tProto\032).Hdfs.Internal.GetLinkTargetResp"
        "onseProto\022\177\n\026updateBlockForPipeline\0221.Hd"
        "fs.Internal.UpdateBlockForPipelineReques"
        "tProto\0322.Hdfs.Internal.UpdateBlockForPip"
        "elineResponseProto\022g\n\016updatePipeline\022).H"
        "dfs.Internal.UpdatePipelineRequestProto\032"
        "*.Hdfs.Internal.UpdatePipelineResponsePr"
        "oto\022s\n\022getDelegationToken\022-.Hdfs.Interna"
        "l.GetDelegationTokenRequestProto\032..Hdfs."
        "Internal.GetDelegationTokenResponseProto"
        "\022y\n\024renewDelegationToken\022/.Hdfs.Internal"
        ".RenewDelegationTokenRequestProto\0320.Hdfs"
        ".Internal.RenewDelegationTokenResponsePr"
        "oto\022|\n\025cancelDelegationToken\0220.Hdfs.Inte"
        "rnal.CancelDelegationTokenRequestProto\0321"
        ".Hdfs.Internal.CancelDelegationTokenResp"
        "onseProto\022y\n\024setBalancerBandwidth\022/.Hdfs"
        ".Internal.SetBalancerBandwidthRequestPro"
        "to\0320.Hdfs.Internal.SetBalancerBandwidthR"
        "esponseProto\022y\n\024getDataEncryptionKey\022/.H"
        "dfs.Internal.GetDataEncryptionKeyRequest"
        "Proto\0320.Hdfs.Internal.GetDataEncryptionK"
        "eyResponseProto\022g\n\016createSnapshot\022).Hdfs"
        ".Internal.CreateSnapshotRequestProto\032*.H"
        "dfs.Internal.CreateSnapshotResponseProto"
        "\022g\n\016renameSnapshot\022).Hdfs.Internal.Renam"
        "eSnapshotRequestProto\032*.Hdfs.Internal.Re"
        "nameSnapshotResponseProto\022d\n\rallowSnapsh"
        "ot\022(.Hdfs.Internal.AllowSnapshotRequestP"
        "roto\032).Hdfs.Internal.AllowSnapshotRespon"
        "seProto\022m\n\020disallowSnapshot\022+.Hdfs.Inter"
        "nal.DisallowSnapshotRequestProto\032,.Hdfs."
        "Internal.DisallowSnapshotResponseProto\022\213"
        "\001\n\032getSnapshottableDirListing\0225.Hdfs.Int"
        "ernal.GetSnapshottableDirListingRequestP"
        "roto\0326.Hdfs.Internal.GetSnapshottableDir"
        "ListingResponseProto\022g\n\016deleteSnapshot\022)"
        ".Hdfs.Internal.DeleteSnapshotRequestProt"
        "o\032*.Hdfs.Internal.DeleteSnapshotResponse"
        "Proto\022|\n\025getSnapshotDiffReport\0220.Hdfs.In"
        "ternal.GetSnapshotDiffReportRequestProto"
        "\0321.Hdfs.Internal.GetSnapshotDiffReportRe"
        "sponseProto\022a\n\014isFileClosed\022\'.Hdfs.Inter"
        "nal.IsFileClosedRequestProto\032(.Hdfs.Inte"
        "rnal.IsFileClosedResponseProto\022y\n\024create"
        "EncryptionZone\022/.Hdfs.Internal.CreateEnc"
        "ryptionZoneRequestProto\0320.Hdfs.Internal."
        "CreateEncryptionZoneResponseProto\022v\n\023lis"
        "tEncryptionZones\022..Hdfs.Internal.ListEnc"
        "ryptionZonesRequestProto\032/.Hdfs.Internal"
        ".ListEncryptionZonesResponseProto\022a\n\014get"
        "EZForPath\022\'.Hdfs.Internal.GetEZForPathRe"
        "questProto\032(.Hdfs.Internal.GetEZForPathR"
        "esponseProtoBN\n%org.apache.hadoop.hdfs.p"
        "rotocol.protoB\034ClientNamenodeProtocolPro"
        "tos\200\001\001\210\001\001\240\001\001";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_ClientNamenodeProtocol_2eproto_deps[3] = {
        &::descriptor_table_Security_2eproto,
        &::descriptor_table_encryption_2eproto,
        &::descriptor_table_hdfs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_ClientNamenodeProtocol_2eproto_sccs[131] = {
        &scc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AbandonBlockResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_AddCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AddCachePoolResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AllowSnapshotResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CompleteResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ConcatResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_CreateSymlinkResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_DeleteResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_DeleteSnapshotResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_DisallowSnapshotResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_FinalizeUpgradeRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_FinalizeUpgradeResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_FsyncResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetDataEncryptionKeyRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetDatanodeReportRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetFsStatsResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetFsStatusRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetLeaseResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetPreferredBlockSizeResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetServerDefaultsRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetSnapshottableDirListingRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_IsFileClosedResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_MetaSaveResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_MkdirsResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ModifyCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ModifyCachePoolResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RecoverLeaseResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RefreshNodesRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RefreshNodesResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ReleaseLeaseResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RemoveCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RemoveCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RemoveCachePoolResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_Rename2ResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RenameResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RenameSnapshotResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RenewLeaseResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_ReportBadBlocksResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RestoreFailedStorageResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_RollEditsRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_RollEditsResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SaveNamespaceRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SaveNamespaceResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetBalancerBandwidthRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetBalancerBandwidthResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetOwnerResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetPermissionResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetQuotaResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetReplicationResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_SetSafeModeRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetSafeModeResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_SetTimesResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_TruncateResponseProto_ClientNamenodeProtocol_2eproto.base,
        &scc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto
             .base,
        &scc_info_UpdatePipelineResponseProto_ClientNamenodeProtocol_2eproto
             .base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_ClientNamenodeProtocol_2eproto_once;
static bool descriptor_table_ClientNamenodeProtocol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ClientNamenodeProtocol_2eproto = {
        &descriptor_table_ClientNamenodeProtocol_2eproto_initialized,
        descriptor_table_protodef_ClientNamenodeProtocol_2eproto,
        "ClientNamenodeProtocol.proto",
        16572,
        &descriptor_table_ClientNamenodeProtocol_2eproto_once,
        descriptor_table_ClientNamenodeProtocol_2eproto_sccs,
        descriptor_table_ClientNamenodeProtocol_2eproto_deps,
        131,
        3,
        schemas,
        file_default_instances,
        TableStruct_ClientNamenodeProtocol_2eproto::offsets,
        file_level_metadata_ClientNamenodeProtocol_2eproto,
        131,
        file_level_enum_descriptors_ClientNamenodeProtocol_2eproto,
        file_level_service_descriptors_ClientNamenodeProtocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ClientNamenodeProtocol_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_ClientNamenodeProtocol_2eproto),
     true);
namespace Hdfs {
namespace Internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateFlagProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ClientNamenodeProtocol_2eproto);
  return file_level_enum_descriptors_ClientNamenodeProtocol_2eproto[0];
}
bool CreateFlagProto_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DatanodeReportTypeProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ClientNamenodeProtocol_2eproto);
  return file_level_enum_descriptors_ClientNamenodeProtocol_2eproto[1];
}
bool DatanodeReportTypeProto_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SafeModeActionProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ClientNamenodeProtocol_2eproto);
  return file_level_enum_descriptors_ClientNamenodeProtocol_2eproto[2];
}
bool SafeModeActionProto_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CacheFlagProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ClientNamenodeProtocol_2eproto);
  return file_level_enum_descriptors_ClientNamenodeProtocol_2eproto[3];
}
bool CacheFlagProto_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

// ===================================================================

void GetBlockLocationsRequestProto::InitAsDefaultInstance() {}
class GetBlockLocationsRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBlockLocationsRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_offset(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_length(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

GetBlockLocationsRequestProto::GetBlockLocationsRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetBlockLocationsRequestProto)
}
GetBlockLocationsRequestProto::GetBlockLocationsRequestProto(
    const GetBlockLocationsRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  ::memcpy(&offset_, &from.offset_,
           static_cast<size_t>(reinterpret_cast<char*>(&length_) -
                               reinterpret_cast<char*>(&offset_)) +
               sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetBlockLocationsRequestProto)
}

void GetBlockLocationsRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&length_) -
                               reinterpret_cast<char*>(&offset_)) +
               sizeof(length_));
}

GetBlockLocationsRequestProto::~GetBlockLocationsRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetBlockLocationsRequestProto)
  SharedDtor();
}

void GetBlockLocationsRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockLocationsRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockLocationsRequestProto&
GetBlockLocationsRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetBlockLocationsRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetBlockLocationsRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&offset_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&length_) -
                                 reinterpret_cast<char*>(&offset_)) +
                 sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBlockLocationsRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetBlockLocationsRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetBlockLocationsRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetBlockLocationsRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_offset(), target);
  }

  // required uint64 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetBlockLocationsRequestProto)
  return target;
}

size_t GetBlockLocationsRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_offset()) {
    // required uint64 offset = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_offset());
  }

  if (_internal_has_length()) {
    // required uint64 length = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_length());
  }

  return total_size;
}
size_t GetBlockLocationsRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required uint64 offset = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_offset());

    // required uint64 length = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockLocationsRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockLocationsRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetBlockLocationsRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetBlockLocationsRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetBlockLocationsRequestProto)
    MergeFrom(*source);
  }
}

void GetBlockLocationsRequestProto::MergeFrom(
    const GetBlockLocationsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBlockLocationsRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockLocationsRequestProto::CopyFrom(
    const GetBlockLocationsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetBlockLocationsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GetBlockLocationsRequestProto::InternalSwap(
    GetBlockLocationsRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationsRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetBlockLocationsResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetBlockLocationsResponseProto_default_instance_._instance
      .get_mutable()
      ->locations_ = const_cast<::Hdfs::Internal::LocatedBlocksProto*>(
      ::Hdfs::Internal::LocatedBlocksProto::internal_default_instance());
}
class GetBlockLocationsResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBlockLocationsResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::LocatedBlocksProto& locations(
      const GetBlockLocationsResponseProto* msg);
  static void set_has_locations(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::LocatedBlocksProto&
GetBlockLocationsResponseProto::_Internal::locations(
    const GetBlockLocationsResponseProto* msg) {
  return *msg->locations_;
}
void GetBlockLocationsResponseProto::clear_locations() {
  if (locations_ != nullptr) locations_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetBlockLocationsResponseProto::GetBlockLocationsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetBlockLocationsResponseProto)
}
GetBlockLocationsResponseProto::GetBlockLocationsResponseProto(
    const GetBlockLocationsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_locations()) {
    locations_ = new ::Hdfs::Internal::LocatedBlocksProto(*from.locations_);
  } else {
    locations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetBlockLocationsResponseProto)
}

void GetBlockLocationsResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  locations_ = nullptr;
}

GetBlockLocationsResponseProto::~GetBlockLocationsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetBlockLocationsResponseProto)
  SharedDtor();
}

void GetBlockLocationsResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete locations_;
}

void GetBlockLocationsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockLocationsResponseProto&
GetBlockLocationsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetBlockLocationsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetBlockLocationsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(locations_ != nullptr);
    locations_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBlockLocationsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetBlockLocationsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::locations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetBlockLocationsResponseProto)
  return target;
}

size_t GetBlockLocationsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *locations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockLocationsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockLocationsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetBlockLocationsResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetBlockLocationsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetBlockLocationsResponseProto)
    MergeFrom(*source);
  }
}

void GetBlockLocationsResponseProto::MergeFrom(
    const GetBlockLocationsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_locations()) {
    _internal_mutable_locations()
        ->::Hdfs::Internal::LocatedBlocksProto::MergeFrom(
            from._internal_locations());
  }
}

void GetBlockLocationsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockLocationsResponseProto::CopyFrom(
    const GetBlockLocationsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetBlockLocationsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationsResponseProto::IsInitialized() const {
  if (_internal_has_locations()) {
    if (!locations_->IsInitialized()) return false;
  }
  return true;
}

void GetBlockLocationsResponseProto::InternalSwap(
    GetBlockLocationsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(locations_, other->locations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationsResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetServerDefaultsRequestProto::InitAsDefaultInstance() {}
class GetServerDefaultsRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetServerDefaultsRequestProto>()._has_bits_);
};

GetServerDefaultsRequestProto::GetServerDefaultsRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetServerDefaultsRequestProto)
}
GetServerDefaultsRequestProto::GetServerDefaultsRequestProto(
    const GetServerDefaultsRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetServerDefaultsRequestProto)
}

void GetServerDefaultsRequestProto::SharedCtor() {}

GetServerDefaultsRequestProto::~GetServerDefaultsRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetServerDefaultsRequestProto)
  SharedDtor();
}

void GetServerDefaultsRequestProto::SharedDtor() {}

void GetServerDefaultsRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServerDefaultsRequestProto&
GetServerDefaultsRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetServerDefaultsRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetServerDefaultsRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetServerDefaultsRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetServerDefaultsRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetServerDefaultsRequestProto)
  return target;
}

size_t GetServerDefaultsRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerDefaultsRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerDefaultsRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetServerDefaultsRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetServerDefaultsRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetServerDefaultsRequestProto)
    MergeFrom(*source);
  }
}

void GetServerDefaultsRequestProto::MergeFrom(
    const GetServerDefaultsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void GetServerDefaultsRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerDefaultsRequestProto::CopyFrom(
    const GetServerDefaultsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetServerDefaultsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsRequestProto::IsInitialized() const { return true; }

void GetServerDefaultsRequestProto::InternalSwap(
    GetServerDefaultsRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetServerDefaultsResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetServerDefaultsResponseProto_default_instance_._instance
      .get_mutable()
      ->serverdefaults_ = const_cast<::Hdfs::Internal::FsServerDefaultsProto*>(
      ::Hdfs::Internal::FsServerDefaultsProto::internal_default_instance());
}
class GetServerDefaultsResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetServerDefaultsResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::FsServerDefaultsProto& serverdefaults(
      const GetServerDefaultsResponseProto* msg);
  static void set_has_serverdefaults(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Hdfs::Internal::FsServerDefaultsProto&
GetServerDefaultsResponseProto::_Internal::serverdefaults(
    const GetServerDefaultsResponseProto* msg) {
  return *msg->serverdefaults_;
}
void GetServerDefaultsResponseProto::clear_serverdefaults() {
  if (serverdefaults_ != nullptr) serverdefaults_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetServerDefaultsResponseProto::GetServerDefaultsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetServerDefaultsResponseProto)
}
GetServerDefaultsResponseProto::GetServerDefaultsResponseProto(
    const GetServerDefaultsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_serverdefaults()) {
    serverdefaults_ =
        new ::Hdfs::Internal::FsServerDefaultsProto(*from.serverdefaults_);
  } else {
    serverdefaults_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetServerDefaultsResponseProto)
}

void GetServerDefaultsResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  serverdefaults_ = nullptr;
}

GetServerDefaultsResponseProto::~GetServerDefaultsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetServerDefaultsResponseProto)
  SharedDtor();
}

void GetServerDefaultsResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete serverdefaults_;
}

void GetServerDefaultsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServerDefaultsResponseProto&
GetServerDefaultsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetServerDefaultsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetServerDefaultsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(serverdefaults_ != nullptr);
    serverdefaults_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetServerDefaultsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverdefaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetServerDefaultsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::serverdefaults(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetServerDefaultsResponseProto)
  return target;
}

size_t GetServerDefaultsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  if (_internal_has_serverdefaults()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *serverdefaults_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerDefaultsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerDefaultsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetServerDefaultsResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetServerDefaultsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetServerDefaultsResponseProto)
    MergeFrom(*source);
  }
}

void GetServerDefaultsResponseProto::MergeFrom(
    const GetServerDefaultsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_serverdefaults()) {
    _internal_mutable_serverdefaults()
        ->::Hdfs::Internal::FsServerDefaultsProto::MergeFrom(
            from._internal_serverdefaults());
  }
}

void GetServerDefaultsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerDefaultsResponseProto::CopyFrom(
    const GetServerDefaultsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetServerDefaultsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_serverdefaults()) {
    if (!serverdefaults_->IsInitialized()) return false;
  }
  return true;
}

void GetServerDefaultsResponseProto::InternalSwap(
    GetServerDefaultsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(serverdefaults_, other->serverdefaults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CreateRequestProto_default_instance_._instance
      .get_mutable()
      ->masked_ = const_cast<::Hdfs::Internal::FsPermissionProto*>(
      ::Hdfs::Internal::FsPermissionProto::internal_default_instance());
}
class CreateRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::FsPermissionProto& masked(
      const CreateRequestProto* msg);
  static void set_has_masked(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_createflag(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
  static void set_has_createparent(HasBits* has_bits) { (*has_bits)[0] |= 16u; }
  static void set_has_replication(HasBits* has_bits) { (*has_bits)[0] |= 64u; }
  static void set_has_blocksize(HasBits* has_bits) { (*has_bits)[0] |= 32u; }
};

const ::Hdfs::Internal::FsPermissionProto&
CreateRequestProto::_Internal::masked(const CreateRequestProto* msg) {
  return *msg->masked_;
}
void CreateRequestProto::clear_masked() {
  if (masked_ != nullptr) masked_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CreateRequestProto::CreateRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateRequestProto)
}
CreateRequestProto::CreateRequestProto(const CreateRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cryptoprotocolversion_(from.cryptoprotocolversion_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_masked()) {
    masked_ = new ::Hdfs::Internal::FsPermissionProto(*from.masked_);
  } else {
    masked_ = nullptr;
  }
  ::memcpy(&createflag_, &from.createflag_,
           static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                               reinterpret_cast<char*>(&createflag_)) +
               sizeof(replication_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateRequestProto)
}

void CreateRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&masked_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                               reinterpret_cast<char*>(&masked_)) +
               sizeof(replication_));
}

CreateRequestProto::~CreateRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateRequestProto)
  SharedDtor();
}

void CreateRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete masked_;
}

void CreateRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRequestProto& CreateRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CreateRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cryptoprotocolversion_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(masked_ != nullptr);
      masked_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&createflag_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                                 reinterpret_cast<char*>(&createflag_)) +
                 sizeof(replication_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.FsPermissionProto masked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 createFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_createflag(&has_bits);
          createflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool createParent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_createparent(&has_bits);
          createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 replication = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_replication(&has_bits);
          replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 blockSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_blocksize(&has_bits);
          blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Hdfs.Internal.CryptoProtocolVersionProto
      // cryptoProtocolVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val =
                ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(
                    ::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(
                        val))) {
              _internal_add_cryptoprotocolversion(
                  static_cast<::Hdfs::Internal::CryptoProtocolVersionProto>(
                      val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(
                  8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(
              _internal_mutable_cryptoprotocolversion(), ptr, ctx,
              ::Hdfs::Internal::CryptoProtocolVersionProto_IsValid,
              &_internal_metadata_, 8);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::masked(this), target, stream);
  }

  // required string clientName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(3, this->_internal_clientname(),
                                             target);
  }

  // required uint32 createFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            4, this->_internal_createflag(), target);
  }

  // required bool createParent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            5, this->_internal_createparent(), target);
  }

  // required uint32 replication = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            6, this->_internal_replication(), target);
  }

  // required uint64 blockSize = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            7, this->_internal_blocksize(), target);
  }

  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion =
  // 8;
  for (int i = 0, n = this->_internal_cryptoprotocolversion_size(); i < n;
       i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            8, this->_internal_cryptoprotocolversion(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateRequestProto)
  return target;
}

size_t CreateRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CreateRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  if (_internal_has_masked()) {
    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *masked_);
  }

  if (_internal_has_createflag()) {
    // required uint32 createFlag = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_createflag());
  }

  if (_internal_has_createparent()) {
    // required bool createParent = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_blocksize()) {
    // required uint64 blockSize = 7;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_blocksize());
  }

  if (_internal_has_replication()) {
    // required uint32 replication = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_replication());
  }

  return total_size;
}
size_t CreateRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *masked_);

    // required uint32 createFlag = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_createflag());

    // required bool createParent = 5;
    total_size += 1 + 1;

    // required uint64 blockSize = 7;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_blocksize());

    // required uint32 replication = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_replication());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion =
  // 8;
  {
    size_t data_size = 0;
    unsigned int count =
        static_cast<unsigned int>(this->_internal_cryptoprotocolversion_size());
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
          this->_internal_cryptoprotocolversion(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateRequestProto)
    MergeFrom(*source);
  }
}

void CreateRequestProto::MergeFrom(const CreateRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cryptoprotocolversion_.MergeFrom(from.cryptoprotocolversion_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_masked()
          ->::Hdfs::Internal::FsPermissionProto::MergeFrom(
              from._internal_masked());
    }
    if (cached_has_bits & 0x00000008u) {
      createflag_ = from.createflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      createparent_ = from.createparent_;
    }
    if (cached_has_bits & 0x00000020u) {
      blocksize_ = from.blocksize_;
    }
    if (cached_has_bits & 0x00000040u) {
      replication_ = from.replication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequestProto::CopyFrom(const CreateRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (_internal_has_masked()) {
    if (!masked_->IsInitialized()) return false;
  }
  return true;
}

void CreateRequestProto::InternalSwap(CreateRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cryptoprotocolversion_.InternalSwap(&other->cryptoprotocolversion_);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(masked_, other->masked_);
  swap(createflag_, other->createflag_);
  swap(createparent_, other->createparent_);
  swap(blocksize_, other->blocksize_);
  swap(replication_, other->replication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CreateResponseProto_default_instance_._instance
      .get_mutable()
      ->fs_ = const_cast<::Hdfs::Internal::HdfsFileStatusProto*>(
      ::Hdfs::Internal::HdfsFileStatusProto::internal_default_instance());
}
class CreateResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::HdfsFileStatusProto& fs(
      const CreateResponseProto* msg);
  static void set_has_fs(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::HdfsFileStatusProto& CreateResponseProto::_Internal::fs(
    const CreateResponseProto* msg) {
  return *msg->fs_;
}
void CreateResponseProto::clear_fs() {
  if (fs_ != nullptr) fs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CreateResponseProto::CreateResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateResponseProto)
}
CreateResponseProto::CreateResponseProto(const CreateResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fs()) {
    fs_ = new ::Hdfs::Internal::HdfsFileStatusProto(*from.fs_);
  } else {
    fs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateResponseProto)
}

void CreateResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto.base);
  fs_ = nullptr;
}

CreateResponseProto::~CreateResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateResponseProto)
  SharedDtor();
}

void CreateResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete fs_;
}

void CreateResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResponseProto& CreateResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CreateResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fs_ != nullptr);
    fs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::fs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateResponseProto)
  return target;
}

size_t CreateResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*fs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateResponseProto)
    MergeFrom(*source);
  }
}

void CreateResponseProto::MergeFrom(const CreateResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_fs()) {
    _internal_mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(
        from._internal_fs());
  }
}

void CreateResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponseProto::CopyFrom(const CreateResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponseProto::IsInitialized() const {
  if (_internal_has_fs()) {
    if (!fs_->IsInitialized()) return false;
  }
  return true;
}

void CreateResponseProto::InternalSwap(CreateResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fs_, other->fs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AppendRequestProto::InitAsDefaultInstance() {}
class AppendRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

AppendRequestProto::AppendRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AppendRequestProto)
}
AppendRequestProto::AppendRequestProto(const AppendRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AppendRequestProto)
}

void AppendRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppendRequestProto::~AppendRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AppendRequestProto)
  SharedDtor();
}

void AppendRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendRequestProto& AppendRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AppendRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AppendRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AppendRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AppendRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AppendRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AppendRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AppendRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AppendRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AppendRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AppendRequestProto)
  return target;
}

size_t AppendRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.AppendRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t AppendRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AppendRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AppendRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AppendRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AppendRequestProto)
    MergeFrom(*source);
  }
}

void AppendRequestProto::MergeFrom(const AppendRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AppendRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
  }
}

void AppendRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AppendRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRequestProto::CopyFrom(const AppendRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AppendRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AppendRequestProto::InternalSwap(AppendRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AppendResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AppendResponseProto_default_instance_._instance
      .get_mutable()
      ->block_ = const_cast<::Hdfs::Internal::LocatedBlockProto*>(
      ::Hdfs::Internal::LocatedBlockProto::internal_default_instance());
  ::Hdfs::Internal::_AppendResponseProto_default_instance_._instance
      .get_mutable()
      ->stat_ = const_cast<::Hdfs::Internal::HdfsFileStatusProto*>(
      ::Hdfs::Internal::HdfsFileStatusProto::internal_default_instance());
}
class AppendResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::LocatedBlockProto& block(
      const AppendResponseProto* msg);
  static void set_has_block(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::HdfsFileStatusProto& stat(
      const AppendResponseProto* msg);
  static void set_has_stat(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::LocatedBlockProto&
AppendResponseProto::_Internal::block(const AppendResponseProto* msg) {
  return *msg->block_;
}
const ::Hdfs::Internal::HdfsFileStatusProto&
AppendResponseProto::_Internal::stat(const AppendResponseProto* msg) {
  return *msg->stat_;
}
void AppendResponseProto::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AppendResponseProto::clear_stat() {
  if (stat_ != nullptr) stat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AppendResponseProto::AppendResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AppendResponseProto)
}
AppendResponseProto::AppendResponseProto(const AppendResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::Hdfs::Internal::LocatedBlockProto(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::Hdfs::Internal::HdfsFileStatusProto(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AppendResponseProto)
}

void AppendResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto.base);
  ::memset(&block_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&stat_) -
                               reinterpret_cast<char*>(&block_)) +
               sizeof(stat_));
}

AppendResponseProto::~AppendResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AppendResponseProto)
  SharedDtor();
}

void AppendResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete stat_;
}

void AppendResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendResponseProto& AppendResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AppendResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AppendResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AppendResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(block_ != nullptr);
      block_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != nullptr);
      stat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AppendResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AppendResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.LocatedBlockProto block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::block(this), target, stream);
  }

  // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AppendResponseProto)
  return target;
}

size_t AppendResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AppendResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Hdfs.Internal.LocatedBlockProto block = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *block_);
    }

    // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *stat_);
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AppendResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AppendResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AppendResponseProto)
    MergeFrom(*source);
  }
}

void AppendResponseProto::MergeFrom(const AppendResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AppendResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(
          from._internal_block());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stat()
          ->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(
              from._internal_stat());
    }
  }
}

void AppendResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AppendResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResponseProto::CopyFrom(const AppendResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AppendResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResponseProto::IsInitialized() const {
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  if (_internal_has_stat()) {
    if (!stat_->IsInitialized()) return false;
  }
  return true;
}

void AppendResponseProto::InternalSwap(AppendResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
  swap(stat_, other->stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetReplicationRequestProto::InitAsDefaultInstance() {}
class SetReplicationRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetReplicationRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_replication(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

SetReplicationRequestProto::SetReplicationRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetReplicationRequestProto)
}
SetReplicationRequestProto::SetReplicationRequestProto(
    const SetReplicationRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  replication_ = from.replication_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetReplicationRequestProto)
}

void SetReplicationRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  replication_ = 0u;
}

SetReplicationRequestProto::~SetReplicationRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetReplicationRequestProto)
  SharedDtor();
}

void SetReplicationRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetReplicationRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetReplicationRequestProto&
SetReplicationRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetReplicationRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetReplicationRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetReplicationRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  replication_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetReplicationRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetReplicationRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 replication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_replication(&has_bits);
          replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetReplicationRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetReplicationRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetReplicationRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required uint32 replication = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_replication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetReplicationRequestProto)
  return target;
}

size_t SetReplicationRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.SetReplicationRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_replication()) {
    // required uint32 replication = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_replication());
  }

  return total_size;
}
size_t SetReplicationRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetReplicationRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required uint32 replication = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_replication());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetReplicationRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetReplicationRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetReplicationRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetReplicationRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetReplicationRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetReplicationRequestProto)
    MergeFrom(*source);
  }
}

void SetReplicationRequestProto::MergeFrom(
    const SetReplicationRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetReplicationRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      replication_ = from.replication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetReplicationRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetReplicationRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReplicationRequestProto::CopyFrom(
    const SetReplicationRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetReplicationRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReplicationRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SetReplicationRequestProto::InternalSwap(
    SetReplicationRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(replication_, other->replication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReplicationRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetReplicationResponseProto::InitAsDefaultInstance() {}
class SetReplicationResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetReplicationResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

SetReplicationResponseProto::SetReplicationResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetReplicationResponseProto)
}
SetReplicationResponseProto::SetReplicationResponseProto(
    const SetReplicationResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetReplicationResponseProto)
}

void SetReplicationResponseProto::SharedCtor() { result_ = false; }

SetReplicationResponseProto::~SetReplicationResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetReplicationResponseProto)
  SharedDtor();
}

void SetReplicationResponseProto::SharedDtor() {}

void SetReplicationResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetReplicationResponseProto&
SetReplicationResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetReplicationResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetReplicationResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetReplicationResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetReplicationResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetReplicationResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetReplicationResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetReplicationResponseProto)
  return target;
}

size_t SetReplicationResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetReplicationResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetReplicationResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetReplicationResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetReplicationResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetReplicationResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetReplicationResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetReplicationResponseProto)
    MergeFrom(*source);
  }
}

void SetReplicationResponseProto::MergeFrom(
    const SetReplicationResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetReplicationResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void SetReplicationResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetReplicationResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReplicationResponseProto::CopyFrom(
    const SetReplicationResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetReplicationResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReplicationResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SetReplicationResponseProto::InternalSwap(
    SetReplicationResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReplicationResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetPermissionRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_SetPermissionRequestProto_default_instance_._instance
      .get_mutable()
      ->permission_ = const_cast<::Hdfs::Internal::FsPermissionProto*>(
      ::Hdfs::Internal::FsPermissionProto::internal_default_instance());
}
class SetPermissionRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetPermissionRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::FsPermissionProto& permission(
      const SetPermissionRequestProto* msg);
  static void set_has_permission(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::FsPermissionProto&
SetPermissionRequestProto::_Internal::permission(
    const SetPermissionRequestProto* msg) {
  return *msg->permission_;
}
void SetPermissionRequestProto::clear_permission() {
  if (permission_ != nullptr) permission_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SetPermissionRequestProto::SetPermissionRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetPermissionRequestProto)
}
SetPermissionRequestProto::SetPermissionRequestProto(
    const SetPermissionRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  if (from._internal_has_permission()) {
    permission_ = new ::Hdfs::Internal::FsPermissionProto(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetPermissionRequestProto)
}

void SetPermissionRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_ = nullptr;
}

SetPermissionRequestProto::~SetPermissionRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetPermissionRequestProto)
  SharedDtor();
}

void SetPermissionRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_;
}

void SetPermissionRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPermissionRequestProto& SetPermissionRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetPermissionRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetPermissionRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetPermissionRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(permission_ != nullptr);
      permission_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetPermissionRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetPermissionRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.FsPermissionProto permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPermissionRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetPermissionRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetPermissionRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::permission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetPermissionRequestProto)
  return target;
}

size_t SetPermissionRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.SetPermissionRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_permission()) {
    // required .Hdfs.Internal.FsPermissionProto permission = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *permission_);
  }

  return total_size;
}
size_t SetPermissionRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetPermissionRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required .Hdfs.Internal.FsPermissionProto permission = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *permission_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPermissionRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetPermissionRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPermissionRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetPermissionRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetPermissionRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetPermissionRequestProto)
    MergeFrom(*source);
  }
}

void SetPermissionRequestProto::MergeFrom(
    const SetPermissionRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetPermissionRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_permission()
          ->::Hdfs::Internal::FsPermissionProto::MergeFrom(
              from._internal_permission());
    }
  }
}

void SetPermissionRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetPermissionRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPermissionRequestProto::CopyFrom(
    const SetPermissionRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetPermissionRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_permission()) {
    if (!permission_->IsInitialized()) return false;
  }
  return true;
}

void SetPermissionRequestProto::InternalSwap(SetPermissionRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetPermissionResponseProto::InitAsDefaultInstance() {}
class SetPermissionResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetPermissionResponseProto>()._has_bits_);
};

SetPermissionResponseProto::SetPermissionResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetPermissionResponseProto)
}
SetPermissionResponseProto::SetPermissionResponseProto(
    const SetPermissionResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetPermissionResponseProto)
}

void SetPermissionResponseProto::SharedCtor() {}

SetPermissionResponseProto::~SetPermissionResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetPermissionResponseProto)
  SharedDtor();
}

void SetPermissionResponseProto::SharedDtor() {}

void SetPermissionResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPermissionResponseProto&
SetPermissionResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetPermissionResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetPermissionResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetPermissionResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetPermissionResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPermissionResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetPermissionResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetPermissionResponseProto)
  return target;
}

size_t SetPermissionResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetPermissionResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPermissionResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetPermissionResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPermissionResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetPermissionResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetPermissionResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetPermissionResponseProto)
    MergeFrom(*source);
  }
}

void SetPermissionResponseProto::MergeFrom(
    const SetPermissionResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetPermissionResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SetPermissionResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetPermissionResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPermissionResponseProto::CopyFrom(
    const SetPermissionResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetPermissionResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionResponseProto::IsInitialized() const { return true; }

void SetPermissionResponseProto::InternalSwap(
    SetPermissionResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetOwnerRequestProto::InitAsDefaultInstance() {}
class SetOwnerRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetOwnerRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_username(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_groupname(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

SetOwnerRequestProto::SetOwnerRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetOwnerRequestProto)
}
SetOwnerRequestProto::SetOwnerRequestProto(const SetOwnerRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  username_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.username_);
  }
  groupname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_groupname()) {
    groupname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.groupname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetOwnerRequestProto)
}

void SetOwnerRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetOwnerRequestProto::~SetOwnerRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetOwnerRequestProto)
  SharedDtor();
}

void SetOwnerRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetOwnerRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetOwnerRequestProto& SetOwnerRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetOwnerRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetOwnerRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetOwnerRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetOwnerRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetOwnerRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetOwnerRequestProto.username");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetOwnerRequestProto.groupname");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOwnerRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetOwnerRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetOwnerRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_username().data(),
        static_cast<int>(this->_internal_username().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetOwnerRequestProto.username");
    target =
        stream->WriteStringMaybeAliased(2, this->_internal_username(), target);
  }

  // optional string groupname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_groupname().data(),
        static_cast<int>(this->_internal_groupname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetOwnerRequestProto.groupname");
    target =
        stream->WriteStringMaybeAliased(3, this->_internal_groupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetOwnerRequestProto)
  return target;
}

size_t SetOwnerRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetOwnerRequestProto)
  size_t total_size = 0;

  // required string src = 1;
  if (_internal_has_src()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_username());
    }

    // optional string groupname = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_groupname());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOwnerRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetOwnerRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOwnerRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetOwnerRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetOwnerRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetOwnerRequestProto)
    MergeFrom(*source);
  }
}

void SetOwnerRequestProto::MergeFrom(const SetOwnerRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetOwnerRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      username_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      groupname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.groupname_);
    }
  }
}

void SetOwnerRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetOwnerRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOwnerRequestProto::CopyFrom(const SetOwnerRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetOwnerRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SetOwnerRequestProto::InternalSwap(SetOwnerRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  username_.Swap(
      &other->username_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  groupname_.Swap(
      &other->groupname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetOwnerResponseProto::InitAsDefaultInstance() {}
class SetOwnerResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetOwnerResponseProto>()._has_bits_);
};

SetOwnerResponseProto::SetOwnerResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetOwnerResponseProto)
}
SetOwnerResponseProto::SetOwnerResponseProto(const SetOwnerResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetOwnerResponseProto)
}

void SetOwnerResponseProto::SharedCtor() {}

SetOwnerResponseProto::~SetOwnerResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetOwnerResponseProto)
  SharedDtor();
}

void SetOwnerResponseProto::SharedDtor() {}

void SetOwnerResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetOwnerResponseProto& SetOwnerResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetOwnerResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetOwnerResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetOwnerResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetOwnerResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOwnerResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetOwnerResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetOwnerResponseProto)
  return target;
}

size_t SetOwnerResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetOwnerResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOwnerResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetOwnerResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOwnerResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetOwnerResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetOwnerResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetOwnerResponseProto)
    MergeFrom(*source);
  }
}

void SetOwnerResponseProto::MergeFrom(const SetOwnerResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetOwnerResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SetOwnerResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetOwnerResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOwnerResponseProto::CopyFrom(const SetOwnerResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetOwnerResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerResponseProto::IsInitialized() const { return true; }

void SetOwnerResponseProto::InternalSwap(SetOwnerResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AbandonBlockRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AbandonBlockRequestProto_default_instance_._instance
      .get_mutable()
      ->b_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class AbandonBlockRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AbandonBlockRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::ExtendedBlockProto& b(
      const AbandonBlockRequestProto* msg);
  static void set_has_b(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_holder(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
AbandonBlockRequestProto::_Internal::b(const AbandonBlockRequestProto* msg) {
  return *msg->b_;
}
void AbandonBlockRequestProto::clear_b() {
  if (b_ != nullptr) b_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AbandonBlockRequestProto::AbandonBlockRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AbandonBlockRequestProto)
}
AbandonBlockRequestProto::AbandonBlockRequestProto(
    const AbandonBlockRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  holder_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_holder()) {
    holder_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.holder_);
  }
  if (from._internal_has_b()) {
    b_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.b_);
  } else {
    b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AbandonBlockRequestProto)
}

void AbandonBlockRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  holder_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_ = nullptr;
}

AbandonBlockRequestProto::~AbandonBlockRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AbandonBlockRequestProto)
  SharedDtor();
}

void AbandonBlockRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  holder_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete b_;
}

void AbandonBlockRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbandonBlockRequestProto& AbandonBlockRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AbandonBlockRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AbandonBlockRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AbandonBlockRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      holder_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(b_ != nullptr);
      b_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AbandonBlockRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.ExtendedBlockProto b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AbandonBlockRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string holder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_holder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AbandonBlockRequestProto.holder");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbandonBlockRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AbandonBlockRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.ExtendedBlockProto b = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::b(this), target, stream);
  }

  // required string src = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AbandonBlockRequestProto.src");
    target = stream->WriteStringMaybeAliased(2, this->_internal_src(), target);
  }

  // required string holder = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_holder().data(),
        static_cast<int>(this->_internal_holder().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AbandonBlockRequestProto.holder");
    target =
        stream->WriteStringMaybeAliased(3, this->_internal_holder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AbandonBlockRequestProto)
  return target;
}

size_t AbandonBlockRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.AbandonBlockRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_holder()) {
    // required string holder = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_holder());
  }

  if (_internal_has_b()) {
    // required .Hdfs.Internal.ExtendedBlockProto b = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*b_);
  }

  return total_size;
}
size_t AbandonBlockRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AbandonBlockRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string holder = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_holder());

    // required .Hdfs.Internal.ExtendedBlockProto b = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*b_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbandonBlockRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AbandonBlockRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AbandonBlockRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbandonBlockRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AbandonBlockRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AbandonBlockRequestProto)
    MergeFrom(*source);
  }
}

void AbandonBlockRequestProto::MergeFrom(const AbandonBlockRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AbandonBlockRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      holder_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.holder_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_b()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
          from._internal_b());
    }
  }
}

void AbandonBlockRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AbandonBlockRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonBlockRequestProto::CopyFrom(const AbandonBlockRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AbandonBlockRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonBlockRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_b()) {
    if (!b_->IsInitialized()) return false;
  }
  return true;
}

void AbandonBlockRequestProto::InternalSwap(AbandonBlockRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  holder_.Swap(
      &other->holder_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(b_, other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbandonBlockRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AbandonBlockResponseProto::InitAsDefaultInstance() {}
class AbandonBlockResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AbandonBlockResponseProto>()._has_bits_);
};

AbandonBlockResponseProto::AbandonBlockResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AbandonBlockResponseProto)
}
AbandonBlockResponseProto::AbandonBlockResponseProto(
    const AbandonBlockResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AbandonBlockResponseProto)
}

void AbandonBlockResponseProto::SharedCtor() {}

AbandonBlockResponseProto::~AbandonBlockResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AbandonBlockResponseProto)
  SharedDtor();
}

void AbandonBlockResponseProto::SharedDtor() {}

void AbandonBlockResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbandonBlockResponseProto& AbandonBlockResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AbandonBlockResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AbandonBlockResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AbandonBlockResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AbandonBlockResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbandonBlockResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AbandonBlockResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AbandonBlockResponseProto)
  return target;
}

size_t AbandonBlockResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AbandonBlockResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbandonBlockResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AbandonBlockResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AbandonBlockResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AbandonBlockResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AbandonBlockResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AbandonBlockResponseProto)
    MergeFrom(*source);
  }
}

void AbandonBlockResponseProto::MergeFrom(
    const AbandonBlockResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AbandonBlockResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void AbandonBlockResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AbandonBlockResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonBlockResponseProto::CopyFrom(
    const AbandonBlockResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AbandonBlockResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonBlockResponseProto::IsInitialized() const { return true; }

void AbandonBlockResponseProto::InternalSwap(AbandonBlockResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbandonBlockResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AddBlockRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AddBlockRequestProto_default_instance_._instance
      .get_mutable()
      ->previous_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class AddBlockRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AddBlockRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::ExtendedBlockProto& previous(
      const AddBlockRequestProto* msg);
  static void set_has_previous(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_fileid(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
AddBlockRequestProto::_Internal::previous(const AddBlockRequestProto* msg) {
  return *msg->previous_;
}
void AddBlockRequestProto::clear_previous() {
  if (previous_ != nullptr) previous_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AddBlockRequestProto::clear_excludenodes() { excludenodes_.Clear(); }
AddBlockRequestProto::AddBlockRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddBlockRequestProto)
}
AddBlockRequestProto::AddBlockRequestProto(const AddBlockRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      excludenodes_(from.excludenodes_),
      favorednodes_(from.favorednodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_previous()) {
    previous_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.previous_);
  } else {
    previous_ = nullptr;
  }
  fileid_ = from.fileid_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddBlockRequestProto)
}

void AddBlockRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&previous_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&fileid_) -
                               reinterpret_cast<char*>(&previous_)) +
               sizeof(fileid_));
}

AddBlockRequestProto::~AddBlockRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddBlockRequestProto)
  SharedDtor();
}

void AddBlockRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previous_;
}

void AddBlockRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBlockRequestProto& AddBlockRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddBlockRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AddBlockRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddBlockRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  excludenodes_.Clear();
  favorednodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(previous_ != nullptr);
      previous_->Clear();
    }
  }
  fileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddBlockRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AddBlockRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AddBlockRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excludenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileId = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fileid(&has_bits);
          fileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string favoredNodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_favorednodes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
                str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
                str, "Hdfs.Internal.AddBlockRequestProto.favoredNodes");
#endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBlockRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddBlockRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AddBlockRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AddBlockRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::previous(this), target, stream);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_excludenodes_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            4, this->_internal_excludenodes(i), target, stream);
  }

  // optional uint64 fileId = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            5, this->_internal_fileid(), target);
  }

  // repeated string favoredNodes = 6;
  for (int i = 0, n = this->_internal_favorednodes_size(); i < n; i++) {
    const auto& s = this->_internal_favorednodes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AddBlockRequestProto.favoredNodes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddBlockRequestProto)
  return target;
}

size_t AddBlockRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.AddBlockRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t AddBlockRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddBlockRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  total_size += 1UL * this->_internal_excludenodes_size();
  for (const auto& msg : this->excludenodes_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string favoredNodes = 6;
  total_size +=
      1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(favorednodes_.size());
  for (int i = 0, n = favorednodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        favorednodes_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *previous_);
    }

    // optional uint64 fileId = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                  this->_internal_fileid());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBlockRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddBlockRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBlockRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBlockRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddBlockRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddBlockRequestProto)
    MergeFrom(*source);
  }
}

void AddBlockRequestProto::MergeFrom(const AddBlockRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddBlockRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  excludenodes_.MergeFrom(from.excludenodes_);
  favorednodes_.MergeFrom(from.favorednodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_previous()
          ->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
              from._internal_previous());
    }
    if (cached_has_bits & 0x00000008u) {
      fileid_ = from.fileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddBlockRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddBlockRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockRequestProto::CopyFrom(const AddBlockRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddBlockRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(excludenodes_))
    return false;
  if (_internal_has_previous()) {
    if (!previous_->IsInitialized()) return false;
  }
  return true;
}

void AddBlockRequestProto::InternalSwap(AddBlockRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  excludenodes_.InternalSwap(&other->excludenodes_);
  favorednodes_.InternalSwap(&other->favorednodes_);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(previous_, other->previous_);
  swap(fileid_, other->fileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBlockRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AddBlockResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AddBlockResponseProto_default_instance_._instance
      .get_mutable()
      ->block_ = const_cast<::Hdfs::Internal::LocatedBlockProto*>(
      ::Hdfs::Internal::LocatedBlockProto::internal_default_instance());
}
class AddBlockResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AddBlockResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::LocatedBlockProto& block(
      const AddBlockResponseProto* msg);
  static void set_has_block(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::LocatedBlockProto&
AddBlockResponseProto::_Internal::block(const AddBlockResponseProto* msg) {
  return *msg->block_;
}
void AddBlockResponseProto::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AddBlockResponseProto::AddBlockResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddBlockResponseProto)
}
AddBlockResponseProto::AddBlockResponseProto(const AddBlockResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::Hdfs::Internal::LocatedBlockProto(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddBlockResponseProto)
}

void AddBlockResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto.base);
  block_ = nullptr;
}

AddBlockResponseProto::~AddBlockResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddBlockResponseProto)
  SharedDtor();
}

void AddBlockResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void AddBlockResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBlockResponseProto& AddBlockResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddBlockResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AddBlockResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddBlockResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddBlockResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBlockResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddBlockResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddBlockResponseProto)
  return target;
}

size_t AddBlockResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddBlockResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (_internal_has_block()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*block_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBlockResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddBlockResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBlockResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBlockResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddBlockResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddBlockResponseProto)
    MergeFrom(*source);
  }
}

void AddBlockResponseProto::MergeFrom(const AddBlockResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddBlockResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(
        from._internal_block());
  }
}

void AddBlockResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddBlockResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockResponseProto::CopyFrom(const AddBlockResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddBlockResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void AddBlockResponseProto::InternalSwap(AddBlockResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBlockResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetAdditionalDatanodeRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetAdditionalDatanodeRequestProto_default_instance_
      ._instance.get_mutable()
      ->blk_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class GetAdditionalDatanodeRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAdditionalDatanodeRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::ExtendedBlockProto& blk(
      const GetAdditionalDatanodeRequestProto* msg);
  static void set_has_blk(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_numadditionalnodes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
GetAdditionalDatanodeRequestProto::_Internal::blk(
    const GetAdditionalDatanodeRequestProto* msg) {
  return *msg->blk_;
}
void GetAdditionalDatanodeRequestProto::clear_blk() {
  if (blk_ != nullptr) blk_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GetAdditionalDatanodeRequestProto::clear_existings() {
  existings_.Clear();
}
void GetAdditionalDatanodeRequestProto::clear_excludes() { excludes_.Clear(); }
GetAdditionalDatanodeRequestProto::GetAdditionalDatanodeRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
}
GetAdditionalDatanodeRequestProto::GetAdditionalDatanodeRequestProto(
    const GetAdditionalDatanodeRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      existings_(from.existings_),
      excludes_(from.excludes_),
      existingstorageuuids_(from.existingstorageuuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_blk()) {
    blk_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.blk_);
  } else {
    blk_ = nullptr;
  }
  numadditionalnodes_ = from.numadditionalnodes_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
}

void GetAdditionalDatanodeRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blk_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&numadditionalnodes_) -
                               reinterpret_cast<char*>(&blk_)) +
               sizeof(numadditionalnodes_));
}

GetAdditionalDatanodeRequestProto::~GetAdditionalDatanodeRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  SharedDtor();
}

void GetAdditionalDatanodeRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete blk_;
}

void GetAdditionalDatanodeRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAdditionalDatanodeRequestProto&
GetAdditionalDatanodeRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetAdditionalDatanodeRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetAdditionalDatanodeRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  existings_.Clear();
  excludes_.Clear();
  existingstorageuuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(blk_ != nullptr);
      blk_->Clear();
    }
  }
  numadditionalnodes_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAdditionalDatanodeRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetAdditionalDatanodeRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_existings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excludes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 numAdditionalNodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_numadditionalnodes(&has_bits);
          numadditionalnodes_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string existingStorageUuids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_existingstorageuuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
                str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
                str,
                "Hdfs.Internal.GetAdditionalDatanodeRequestProto."
                "existingStorageUuids");
#endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetAdditionalDatanodeRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetAdditionalDatanodeRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::blk(this), target, stream);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_existings_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, this->_internal_existings(i), target, stream);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_excludes_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            4, this->_internal_excludes(i), target, stream);
  }

  // required uint32 numAdditionalNodes = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            5, this->_internal_numadditionalnodes(), target);
  }

  // required string clientName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(6, this->_internal_clientname(),
                                             target);
  }

  // repeated string existingStorageUuids = 7;
  for (int i = 0, n = this->_internal_existingstorageuuids_size(); i < n; i++) {
    const auto& s = this->_internal_existingstorageuuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  return target;
}

size_t GetAdditionalDatanodeRequestProto::RequiredFieldsByteSizeFallback()
    const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  if (_internal_has_blk()) {
    // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*blk_);
  }

  if (_internal_has_numadditionalnodes()) {
    // required uint32 numAdditionalNodes = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_numadditionalnodes());
  }

  return total_size;
}
size_t GetAdditionalDatanodeRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

    // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*blk_);

    // required uint32 numAdditionalNodes = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_numadditionalnodes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  total_size += 1UL * this->_internal_existings_size();
  for (const auto& msg : this->existings_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  total_size += 1UL * this->_internal_excludes_size();
  for (const auto& msg : this->excludes_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string existingStorageUuids = 7;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        existingstorageuuids_.size());
  for (int i = 0, n = existingstorageuuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        existingstorageuuids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAdditionalDatanodeRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAdditionalDatanodeRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetAdditionalDatanodeRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
    MergeFrom(*source);
  }
}

void GetAdditionalDatanodeRequestProto::MergeFrom(
    const GetAdditionalDatanodeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  existings_.MergeFrom(from.existings_);
  excludes_.MergeFrom(from.excludes_);
  existingstorageuuids_.MergeFrom(from.existingstorageuuids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_blk()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
          from._internal_blk());
    }
    if (cached_has_bits & 0x00000008u) {
      numadditionalnodes_ = from.numadditionalnodes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAdditionalDatanodeRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAdditionalDatanodeRequestProto::CopyFrom(
    const GetAdditionalDatanodeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdditionalDatanodeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(existings_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(excludes_))
    return false;
  if (_internal_has_blk()) {
    if (!blk_->IsInitialized()) return false;
  }
  return true;
}

void GetAdditionalDatanodeRequestProto::InternalSwap(
    GetAdditionalDatanodeRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  existings_.InternalSwap(&other->existings_);
  excludes_.InternalSwap(&other->excludes_);
  existingstorageuuids_.InternalSwap(&other->existingstorageuuids_);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(blk_, other->blk_);
  swap(numadditionalnodes_, other->numadditionalnodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetAdditionalDatanodeRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetAdditionalDatanodeResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetAdditionalDatanodeResponseProto_default_instance_
      ._instance.get_mutable()
      ->block_ = const_cast<::Hdfs::Internal::LocatedBlockProto*>(
      ::Hdfs::Internal::LocatedBlockProto::internal_default_instance());
}
class GetAdditionalDatanodeResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAdditionalDatanodeResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::LocatedBlockProto& block(
      const GetAdditionalDatanodeResponseProto* msg);
  static void set_has_block(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::LocatedBlockProto&
GetAdditionalDatanodeResponseProto::_Internal::block(
    const GetAdditionalDatanodeResponseProto* msg) {
  return *msg->block_;
}
void GetAdditionalDatanodeResponseProto::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetAdditionalDatanodeResponseProto::GetAdditionalDatanodeResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
}
GetAdditionalDatanodeResponseProto::GetAdditionalDatanodeResponseProto(
    const GetAdditionalDatanodeResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::Hdfs::Internal::LocatedBlockProto(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
}

void GetAdditionalDatanodeResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  block_ = nullptr;
}

GetAdditionalDatanodeResponseProto::~GetAdditionalDatanodeResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  SharedDtor();
}

void GetAdditionalDatanodeResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void GetAdditionalDatanodeResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAdditionalDatanodeResponseProto&
GetAdditionalDatanodeResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetAdditionalDatanodeResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetAdditionalDatanodeResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAdditionalDatanodeResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetAdditionalDatanodeResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  return target;
}

size_t GetAdditionalDatanodeResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (_internal_has_block()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*block_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAdditionalDatanodeResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAdditionalDatanodeResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetAdditionalDatanodeResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
    MergeFrom(*source);
  }
}

void GetAdditionalDatanodeResponseProto::MergeFrom(
    const GetAdditionalDatanodeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(
        from._internal_block());
  }
}

void GetAdditionalDatanodeResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAdditionalDatanodeResponseProto::CopyFrom(
    const GetAdditionalDatanodeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdditionalDatanodeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void GetAdditionalDatanodeResponseProto::InternalSwap(
    GetAdditionalDatanodeResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetAdditionalDatanodeResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CompleteRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CompleteRequestProto_default_instance_._instance
      .get_mutable()
      ->last_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class CompleteRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::ExtendedBlockProto& last(
      const CompleteRequestProto* msg);
  static void set_has_last(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_fileid(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
CompleteRequestProto::_Internal::last(const CompleteRequestProto* msg) {
  return *msg->last_;
}
void CompleteRequestProto::clear_last() {
  if (last_ != nullptr) last_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CompleteRequestProto::CompleteRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CompleteRequestProto)
}
CompleteRequestProto::CompleteRequestProto(const CompleteRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_last()) {
    last_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.last_);
  } else {
    last_ = nullptr;
  }
  fileid_ = from.fileid_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CompleteRequestProto)
}

void CompleteRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&fileid_) -
                               reinterpret_cast<char*>(&last_)) +
               sizeof(fileid_));
}

CompleteRequestProto::~CompleteRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CompleteRequestProto)
  SharedDtor();
}

void CompleteRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_;
}

void CompleteRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteRequestProto& CompleteRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CompleteRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CompleteRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CompleteRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(last_ != nullptr);
      last_->Clear();
    }
  }
  fileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CompleteRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CompleteRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CompleteRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileId = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fileid(&has_bits);
          fileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CompleteRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CompleteRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CompleteRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::last(this), target, stream);
  }

  // optional uint64 fileId = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            4, this->_internal_fileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CompleteRequestProto)
  return target;
}

size_t CompleteRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CompleteRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t CompleteRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CompleteRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *last_);
    }

    // optional uint64 fileId = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                  this->_internal_fileid());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CompleteRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CompleteRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CompleteRequestProto)
    MergeFrom(*source);
  }
}

void CompleteRequestProto::MergeFrom(const CompleteRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CompleteRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_last()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
          from._internal_last());
    }
    if (cached_has_bits & 0x00000008u) {
      fileid_ = from.fileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompleteRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CompleteRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteRequestProto::CopyFrom(const CompleteRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CompleteRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_last()) {
    if (!last_->IsInitialized()) return false;
  }
  return true;
}

void CompleteRequestProto::InternalSwap(CompleteRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(last_, other->last_);
  swap(fileid_, other->fileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CompleteResponseProto::InitAsDefaultInstance() {}
class CompleteResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

CompleteResponseProto::CompleteResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CompleteResponseProto)
}
CompleteResponseProto::CompleteResponseProto(const CompleteResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CompleteResponseProto)
}

void CompleteResponseProto::SharedCtor() { result_ = false; }

CompleteResponseProto::~CompleteResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CompleteResponseProto)
  SharedDtor();
}

void CompleteResponseProto::SharedDtor() {}

void CompleteResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteResponseProto& CompleteResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CompleteResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CompleteResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CompleteResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CompleteResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CompleteResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CompleteResponseProto)
  return target;
}

size_t CompleteResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CompleteResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CompleteResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CompleteResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CompleteResponseProto)
    MergeFrom(*source);
  }
}

void CompleteResponseProto::MergeFrom(const CompleteResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CompleteResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CompleteResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CompleteResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteResponseProto::CopyFrom(const CompleteResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CompleteResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CompleteResponseProto::InternalSwap(CompleteResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ReportBadBlocksRequestProto::InitAsDefaultInstance() {}
class ReportBadBlocksRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReportBadBlocksRequestProto>()._has_bits_);
};

void ReportBadBlocksRequestProto::clear_blocks() { blocks_.Clear(); }
ReportBadBlocksRequestProto::ReportBadBlocksRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ReportBadBlocksRequestProto)
}
ReportBadBlocksRequestProto::ReportBadBlocksRequestProto(
    const ReportBadBlocksRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ReportBadBlocksRequestProto)
}

void ReportBadBlocksRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto
           .base);
}

ReportBadBlocksRequestProto::~ReportBadBlocksRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ReportBadBlocksRequestProto)
  SharedDtor();
}

void ReportBadBlocksRequestProto::SharedDtor() {}

void ReportBadBlocksRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportBadBlocksRequestProto&
ReportBadBlocksRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ReportBadBlocksRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ReportBadBlocksRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  blocks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReportBadBlocksRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportBadBlocksRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_blocks_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ReportBadBlocksRequestProto)
  return target;
}

size_t ReportBadBlocksRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportBadBlocksRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportBadBlocksRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ReportBadBlocksRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ReportBadBlocksRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ReportBadBlocksRequestProto)
    MergeFrom(*source);
  }
}

void ReportBadBlocksRequestProto::MergeFrom(
    const ReportBadBlocksRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void ReportBadBlocksRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBadBlocksRequestProto::CopyFrom(
    const ReportBadBlocksRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ReportBadBlocksRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBadBlocksRequestProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blocks_))
    return false;
  return true;
}

void ReportBadBlocksRequestProto::InternalSwap(
    ReportBadBlocksRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportBadBlocksRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ReportBadBlocksResponseProto::InitAsDefaultInstance() {}
class ReportBadBlocksResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReportBadBlocksResponseProto>()._has_bits_);
};

ReportBadBlocksResponseProto::ReportBadBlocksResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ReportBadBlocksResponseProto)
}
ReportBadBlocksResponseProto::ReportBadBlocksResponseProto(
    const ReportBadBlocksResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ReportBadBlocksResponseProto)
}

void ReportBadBlocksResponseProto::SharedCtor() {}

ReportBadBlocksResponseProto::~ReportBadBlocksResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ReportBadBlocksResponseProto)
  SharedDtor();
}

void ReportBadBlocksResponseProto::SharedDtor() {}

void ReportBadBlocksResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportBadBlocksResponseProto&
ReportBadBlocksResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ReportBadBlocksResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ReportBadBlocksResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReportBadBlocksResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ReportBadBlocksResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ReportBadBlocksResponseProto)
  return target;
}

size_t ReportBadBlocksResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportBadBlocksResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportBadBlocksResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ReportBadBlocksResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ReportBadBlocksResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ReportBadBlocksResponseProto)
    MergeFrom(*source);
  }
}

void ReportBadBlocksResponseProto::MergeFrom(
    const ReportBadBlocksResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void ReportBadBlocksResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBadBlocksResponseProto::CopyFrom(
    const ReportBadBlocksResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ReportBadBlocksResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBadBlocksResponseProto::IsInitialized() const { return true; }

void ReportBadBlocksResponseProto::InternalSwap(
    ReportBadBlocksResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportBadBlocksResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ConcatRequestProto::InitAsDefaultInstance() {}
class ConcatRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatRequestProto>()._has_bits_);
  static void set_has_trg(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

ConcatRequestProto::ConcatRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ConcatRequestProto)
}
ConcatRequestProto::ConcatRequestProto(const ConcatRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      srcs_(from.srcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trg_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trg()) {
    trg_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.trg_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ConcatRequestProto)
}

void ConcatRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto.base);
  trg_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConcatRequestProto::~ConcatRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ConcatRequestProto)
  SharedDtor();
}

void ConcatRequestProto::SharedDtor() {
  trg_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConcatRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcatRequestProto& ConcatRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ConcatRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void ConcatRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ConcatRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  srcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConcatRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string trg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ConcatRequestProto.trg");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string srcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_srcs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
                str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
                str, "Hdfs.Internal.ConcatRequestProto.srcs");
#endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcatRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ConcatRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_trg().data(),
        static_cast<int>(this->_internal_trg().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ConcatRequestProto.trg");
    target = stream->WriteStringMaybeAliased(1, this->_internal_trg(), target);
  }

  // repeated string srcs = 2;
  for (int i = 0, n = this->_internal_srcs_size(); i < n; i++) {
    const auto& s = this->_internal_srcs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ConcatRequestProto.srcs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ConcatRequestProto)
  return target;
}

size_t ConcatRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ConcatRequestProto)
  size_t total_size = 0;

  // required string trg = 1;
  if (_internal_has_trg()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_trg());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated string srcs = 2;
  total_size +=
      1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(srcs_.size());
  for (int i = 0, n = srcs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        srcs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ConcatRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcatRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ConcatRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ConcatRequestProto)
    MergeFrom(*source);
  }
}

void ConcatRequestProto::MergeFrom(const ConcatRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ConcatRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  srcs_.MergeFrom(from.srcs_);
  if (from._internal_has_trg()) {
    _has_bits_[0] |= 0x00000001u;
    trg_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.trg_);
  }
}

void ConcatRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ConcatRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatRequestProto::CopyFrom(const ConcatRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ConcatRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConcatRequestProto::InternalSwap(ConcatRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcs_.InternalSwap(&other->srcs_);
  trg_.Swap(&other->trg_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ConcatResponseProto::InitAsDefaultInstance() {}
class ConcatResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatResponseProto>()._has_bits_);
};

ConcatResponseProto::ConcatResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ConcatResponseProto)
}
ConcatResponseProto::ConcatResponseProto(const ConcatResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ConcatResponseProto)
}

void ConcatResponseProto::SharedCtor() {}

ConcatResponseProto::~ConcatResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ConcatResponseProto)
  SharedDtor();
}

void ConcatResponseProto::SharedDtor() {}

void ConcatResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcatResponseProto& ConcatResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ConcatResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void ConcatResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ConcatResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConcatResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcatResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ConcatResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ConcatResponseProto)
  return target;
}

size_t ConcatResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ConcatResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ConcatResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcatResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ConcatResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ConcatResponseProto)
    MergeFrom(*source);
  }
}

void ConcatResponseProto::MergeFrom(const ConcatResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ConcatResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void ConcatResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ConcatResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatResponseProto::CopyFrom(const ConcatResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ConcatResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatResponseProto::IsInitialized() const { return true; }

void ConcatResponseProto::InternalSwap(ConcatResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void TruncateRequestProto::InitAsDefaultInstance() {}
class TruncateRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TruncateRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_newlength(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

TruncateRequestProto::TruncateRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.TruncateRequestProto)
}
TruncateRequestProto::TruncateRequestProto(const TruncateRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  newlength_ = from.newlength_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.TruncateRequestProto)
}

void TruncateRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newlength_ = PROTOBUF_ULONGLONG(0);
}

TruncateRequestProto::~TruncateRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.TruncateRequestProto)
  SharedDtor();
}

void TruncateRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TruncateRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncateRequestProto& TruncateRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_TruncateRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void TruncateRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.TruncateRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  newlength_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TruncateRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.TruncateRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 newLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_newlength(&has_bits);
          newlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.TruncateRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TruncateRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.TruncateRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.TruncateRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required uint64 newLength = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_newlength(), target);
  }

  // required string clientName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.TruncateRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(3, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.TruncateRequestProto)
  return target;
}

size_t TruncateRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.TruncateRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  if (_internal_has_newlength()) {
    // required uint64 newLength = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_newlength());
  }

  return total_size;
}
size_t TruncateRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.TruncateRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

    // required uint64 newLength = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_newlength());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncateRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.TruncateRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TruncateRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.TruncateRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.TruncateRequestProto)
    MergeFrom(*source);
  }
}

void TruncateRequestProto::MergeFrom(const TruncateRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.TruncateRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000004u) {
      newlength_ = from.newlength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TruncateRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.TruncateRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateRequestProto::CopyFrom(const TruncateRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.TruncateRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TruncateRequestProto::InternalSwap(TruncateRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(newlength_, other->newlength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncateRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void TruncateResponseProto::InitAsDefaultInstance() {}
class TruncateResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TruncateResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

TruncateResponseProto::TruncateResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.TruncateResponseProto)
}
TruncateResponseProto::TruncateResponseProto(const TruncateResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.TruncateResponseProto)
}

void TruncateResponseProto::SharedCtor() { result_ = false; }

TruncateResponseProto::~TruncateResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.TruncateResponseProto)
  SharedDtor();
}

void TruncateResponseProto::SharedDtor() {}

void TruncateResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncateResponseProto& TruncateResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_TruncateResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void TruncateResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.TruncateResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TruncateResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TruncateResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.TruncateResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.TruncateResponseProto)
  return target;
}

size_t TruncateResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.TruncateResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncateResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.TruncateResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TruncateResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.TruncateResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.TruncateResponseProto)
    MergeFrom(*source);
  }
}

void TruncateResponseProto::MergeFrom(const TruncateResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.TruncateResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void TruncateResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.TruncateResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateResponseProto::CopyFrom(const TruncateResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.TruncateResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TruncateResponseProto::InternalSwap(TruncateResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncateResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetLeaseRequestProto::InitAsDefaultInstance() {}
class GetLeaseRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLeaseRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

GetLeaseRequestProto::GetLeaseRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetLeaseRequestProto)
}
GetLeaseRequestProto::GetLeaseRequestProto(const GetLeaseRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetLeaseRequestProto)
}

void GetLeaseRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLeaseRequestProto::~GetLeaseRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetLeaseRequestProto)
  SharedDtor();
}

void GetLeaseRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLeaseRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLeaseRequestProto& GetLeaseRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetLeaseRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLeaseRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetLeaseRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetLeaseRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLeaseRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetLeaseRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetLeaseRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetLeaseRequestProto)
  return target;
}

size_t GetLeaseRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetLeaseRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t GetLeaseRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetLeaseRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLeaseRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLeaseRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLeaseRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetLeaseRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetLeaseRequestProto)
    MergeFrom(*source);
  }
}

void GetLeaseRequestProto::MergeFrom(const GetLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
  }
}

void GetLeaseRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaseRequestProto::CopyFrom(const GetLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetLeaseRequestProto::InternalSwap(GetLeaseRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLeaseRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetLeaseResponseProto::InitAsDefaultInstance() {}
class GetLeaseResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLeaseResponseProto>()._has_bits_);
};

GetLeaseResponseProto::GetLeaseResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetLeaseResponseProto)
}
GetLeaseResponseProto::GetLeaseResponseProto(const GetLeaseResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetLeaseResponseProto)
}

void GetLeaseResponseProto::SharedCtor() {}

GetLeaseResponseProto::~GetLeaseResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetLeaseResponseProto)
  SharedDtor();
}

void GetLeaseResponseProto::SharedDtor() {}

void GetLeaseResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLeaseResponseProto& GetLeaseResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetLeaseResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetLeaseResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLeaseResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLeaseResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetLeaseResponseProto)
  return target;
}

size_t GetLeaseResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetLeaseResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLeaseResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLeaseResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLeaseResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetLeaseResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetLeaseResponseProto)
    MergeFrom(*source);
  }
}

void GetLeaseResponseProto::MergeFrom(const GetLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void GetLeaseResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaseResponseProto::CopyFrom(const GetLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaseResponseProto::IsInitialized() const { return true; }

void GetLeaseResponseProto::InternalSwap(GetLeaseResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLeaseResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ReleaseLeaseRequestProto::InitAsDefaultInstance() {}
class ReleaseLeaseRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseLeaseRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

ReleaseLeaseRequestProto::ReleaseLeaseRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ReleaseLeaseRequestProto)
}
ReleaseLeaseRequestProto::ReleaseLeaseRequestProto(
    const ReleaseLeaseRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ReleaseLeaseRequestProto)
}

void ReleaseLeaseRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseLeaseRequestProto::~ReleaseLeaseRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ReleaseLeaseRequestProto)
  SharedDtor();
}

void ReleaseLeaseRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseLeaseRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseLeaseRequestProto& ReleaseLeaseRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ReleaseLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void ReleaseLeaseRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReleaseLeaseRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ReleaseLeaseRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ReleaseLeaseRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseLeaseRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ReleaseLeaseRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ReleaseLeaseRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ReleaseLeaseRequestProto)
  return target;
}

size_t ReleaseLeaseRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t ReleaseLeaseRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseLeaseRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseLeaseRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseLeaseRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ReleaseLeaseRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ReleaseLeaseRequestProto)
    MergeFrom(*source);
  }
}

void ReleaseLeaseRequestProto::MergeFrom(const ReleaseLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
  }
}

void ReleaseLeaseRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseLeaseRequestProto::CopyFrom(const ReleaseLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ReleaseLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReleaseLeaseRequestProto::InternalSwap(ReleaseLeaseRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseLeaseRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ReleaseLeaseResponseProto::InitAsDefaultInstance() {}
class ReleaseLeaseResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReleaseLeaseResponseProto>()._has_bits_);
};

ReleaseLeaseResponseProto::ReleaseLeaseResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ReleaseLeaseResponseProto)
}
ReleaseLeaseResponseProto::ReleaseLeaseResponseProto(
    const ReleaseLeaseResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ReleaseLeaseResponseProto)
}

void ReleaseLeaseResponseProto::SharedCtor() {}

ReleaseLeaseResponseProto::~ReleaseLeaseResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ReleaseLeaseResponseProto)
  SharedDtor();
}

void ReleaseLeaseResponseProto::SharedDtor() {}

void ReleaseLeaseResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseLeaseResponseProto& ReleaseLeaseResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ReleaseLeaseResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ReleaseLeaseResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReleaseLeaseResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseLeaseResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ReleaseLeaseResponseProto)
  return target;
}

size_t ReleaseLeaseResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseLeaseResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseLeaseResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ReleaseLeaseResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ReleaseLeaseResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ReleaseLeaseResponseProto)
    MergeFrom(*source);
  }
}

void ReleaseLeaseResponseProto::MergeFrom(
    const ReleaseLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void ReleaseLeaseResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseLeaseResponseProto::CopyFrom(
    const ReleaseLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ReleaseLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseLeaseResponseProto::IsInitialized() const { return true; }

void ReleaseLeaseResponseProto::InternalSwap(ReleaseLeaseResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseLeaseResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RenameRequestProto::InitAsDefaultInstance() {}
class RenameRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RenameRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_dst(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

RenameRequestProto::RenameRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenameRequestProto)
}
RenameRequestProto::RenameRequestProto(const RenameRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  dst_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst()) {
    dst_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.dst_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenameRequestProto)
}

void RenameRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RenameRequestProto::~RenameRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenameRequestProto)
  SharedDtor();
}

void RenameRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameRequestProto& RenameRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenameRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RenameRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenameRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dst_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenameRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenameRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenameRequestProto.dst");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenameRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenameRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_dst().data(),
        static_cast<int>(this->_internal_dst().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenameRequestProto.dst");
    target = stream->WriteStringMaybeAliased(2, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenameRequestProto)
  return target;
}

size_t RenameRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.RenameRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_dst()) {
    // required string dst = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_dst());
  }

  return total_size;
}
size_t RenameRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenameRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string dst = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_dst());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenameRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenameRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenameRequestProto)
    MergeFrom(*source);
  }
}

void RenameRequestProto::MergeFrom(const RenameRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenameRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dst_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.dst_);
    }
  }
}

void RenameRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenameRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRequestProto::CopyFrom(const RenameRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenameRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RenameRequestProto::InternalSwap(RenameRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  dst_.Swap(&other->dst_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RenameResponseProto::InitAsDefaultInstance() {}
class RenameResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RenameResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RenameResponseProto::RenameResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenameResponseProto)
}
RenameResponseProto::RenameResponseProto(const RenameResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenameResponseProto)
}

void RenameResponseProto::SharedCtor() { result_ = false; }

RenameResponseProto::~RenameResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenameResponseProto)
  SharedDtor();
}

void RenameResponseProto::SharedDtor() {}

void RenameResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameResponseProto& RenameResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenameResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RenameResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenameResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenameResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenameResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenameResponseProto)
  return target;
}

size_t RenameResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenameResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenameResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenameResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenameResponseProto)
    MergeFrom(*source);
  }
}

void RenameResponseProto::MergeFrom(const RenameResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenameResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void RenameResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenameResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameResponseProto::CopyFrom(const RenameResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenameResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RenameResponseProto::InternalSwap(RenameResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void Rename2RequestProto::InitAsDefaultInstance() {}
class Rename2RequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<Rename2RequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_dst(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_overwritedest(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

Rename2RequestProto::Rename2RequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.Rename2RequestProto)
}
Rename2RequestProto::Rename2RequestProto(const Rename2RequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  dst_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst()) {
    dst_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.dst_);
  }
  overwritedest_ = from.overwritedest_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.Rename2RequestProto)
}

void Rename2RequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overwritedest_ = false;
}

Rename2RequestProto::~Rename2RequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.Rename2RequestProto)
  SharedDtor();
}

void Rename2RequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rename2RequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rename2RequestProto& Rename2RequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Rename2RequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void Rename2RequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.Rename2RequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dst_.ClearNonDefaultToEmptyNoArena();
    }
  }
  overwritedest_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rename2RequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.Rename2RequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.Rename2RequestProto.dst");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool overwriteDest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_overwritedest(&has_bits);
          overwritedest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rename2RequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.Rename2RequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.Rename2RequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_dst().data(),
        static_cast<int>(this->_internal_dst().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.Rename2RequestProto.dst");
    target = stream->WriteStringMaybeAliased(2, this->_internal_dst(), target);
  }

  // required bool overwriteDest = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            3, this->_internal_overwritedest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.Rename2RequestProto)
  return target;
}

size_t Rename2RequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.Rename2RequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_dst()) {
    // required string dst = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_dst());
  }

  if (_internal_has_overwritedest()) {
    // required bool overwriteDest = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Rename2RequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.Rename2RequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string dst = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_dst());

    // required bool overwriteDest = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rename2RequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.Rename2RequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const Rename2RequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rename2RequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.Rename2RequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.Rename2RequestProto)
    MergeFrom(*source);
  }
}

void Rename2RequestProto::MergeFrom(const Rename2RequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.Rename2RequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dst_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.dst_);
    }
    if (cached_has_bits & 0x00000004u) {
      overwritedest_ = from.overwritedest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rename2RequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.Rename2RequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rename2RequestProto::CopyFrom(const Rename2RequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.Rename2RequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rename2RequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Rename2RequestProto::InternalSwap(Rename2RequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  dst_.Swap(&other->dst_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(overwritedest_, other->overwritedest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rename2RequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void Rename2ResponseProto::InitAsDefaultInstance() {}
class Rename2ResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<Rename2ResponseProto>()._has_bits_);
};

Rename2ResponseProto::Rename2ResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.Rename2ResponseProto)
}
Rename2ResponseProto::Rename2ResponseProto(const Rename2ResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.Rename2ResponseProto)
}

void Rename2ResponseProto::SharedCtor() {}

Rename2ResponseProto::~Rename2ResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.Rename2ResponseProto)
  SharedDtor();
}

void Rename2ResponseProto::SharedDtor() {}

void Rename2ResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rename2ResponseProto& Rename2ResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Rename2ResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void Rename2ResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.Rename2ResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rename2ResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rename2ResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.Rename2ResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.Rename2ResponseProto)
  return target;
}

size_t Rename2ResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.Rename2ResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rename2ResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.Rename2ResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const Rename2ResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rename2ResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.Rename2ResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.Rename2ResponseProto)
    MergeFrom(*source);
  }
}

void Rename2ResponseProto::MergeFrom(const Rename2ResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.Rename2ResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void Rename2ResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.Rename2ResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rename2ResponseProto::CopyFrom(const Rename2ResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.Rename2ResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rename2ResponseProto::IsInitialized() const { return true; }

void Rename2ResponseProto::InternalSwap(Rename2ResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rename2ResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void DeleteRequestProto::InitAsDefaultInstance() {}
class DeleteRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_recursive(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

DeleteRequestProto::DeleteRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DeleteRequestProto)
}
DeleteRequestProto::DeleteRequestProto(const DeleteRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  recursive_ = from.recursive_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DeleteRequestProto)
}

void DeleteRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recursive_ = false;
}

DeleteRequestProto::~DeleteRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DeleteRequestProto)
  SharedDtor();
}

void DeleteRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequestProto& DeleteRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DeleteRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void DeleteRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DeleteRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  recursive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeleteRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.DeleteRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool recursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recursive(&has_bits);
          recursive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DeleteRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.DeleteRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required bool recursive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            2, this->_internal_recursive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DeleteRequestProto)
  return target;
}

size_t DeleteRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.DeleteRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_recursive()) {
    // required bool recursive = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DeleteRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DeleteRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required bool recursive = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DeleteRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DeleteRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DeleteRequestProto)
    MergeFrom(*source);
  }
}

void DeleteRequestProto::MergeFrom(const DeleteRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DeleteRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      recursive_ = from.recursive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DeleteRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequestProto::CopyFrom(const DeleteRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DeleteRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DeleteRequestProto::InternalSwap(DeleteRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(recursive_, other->recursive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void DeleteResponseProto::InitAsDefaultInstance() {}
class DeleteResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

DeleteResponseProto::DeleteResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DeleteResponseProto)
}
DeleteResponseProto::DeleteResponseProto(const DeleteResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DeleteResponseProto)
}

void DeleteResponseProto::SharedCtor() { result_ = false; }

DeleteResponseProto::~DeleteResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DeleteResponseProto)
  SharedDtor();
}

void DeleteResponseProto::SharedDtor() {}

void DeleteResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponseProto& DeleteResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DeleteResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void DeleteResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DeleteResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeleteResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DeleteResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DeleteResponseProto)
  return target;
}

size_t DeleteResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DeleteResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DeleteResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DeleteResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DeleteResponseProto)
    MergeFrom(*source);
  }
}

void DeleteResponseProto::MergeFrom(const DeleteResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DeleteResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void DeleteResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DeleteResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponseProto::CopyFrom(const DeleteResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DeleteResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DeleteResponseProto::InternalSwap(DeleteResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MkdirsRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_MkdirsRequestProto_default_instance_._instance
      .get_mutable()
      ->masked_ = const_cast<::Hdfs::Internal::FsPermissionProto*>(
      ::Hdfs::Internal::FsPermissionProto::internal_default_instance());
}
class MkdirsRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MkdirsRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::FsPermissionProto& masked(
      const MkdirsRequestProto* msg);
  static void set_has_masked(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_createparent(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

const ::Hdfs::Internal::FsPermissionProto&
MkdirsRequestProto::_Internal::masked(const MkdirsRequestProto* msg) {
  return *msg->masked_;
}
void MkdirsRequestProto::clear_masked() {
  if (masked_ != nullptr) masked_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MkdirsRequestProto::MkdirsRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.MkdirsRequestProto)
}
MkdirsRequestProto::MkdirsRequestProto(const MkdirsRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  if (from._internal_has_masked()) {
    masked_ = new ::Hdfs::Internal::FsPermissionProto(*from.masked_);
  } else {
    masked_ = nullptr;
  }
  createparent_ = from.createparent_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.MkdirsRequestProto)
}

void MkdirsRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&masked_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&createparent_) -
                               reinterpret_cast<char*>(&masked_)) +
               sizeof(createparent_));
}

MkdirsRequestProto::~MkdirsRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.MkdirsRequestProto)
  SharedDtor();
}

void MkdirsRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete masked_;
}

void MkdirsRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MkdirsRequestProto& MkdirsRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MkdirsRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void MkdirsRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.MkdirsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(masked_ != nullptr);
      masked_->Clear();
    }
  }
  createparent_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MkdirsRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.MkdirsRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.FsPermissionProto masked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool createParent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_createparent(&has_bits);
          createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MkdirsRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.MkdirsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.MkdirsRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::masked(this), target, stream);
  }

  // required bool createParent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            3, this->_internal_createparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.MkdirsRequestProto)
  return target;
}

size_t MkdirsRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.MkdirsRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_masked()) {
    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *masked_);
  }

  if (_internal_has_createparent()) {
    // required bool createParent = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MkdirsRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.MkdirsRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *masked_);

    // required bool createParent = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MkdirsRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.MkdirsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MkdirsRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MkdirsRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.MkdirsRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.MkdirsRequestProto)
    MergeFrom(*source);
  }
}

void MkdirsRequestProto::MergeFrom(const MkdirsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.MkdirsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_masked()
          ->::Hdfs::Internal::FsPermissionProto::MergeFrom(
              from._internal_masked());
    }
    if (cached_has_bits & 0x00000004u) {
      createparent_ = from.createparent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MkdirsRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.MkdirsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirsRequestProto::CopyFrom(const MkdirsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.MkdirsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_masked()) {
    if (!masked_->IsInitialized()) return false;
  }
  return true;
}

void MkdirsRequestProto::InternalSwap(MkdirsRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(masked_, other->masked_);
  swap(createparent_, other->createparent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirsRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MkdirsResponseProto::InitAsDefaultInstance() {}
class MkdirsResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MkdirsResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

MkdirsResponseProto::MkdirsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.MkdirsResponseProto)
}
MkdirsResponseProto::MkdirsResponseProto(const MkdirsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.MkdirsResponseProto)
}

void MkdirsResponseProto::SharedCtor() { result_ = false; }

MkdirsResponseProto::~MkdirsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.MkdirsResponseProto)
  SharedDtor();
}

void MkdirsResponseProto::SharedDtor() {}

void MkdirsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MkdirsResponseProto& MkdirsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MkdirsResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void MkdirsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.MkdirsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MkdirsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MkdirsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.MkdirsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.MkdirsResponseProto)
  return target;
}

size_t MkdirsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.MkdirsResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MkdirsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.MkdirsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MkdirsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MkdirsResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.MkdirsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.MkdirsResponseProto)
    MergeFrom(*source);
  }
}

void MkdirsResponseProto::MergeFrom(const MkdirsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.MkdirsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void MkdirsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.MkdirsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirsResponseProto::CopyFrom(const MkdirsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.MkdirsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MkdirsResponseProto::InternalSwap(MkdirsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirsResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetListingRequestProto::InitAsDefaultInstance() {}
class GetListingRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetListingRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_startafter(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_needlocation(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

GetListingRequestProto::GetListingRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetListingRequestProto)
}
GetListingRequestProto::GetListingRequestProto(
    const GetListingRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  startafter_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_startafter()) {
    startafter_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.startafter_);
  }
  needlocation_ = from.needlocation_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetListingRequestProto)
}

void GetListingRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startafter_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  needlocation_ = false;
}

GetListingRequestProto::~GetListingRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetListingRequestProto)
  SharedDtor();
}

void GetListingRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startafter_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetListingRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListingRequestProto& GetListingRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetListingRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetListingRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetListingRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      startafter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  needlocation_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetListingRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetListingRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes startAfter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_startafter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool needLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_needlocation(&has_bits);
          needlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListingRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetListingRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetListingRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required bytes startAfter = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
        stream->WriteBytesMaybeAliased(2, this->_internal_startafter(), target);
  }

  // required bool needLocation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            3, this->_internal_needlocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetListingRequestProto)
  return target;
}

size_t GetListingRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetListingRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_startafter()) {
    // required bytes startAfter = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_startafter());
  }

  if (_internal_has_needlocation()) {
    // required bool needLocation = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GetListingRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetListingRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required bytes startAfter = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_startafter());

    // required bool needLocation = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListingRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetListingRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListingRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListingRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetListingRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetListingRequestProto)
    MergeFrom(*source);
  }
}

void GetListingRequestProto::MergeFrom(const GetListingRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetListingRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      startafter_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.startafter_);
    }
    if (cached_has_bits & 0x00000004u) {
      needlocation_ = from.needlocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetListingRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetListingRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListingRequestProto::CopyFrom(const GetListingRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetListingRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GetListingRequestProto::InternalSwap(GetListingRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  startafter_.Swap(
      &other->startafter_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(needlocation_, other->needlocation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetListingResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetListingResponseProto_default_instance_._instance
      .get_mutable()
      ->dirlist_ = const_cast<::Hdfs::Internal::DirectoryListingProto*>(
      ::Hdfs::Internal::DirectoryListingProto::internal_default_instance());
}
class GetListingResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetListingResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::DirectoryListingProto& dirlist(
      const GetListingResponseProto* msg);
  static void set_has_dirlist(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::DirectoryListingProto&
GetListingResponseProto::_Internal::dirlist(
    const GetListingResponseProto* msg) {
  return *msg->dirlist_;
}
void GetListingResponseProto::clear_dirlist() {
  if (dirlist_ != nullptr) dirlist_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetListingResponseProto::GetListingResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetListingResponseProto)
}
GetListingResponseProto::GetListingResponseProto(
    const GetListingResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dirlist()) {
    dirlist_ = new ::Hdfs::Internal::DirectoryListingProto(*from.dirlist_);
  } else {
    dirlist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetListingResponseProto)
}

void GetListingResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto.base);
  dirlist_ = nullptr;
}

GetListingResponseProto::~GetListingResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetListingResponseProto)
  SharedDtor();
}

void GetListingResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete dirlist_;
}

void GetListingResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetListingResponseProto& GetListingResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetListingResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetListingResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetListingResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dirlist_ != nullptr);
    dirlist_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetListingResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListingResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetListingResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::dirlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetListingResponseProto)
  return target;
}

size_t GetListingResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetListingResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *dirlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetListingResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetListingResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetListingResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetListingResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetListingResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetListingResponseProto)
    MergeFrom(*source);
  }
}

void GetListingResponseProto::MergeFrom(const GetListingResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetListingResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_dirlist()) {
    _internal_mutable_dirlist()
        ->::Hdfs::Internal::DirectoryListingProto::MergeFrom(
            from._internal_dirlist());
  }
}

void GetListingResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetListingResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListingResponseProto::CopyFrom(const GetListingResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetListingResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingResponseProto::IsInitialized() const {
  if (_internal_has_dirlist()) {
    if (!dirlist_->IsInitialized()) return false;
  }
  return true;
}

void GetListingResponseProto::InternalSwap(GetListingResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dirlist_, other->dirlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetSnapshottableDirListingRequestProto::InitAsDefaultInstance() {}
class GetSnapshottableDirListingRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetSnapshottableDirListingRequestProto>()
                   ._has_bits_);
};

GetSnapshottableDirListingRequestProto::GetSnapshottableDirListingRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
}
GetSnapshottableDirListingRequestProto::GetSnapshottableDirListingRequestProto(
    const GetSnapshottableDirListingRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
}

void GetSnapshottableDirListingRequestProto::SharedCtor() {}

GetSnapshottableDirListingRequestProto::
    ~GetSnapshottableDirListingRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  SharedDtor();
}

void GetSnapshottableDirListingRequestProto::SharedDtor() {}

void GetSnapshottableDirListingRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshottableDirListingRequestProto&
GetSnapshottableDirListingRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetSnapshottableDirListingRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetSnapshottableDirListingRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSnapshottableDirListingRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetSnapshottableDirListingRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  return target;
}

size_t GetSnapshottableDirListingRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshottableDirListingRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshottableDirListingRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetSnapshottableDirListingRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
    MergeFrom(*source);
  }
}

void GetSnapshottableDirListingRequestProto::MergeFrom(
    const GetSnapshottableDirListingRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void GetSnapshottableDirListingRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshottableDirListingRequestProto::CopyFrom(
    const GetSnapshottableDirListingRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshottableDirListingRequestProto::IsInitialized() const {
  return true;
}

void GetSnapshottableDirListingRequestProto::InternalSwap(
    GetSnapshottableDirListingRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetSnapshottableDirListingRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetSnapshottableDirListingResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetSnapshottableDirListingResponseProto_default_instance_
      ._instance.get_mutable()
      ->snapshottabledirlist_ =
      const_cast<::Hdfs::Internal::SnapshottableDirectoryListingProto*>(
          ::Hdfs::Internal::SnapshottableDirectoryListingProto::
              internal_default_instance());
}
class GetSnapshottableDirListingResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetSnapshottableDirListingResponseProto>()
                   ._has_bits_);
  static const ::Hdfs::Internal::SnapshottableDirectoryListingProto&
  snapshottabledirlist(const GetSnapshottableDirListingResponseProto* msg);
  static void set_has_snapshottabledirlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Hdfs::Internal::SnapshottableDirectoryListingProto&
GetSnapshottableDirListingResponseProto::_Internal::snapshottabledirlist(
    const GetSnapshottableDirListingResponseProto* msg) {
  return *msg->snapshottabledirlist_;
}
void GetSnapshottableDirListingResponseProto::clear_snapshottabledirlist() {
  if (snapshottabledirlist_ != nullptr) snapshottabledirlist_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSnapshottableDirListingResponseProto::
    GetSnapshottableDirListingResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
}
GetSnapshottableDirListingResponseProto::
    GetSnapshottableDirListingResponseProto(
        const GetSnapshottableDirListingResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_snapshottabledirlist()) {
    snapshottabledirlist_ =
        new ::Hdfs::Internal::SnapshottableDirectoryListingProto(
            *from.snapshottabledirlist_);
  } else {
    snapshottabledirlist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
}

void GetSnapshottableDirListingResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  snapshottabledirlist_ = nullptr;
}

GetSnapshottableDirListingResponseProto::
    ~GetSnapshottableDirListingResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  SharedDtor();
}

void GetSnapshottableDirListingResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete snapshottabledirlist_;
}

void GetSnapshottableDirListingResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshottableDirListingResponseProto&
GetSnapshottableDirListingResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetSnapshottableDirListingResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetSnapshottableDirListingResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(snapshottabledirlist_ != nullptr);
    snapshottabledirlist_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSnapshottableDirListingResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.SnapshottableDirectoryListingProto
      // snapshottableDirList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr =
              ctx->ParseMessage(_internal_mutable_snapshottabledirlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetSnapshottableDirListingResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto
  // snapshottableDirList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::snapshottabledirlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  return target;
}

size_t GetSnapshottableDirListingResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto
  // snapshottableDirList = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *snapshottabledirlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshottableDirListingResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshottableDirListingResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetSnapshottableDirListingResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
    MergeFrom(*source);
  }
}

void GetSnapshottableDirListingResponseProto::MergeFrom(
    const GetSnapshottableDirListingResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_snapshottabledirlist()) {
    _internal_mutable_snapshottabledirlist()
        ->::Hdfs::Internal::SnapshottableDirectoryListingProto::MergeFrom(
            from._internal_snapshottabledirlist());
  }
}

void GetSnapshottableDirListingResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshottableDirListingResponseProto::CopyFrom(
    const GetSnapshottableDirListingResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshottableDirListingResponseProto::IsInitialized() const {
  if (_internal_has_snapshottabledirlist()) {
    if (!snapshottabledirlist_->IsInitialized()) return false;
  }
  return true;
}

void GetSnapshottableDirListingResponseProto::InternalSwap(
    GetSnapshottableDirListingResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(snapshottabledirlist_, other->snapshottabledirlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetSnapshottableDirListingResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetSnapshotDiffReportRequestProto::InitAsDefaultInstance() {}
class GetSnapshotDiffReportRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetSnapshotDiffReportRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_fromsnapshot(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_tosnapshot(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

GetSnapshotDiffReportRequestProto::GetSnapshotDiffReportRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
}
GetSnapshotDiffReportRequestProto::GetSnapshotDiffReportRequestProto(
    const GetSnapshotDiffReportRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  fromsnapshot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fromsnapshot()) {
    fromsnapshot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.fromsnapshot_);
  }
  tosnapshot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tosnapshot()) {
    tosnapshot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.tosnapshot_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
}

void GetSnapshotDiffReportRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromsnapshot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tosnapshot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSnapshotDiffReportRequestProto::~GetSnapshotDiffReportRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  SharedDtor();
}

void GetSnapshotDiffReportRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromsnapshot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tosnapshot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSnapshotDiffReportRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshotDiffReportRequestProto&
GetSnapshotDiffReportRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetSnapshotDiffReportRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetSnapshotDiffReportRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      snapshotroot_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fromsnapshot_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tosnapshot_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSnapshotDiffReportRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string fromSnapshot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromsnapshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string toSnapshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tosnapshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetSnapshotDiffReportRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  // required string fromSnapshot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_fromsnapshot().data(),
        static_cast<int>(this->_internal_fromsnapshot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot");
    target = stream->WriteStringMaybeAliased(2, this->_internal_fromsnapshot(),
                                             target);
  }

  // required string toSnapshot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_tosnapshot().data(),
        static_cast<int>(this->_internal_tosnapshot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot");
    target = stream->WriteStringMaybeAliased(3, this->_internal_tosnapshot(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  return target;
}

size_t GetSnapshotDiffReportRequestProto::RequiredFieldsByteSizeFallback()
    const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  size_t total_size = 0;

  if (_internal_has_snapshotroot()) {
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }

  if (_internal_has_fromsnapshot()) {
    // required string fromSnapshot = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_fromsnapshot());
  }

  if (_internal_has_tosnapshot()) {
    // required string toSnapshot = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_tosnapshot());
  }

  return total_size;
}
size_t GetSnapshotDiffReportRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());

    // required string fromSnapshot = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_fromsnapshot());

    // required string toSnapshot = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_tosnapshot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshotDiffReportRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshotDiffReportRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetSnapshotDiffReportRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
    MergeFrom(*source);
  }
}

void GetSnapshotDiffReportRequestProto::MergeFrom(
    const GetSnapshotDiffReportRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      snapshotroot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotroot_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fromsnapshot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.fromsnapshot_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      tosnapshot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.tosnapshot_);
    }
  }
}

void GetSnapshotDiffReportRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotDiffReportRequestProto::CopyFrom(
    const GetSnapshotDiffReportRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotDiffReportRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GetSnapshotDiffReportRequestProto::InternalSwap(
    GetSnapshotDiffReportRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  fromsnapshot_.Swap(
      &other->fromsnapshot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  tosnapshot_.Swap(
      &other->tosnapshot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetSnapshotDiffReportRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetSnapshotDiffReportResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetSnapshotDiffReportResponseProto_default_instance_
      ._instance.get_mutable()
      ->diffreport_ = const_cast<::Hdfs::Internal::SnapshotDiffReportProto*>(
      ::Hdfs::Internal::SnapshotDiffReportProto::internal_default_instance());
}
class GetSnapshotDiffReportResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetSnapshotDiffReportResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::SnapshotDiffReportProto& diffreport(
      const GetSnapshotDiffReportResponseProto* msg);
  static void set_has_diffreport(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::SnapshotDiffReportProto&
GetSnapshotDiffReportResponseProto::_Internal::diffreport(
    const GetSnapshotDiffReportResponseProto* msg) {
  return *msg->diffreport_;
}
void GetSnapshotDiffReportResponseProto::clear_diffreport() {
  if (diffreport_ != nullptr) diffreport_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSnapshotDiffReportResponseProto::GetSnapshotDiffReportResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
}
GetSnapshotDiffReportResponseProto::GetSnapshotDiffReportResponseProto(
    const GetSnapshotDiffReportResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_diffreport()) {
    diffreport_ =
        new ::Hdfs::Internal::SnapshotDiffReportProto(*from.diffreport_);
  } else {
    diffreport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
}

void GetSnapshotDiffReportResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  diffreport_ = nullptr;
}

GetSnapshotDiffReportResponseProto::~GetSnapshotDiffReportResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  SharedDtor();
}

void GetSnapshotDiffReportResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete diffreport_;
}

void GetSnapshotDiffReportResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshotDiffReportResponseProto&
GetSnapshotDiffReportResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetSnapshotDiffReportResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetSnapshotDiffReportResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(diffreport_ != nullptr);
    diffreport_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSnapshotDiffReportResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetSnapshotDiffReportResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::diffreport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  return target;
}

size_t GetSnapshotDiffReportResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  if (_internal_has_diffreport()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *diffreport_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshotDiffReportResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshotDiffReportResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetSnapshotDiffReportResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
    MergeFrom(*source);
  }
}

void GetSnapshotDiffReportResponseProto::MergeFrom(
    const GetSnapshotDiffReportResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_diffreport()) {
    _internal_mutable_diffreport()
        ->::Hdfs::Internal::SnapshotDiffReportProto::MergeFrom(
            from._internal_diffreport());
  }
}

void GetSnapshotDiffReportResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotDiffReportResponseProto::CopyFrom(
    const GetSnapshotDiffReportResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotDiffReportResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_diffreport()) {
    if (!diffreport_->IsInitialized()) return false;
  }
  return true;
}

void GetSnapshotDiffReportResponseProto::InternalSwap(
    GetSnapshotDiffReportResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(diffreport_, other->diffreport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetSnapshotDiffReportResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RenewLeaseRequestProto::InitAsDefaultInstance() {}
class RenewLeaseRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RenewLeaseRequestProto>()._has_bits_);
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RenewLeaseRequestProto::RenewLeaseRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenewLeaseRequestProto)
}
RenewLeaseRequestProto::RenewLeaseRequestProto(
    const RenewLeaseRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenewLeaseRequestProto)
}

void RenewLeaseRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RenewLeaseRequestProto::~RenewLeaseRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenewLeaseRequestProto)
  SharedDtor();
}

void RenewLeaseRequestProto::SharedDtor() {
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenewLeaseRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenewLeaseRequestProto& RenewLeaseRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenewLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RenewLeaseRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenewLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenewLeaseRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenewLeaseRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenewLeaseRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenewLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenewLeaseRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(1, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenewLeaseRequestProto)
  return target;
}

size_t RenewLeaseRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenewLeaseRequestProto)
  size_t total_size = 0;

  // required string clientName = 1;
  if (_internal_has_clientname()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenewLeaseRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenewLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenewLeaseRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenewLeaseRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenewLeaseRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenewLeaseRequestProto)
    MergeFrom(*source);
  }
}

void RenewLeaseRequestProto::MergeFrom(const RenewLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenewLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_clientname()) {
    _has_bits_[0] |= 0x00000001u;
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
}

void RenewLeaseRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenewLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseRequestProto::CopyFrom(const RenewLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenewLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RenewLeaseRequestProto::InternalSwap(RenewLeaseRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RenewLeaseResponseProto::InitAsDefaultInstance() {}
class RenewLeaseResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RenewLeaseResponseProto>()._has_bits_);
};

RenewLeaseResponseProto::RenewLeaseResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenewLeaseResponseProto)
}
RenewLeaseResponseProto::RenewLeaseResponseProto(
    const RenewLeaseResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenewLeaseResponseProto)
}

void RenewLeaseResponseProto::SharedCtor() {}

RenewLeaseResponseProto::~RenewLeaseResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenewLeaseResponseProto)
  SharedDtor();
}

void RenewLeaseResponseProto::SharedDtor() {}

void RenewLeaseResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenewLeaseResponseProto& RenewLeaseResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenewLeaseResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RenewLeaseResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenewLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenewLeaseResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenewLeaseResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenewLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenewLeaseResponseProto)
  return target;
}

size_t RenewLeaseResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenewLeaseResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenewLeaseResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenewLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenewLeaseResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenewLeaseResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenewLeaseResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenewLeaseResponseProto)
    MergeFrom(*source);
  }
}

void RenewLeaseResponseProto::MergeFrom(const RenewLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenewLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RenewLeaseResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenewLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseResponseProto::CopyFrom(const RenewLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenewLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseResponseProto::IsInitialized() const { return true; }

void RenewLeaseResponseProto::InternalSwap(RenewLeaseResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RecoverLeaseRequestProto::InitAsDefaultInstance() {}
class RecoverLeaseRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RecoverLeaseRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

RecoverLeaseRequestProto::RecoverLeaseRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RecoverLeaseRequestProto)
}
RecoverLeaseRequestProto::RecoverLeaseRequestProto(
    const RecoverLeaseRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RecoverLeaseRequestProto)
}

void RecoverLeaseRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecoverLeaseRequestProto::~RecoverLeaseRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RecoverLeaseRequestProto)
  SharedDtor();
}

void RecoverLeaseRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecoverLeaseRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverLeaseRequestProto& RecoverLeaseRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RecoverLeaseRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RecoverLeaseRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RecoverLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecoverLeaseRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RecoverLeaseRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RecoverLeaseRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoverLeaseRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RecoverLeaseRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RecoverLeaseRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RecoverLeaseRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RecoverLeaseRequestProto)
  return target;
}

size_t RecoverLeaseRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.RecoverLeaseRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  return total_size;
}
size_t RecoverLeaseRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RecoverLeaseRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverLeaseRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RecoverLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverLeaseRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoverLeaseRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RecoverLeaseRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RecoverLeaseRequestProto)
    MergeFrom(*source);
  }
}

void RecoverLeaseRequestProto::MergeFrom(const RecoverLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RecoverLeaseRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
  }
}

void RecoverLeaseRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RecoverLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverLeaseRequestProto::CopyFrom(const RecoverLeaseRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RecoverLeaseRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RecoverLeaseRequestProto::InternalSwap(RecoverLeaseRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverLeaseRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RecoverLeaseResponseProto::InitAsDefaultInstance() {}
class RecoverLeaseResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RecoverLeaseResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RecoverLeaseResponseProto::RecoverLeaseResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RecoverLeaseResponseProto)
}
RecoverLeaseResponseProto::RecoverLeaseResponseProto(
    const RecoverLeaseResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RecoverLeaseResponseProto)
}

void RecoverLeaseResponseProto::SharedCtor() { result_ = false; }

RecoverLeaseResponseProto::~RecoverLeaseResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RecoverLeaseResponseProto)
  SharedDtor();
}

void RecoverLeaseResponseProto::SharedDtor() {}

void RecoverLeaseResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverLeaseResponseProto& RecoverLeaseResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RecoverLeaseResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RecoverLeaseResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RecoverLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecoverLeaseResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoverLeaseResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RecoverLeaseResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RecoverLeaseResponseProto)
  return target;
}

size_t RecoverLeaseResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RecoverLeaseResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverLeaseResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RecoverLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverLeaseResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RecoverLeaseResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RecoverLeaseResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RecoverLeaseResponseProto)
    MergeFrom(*source);
  }
}

void RecoverLeaseResponseProto::MergeFrom(
    const RecoverLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RecoverLeaseResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void RecoverLeaseResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RecoverLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverLeaseResponseProto::CopyFrom(
    const RecoverLeaseResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RecoverLeaseResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverLeaseResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RecoverLeaseResponseProto::InternalSwap(RecoverLeaseResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverLeaseResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFsStatusRequestProto::InitAsDefaultInstance() {}
class GetFsStatusRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFsStatusRequestProto>()._has_bits_);
};

GetFsStatusRequestProto::GetFsStatusRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFsStatusRequestProto)
}
GetFsStatusRequestProto::GetFsStatusRequestProto(
    const GetFsStatusRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFsStatusRequestProto)
}

void GetFsStatusRequestProto::SharedCtor() {}

GetFsStatusRequestProto::~GetFsStatusRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFsStatusRequestProto)
  SharedDtor();
}

void GetFsStatusRequestProto::SharedDtor() {}

void GetFsStatusRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFsStatusRequestProto& GetFsStatusRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFsStatusRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetFsStatusRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFsStatusRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFsStatusRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFsStatusRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFsStatusRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFsStatusRequestProto)
  return target;
}

size_t GetFsStatusRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFsStatusRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFsStatusRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFsStatusRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFsStatusRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFsStatusRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFsStatusRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFsStatusRequestProto)
    MergeFrom(*source);
  }
}

void GetFsStatusRequestProto::MergeFrom(const GetFsStatusRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFsStatusRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void GetFsStatusRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFsStatusRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFsStatusRequestProto::CopyFrom(const GetFsStatusRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFsStatusRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFsStatusRequestProto::IsInitialized() const { return true; }

void GetFsStatusRequestProto::InternalSwap(GetFsStatusRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFsStatusRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFsStatsResponseProto::InitAsDefaultInstance() {}
class GetFsStatsResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFsStatsResponseProto>()._has_bits_);
  static void set_has_capacity(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_used(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_remaining(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_under_replicated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_corrupt_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_missing_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

GetFsStatsResponseProto::GetFsStatsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFsStatsResponseProto)
}
GetFsStatsResponseProto::GetFsStatsResponseProto(
    const GetFsStatsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
           static_cast<size_t>(reinterpret_cast<char*>(&missing_blocks_) -
                               reinterpret_cast<char*>(&capacity_)) +
               sizeof(missing_blocks_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFsStatsResponseProto)
}

void GetFsStatsResponseProto::SharedCtor() {
  ::memset(&capacity_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&missing_blocks_) -
                               reinterpret_cast<char*>(&capacity_)) +
               sizeof(missing_blocks_));
}

GetFsStatsResponseProto::~GetFsStatsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFsStatsResponseProto)
  SharedDtor();
}

void GetFsStatsResponseProto::SharedDtor() {}

void GetFsStatsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFsStatsResponseProto& GetFsStatsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFsStatsResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetFsStatsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFsStatsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&capacity_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&missing_blocks_) -
                                 reinterpret_cast<char*>(&capacity_)) +
                 sizeof(missing_blocks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFsStatsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_used(&has_bits);
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remaining(&has_bits);
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 under_replicated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_under_replicated(&has_bits);
          under_replicated_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 corrupt_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_corrupt_blocks(&has_bits);
          corrupt_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 missing_blocks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_missing_blocks(&has_bits);
          missing_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFsStatsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFsStatsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 capacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            1, this->_internal_capacity(), target);
  }

  // required uint64 used = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_used(), target);
  }

  // required uint64 remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->_internal_remaining(), target);
  }

  // required uint64 under_replicated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            4, this->_internal_under_replicated(), target);
  }

  // required uint64 corrupt_blocks = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            5, this->_internal_corrupt_blocks(), target);
  }

  // required uint64 missing_blocks = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            6, this->_internal_missing_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFsStatsResponseProto)
  return target;
}

size_t GetFsStatsResponseProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.GetFsStatsResponseProto)
  size_t total_size = 0;

  if (_internal_has_capacity()) {
    // required uint64 capacity = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_capacity());
  }

  if (_internal_has_used()) {
    // required uint64 used = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_used());
  }

  if (_internal_has_remaining()) {
    // required uint64 remaining = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_remaining());
  }

  if (_internal_has_under_replicated()) {
    // required uint64 under_replicated = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_under_replicated());
  }

  if (_internal_has_corrupt_blocks()) {
    // required uint64 corrupt_blocks = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_corrupt_blocks());
  }

  if (_internal_has_missing_blocks()) {
    // required uint64 missing_blocks = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_missing_blocks());
  }

  return total_size;
}
size_t GetFsStatsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFsStatsResponseProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) ==
      0) {  // All required fields are present.
    // required uint64 capacity = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_capacity());

    // required uint64 used = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_used());

    // required uint64 remaining = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_remaining());

    // required uint64 under_replicated = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_under_replicated());

    // required uint64 corrupt_blocks = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_corrupt_blocks());

    // required uint64 missing_blocks = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_missing_blocks());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFsStatsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFsStatsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFsStatsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFsStatsResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFsStatsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFsStatsResponseProto)
    MergeFrom(*source);
  }
}

void GetFsStatsResponseProto::MergeFrom(const GetFsStatsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFsStatsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_ = from.used_;
    }
    if (cached_has_bits & 0x00000004u) {
      remaining_ = from.remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      under_replicated_ = from.under_replicated_;
    }
    if (cached_has_bits & 0x00000010u) {
      corrupt_blocks_ = from.corrupt_blocks_;
    }
    if (cached_has_bits & 0x00000020u) {
      missing_blocks_ = from.missing_blocks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetFsStatsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFsStatsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFsStatsResponseProto::CopyFrom(const GetFsStatsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFsStatsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFsStatsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void GetFsStatsResponseProto::InternalSwap(GetFsStatsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(capacity_, other->capacity_);
  swap(used_, other->used_);
  swap(remaining_, other->remaining_);
  swap(under_replicated_, other->under_replicated_);
  swap(corrupt_blocks_, other->corrupt_blocks_);
  swap(missing_blocks_, other->missing_blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFsStatsResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetDatanodeReportRequestProto::InitAsDefaultInstance() {}
class GetDatanodeReportRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetDatanodeReportRequestProto>()._has_bits_);
  static void set_has_type(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetDatanodeReportRequestProto::GetDatanodeReportRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetDatanodeReportRequestProto)
}
GetDatanodeReportRequestProto::GetDatanodeReportRequestProto(
    const GetDatanodeReportRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetDatanodeReportRequestProto)
}

void GetDatanodeReportRequestProto::SharedCtor() { type_ = 1; }

GetDatanodeReportRequestProto::~GetDatanodeReportRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetDatanodeReportRequestProto)
  SharedDtor();
}

void GetDatanodeReportRequestProto::SharedDtor() {}

void GetDatanodeReportRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDatanodeReportRequestProto&
GetDatanodeReportRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetDatanodeReportRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetDatanodeReportRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDatanodeReportRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(
                  ::Hdfs::Internal::DatanodeReportTypeProto_IsValid(val))) {
            _internal_set_type(
                static_cast<::Hdfs::Internal::DatanodeReportTypeProto>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(
                1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetDatanodeReportRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetDatanodeReportRequestProto)
  return target;
}

size_t GetDatanodeReportRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  if (_internal_has_type()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatanodeReportRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatanodeReportRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetDatanodeReportRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetDatanodeReportRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetDatanodeReportRequestProto)
    MergeFrom(*source);
  }
}

void GetDatanodeReportRequestProto::MergeFrom(
    const GetDatanodeReportRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void GetDatanodeReportRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatanodeReportRequestProto::CopyFrom(
    const GetDatanodeReportRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetDatanodeReportRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatanodeReportRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetDatanodeReportRequestProto::InternalSwap(
    GetDatanodeReportRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatanodeReportRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetDatanodeReportResponseProto::InitAsDefaultInstance() {}
class GetDatanodeReportResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetDatanodeReportResponseProto>()._has_bits_);
};

void GetDatanodeReportResponseProto::clear_di() { di_.Clear(); }
GetDatanodeReportResponseProto::GetDatanodeReportResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetDatanodeReportResponseProto)
}
GetDatanodeReportResponseProto::GetDatanodeReportResponseProto(
    const GetDatanodeReportResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      di_(from.di_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetDatanodeReportResponseProto)
}

void GetDatanodeReportResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto
           .base);
}

GetDatanodeReportResponseProto::~GetDatanodeReportResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetDatanodeReportResponseProto)
  SharedDtor();
}

void GetDatanodeReportResponseProto::SharedDtor() {}

void GetDatanodeReportResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDatanodeReportResponseProto&
GetDatanodeReportResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetDatanodeReportResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetDatanodeReportResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  di_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDatanodeReportResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_di(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetDatanodeReportResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_di_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_di(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetDatanodeReportResponseProto)
  return target;
}

size_t GetDatanodeReportResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  total_size += 1UL * this->_internal_di_size();
  for (const auto& msg : this->di_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatanodeReportResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatanodeReportResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetDatanodeReportResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetDatanodeReportResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetDatanodeReportResponseProto)
    MergeFrom(*source);
  }
}

void GetDatanodeReportResponseProto::MergeFrom(
    const GetDatanodeReportResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  di_.MergeFrom(from.di_);
}

void GetDatanodeReportResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatanodeReportResponseProto::CopyFrom(
    const GetDatanodeReportResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetDatanodeReportResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatanodeReportResponseProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(di_)) return false;
  return true;
}

void GetDatanodeReportResponseProto::InternalSwap(
    GetDatanodeReportResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  di_.InternalSwap(&other->di_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatanodeReportResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetPreferredBlockSizeRequestProto::InitAsDefaultInstance() {}
class GetPreferredBlockSizeRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetPreferredBlockSizeRequestProto>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetPreferredBlockSizeRequestProto::GetPreferredBlockSizeRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
}
GetPreferredBlockSizeRequestProto::GetPreferredBlockSizeRequestProto(
    const GetPreferredBlockSizeRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
}

void GetPreferredBlockSizeRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPreferredBlockSizeRequestProto::~GetPreferredBlockSizeRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  SharedDtor();
}

void GetPreferredBlockSizeRequestProto::SharedDtor() {
  filename_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPreferredBlockSizeRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPreferredBlockSizeRequestProto&
GetPreferredBlockSizeRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetPreferredBlockSizeRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetPreferredBlockSizeRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPreferredBlockSizeRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetPreferredBlockSizeRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_filename().data(),
        static_cast<int>(this->_internal_filename().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  return target;
}

size_t GetPreferredBlockSizeRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  size_t total_size = 0;

  // required string filename = 1;
  if (_internal_has_filename()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_filename());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPreferredBlockSizeRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPreferredBlockSizeRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetPreferredBlockSizeRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
    MergeFrom(*source);
  }
}

void GetPreferredBlockSizeRequestProto::MergeFrom(
    const GetPreferredBlockSizeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_filename()) {
    _has_bits_[0] |= 0x00000001u;
    filename_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.filename_);
  }
}

void GetPreferredBlockSizeRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPreferredBlockSizeRequestProto::CopyFrom(
    const GetPreferredBlockSizeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPreferredBlockSizeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetPreferredBlockSizeRequestProto::InternalSwap(
    GetPreferredBlockSizeRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(
      &other->filename_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetPreferredBlockSizeRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetPreferredBlockSizeResponseProto::InitAsDefaultInstance() {}
class GetPreferredBlockSizeResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetPreferredBlockSizeResponseProto>()._has_bits_);
  static void set_has_bsize(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetPreferredBlockSizeResponseProto::GetPreferredBlockSizeResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
}
GetPreferredBlockSizeResponseProto::GetPreferredBlockSizeResponseProto(
    const GetPreferredBlockSizeResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bsize_ = from.bsize_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
}

void GetPreferredBlockSizeResponseProto::SharedCtor() {
  bsize_ = PROTOBUF_ULONGLONG(0);
}

GetPreferredBlockSizeResponseProto::~GetPreferredBlockSizeResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  SharedDtor();
}

void GetPreferredBlockSizeResponseProto::SharedDtor() {}

void GetPreferredBlockSizeResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPreferredBlockSizeResponseProto&
GetPreferredBlockSizeResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetPreferredBlockSizeResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetPreferredBlockSizeResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  bsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPreferredBlockSizeResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 bsize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bsize(&has_bits);
          bsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetPreferredBlockSizeResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 bsize = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            1, this->_internal_bsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  return target;
}

size_t GetPreferredBlockSizeResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  size_t total_size = 0;

  // required uint64 bsize = 1;
  if (_internal_has_bsize()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_bsize());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPreferredBlockSizeResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPreferredBlockSizeResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetPreferredBlockSizeResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
    MergeFrom(*source);
  }
}

void GetPreferredBlockSizeResponseProto::MergeFrom(
    const GetPreferredBlockSizeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_bsize()) {
    _internal_set_bsize(from._internal_bsize());
  }
}

void GetPreferredBlockSizeResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPreferredBlockSizeResponseProto::CopyFrom(
    const GetPreferredBlockSizeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPreferredBlockSizeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetPreferredBlockSizeResponseProto::InternalSwap(
    GetPreferredBlockSizeResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bsize_, other->bsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetPreferredBlockSizeResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetSafeModeRequestProto::InitAsDefaultInstance() {}
class SetSafeModeRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSafeModeRequestProto>()._has_bits_);
  static void set_has_action(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_checked(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

SetSafeModeRequestProto::SetSafeModeRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetSafeModeRequestProto)
}
SetSafeModeRequestProto::SetSafeModeRequestProto(
    const SetSafeModeRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&checked_, &from.checked_,
           static_cast<size_t>(reinterpret_cast<char*>(&action_) -
                               reinterpret_cast<char*>(&checked_)) +
               sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetSafeModeRequestProto)
}

void SetSafeModeRequestProto::SharedCtor() {
  checked_ = false;
  action_ = 1;
}

SetSafeModeRequestProto::~SetSafeModeRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetSafeModeRequestProto)
  SharedDtor();
}

void SetSafeModeRequestProto::SharedDtor() {}

void SetSafeModeRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafeModeRequestProto& SetSafeModeRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetSafeModeRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetSafeModeRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetSafeModeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    checked_ = false;
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetSafeModeRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.SafeModeActionProto action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(
                  ::Hdfs::Internal::SafeModeActionProto_IsValid(val))) {
            _internal_set_action(
                static_cast<::Hdfs::Internal::SafeModeActionProto>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(
                1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool checked = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_checked(&has_bits);
          checked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafeModeRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetSafeModeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            1, this->_internal_action(), target);
  }

  // optional bool checked = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            2, this->_internal_checked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetSafeModeRequestProto)
  return target;
}

size_t SetSafeModeRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetSafeModeRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  if (_internal_has_action()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->_internal_action());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional bool checked = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafeModeRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetSafeModeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafeModeRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafeModeRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetSafeModeRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetSafeModeRequestProto)
    MergeFrom(*source);
  }
}

void SetSafeModeRequestProto::MergeFrom(const SetSafeModeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetSafeModeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      checked_ = from.checked_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetSafeModeRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetSafeModeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafeModeRequestProto::CopyFrom(const SetSafeModeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetSafeModeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafeModeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SetSafeModeRequestProto::InternalSwap(SetSafeModeRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(checked_, other->checked_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafeModeRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetSafeModeResponseProto::InitAsDefaultInstance() {}
class SetSafeModeResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSafeModeResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

SetSafeModeResponseProto::SetSafeModeResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetSafeModeResponseProto)
}
SetSafeModeResponseProto::SetSafeModeResponseProto(
    const SetSafeModeResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetSafeModeResponseProto)
}

void SetSafeModeResponseProto::SharedCtor() { result_ = false; }

SetSafeModeResponseProto::~SetSafeModeResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetSafeModeResponseProto)
  SharedDtor();
}

void SetSafeModeResponseProto::SharedDtor() {}

void SetSafeModeResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafeModeResponseProto& SetSafeModeResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetSafeModeResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetSafeModeResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetSafeModeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetSafeModeResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafeModeResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetSafeModeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetSafeModeResponseProto)
  return target;
}

size_t SetSafeModeResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetSafeModeResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafeModeResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetSafeModeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafeModeResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafeModeResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetSafeModeResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetSafeModeResponseProto)
    MergeFrom(*source);
  }
}

void SetSafeModeResponseProto::MergeFrom(const SetSafeModeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetSafeModeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void SetSafeModeResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetSafeModeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafeModeResponseProto::CopyFrom(const SetSafeModeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetSafeModeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafeModeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SetSafeModeResponseProto::InternalSwap(SetSafeModeResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafeModeResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SaveNamespaceRequestProto::InitAsDefaultInstance() {}
class SaveNamespaceRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SaveNamespaceRequestProto>()._has_bits_);
};

SaveNamespaceRequestProto::SaveNamespaceRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SaveNamespaceRequestProto)
}
SaveNamespaceRequestProto::SaveNamespaceRequestProto(
    const SaveNamespaceRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SaveNamespaceRequestProto)
}

void SaveNamespaceRequestProto::SharedCtor() {}

SaveNamespaceRequestProto::~SaveNamespaceRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SaveNamespaceRequestProto)
  SharedDtor();
}

void SaveNamespaceRequestProto::SharedDtor() {}

void SaveNamespaceRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveNamespaceRequestProto& SaveNamespaceRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SaveNamespaceRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SaveNamespaceRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SaveNamespaceRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SaveNamespaceRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveNamespaceRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SaveNamespaceRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SaveNamespaceRequestProto)
  return target;
}

size_t SaveNamespaceRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SaveNamespaceRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveNamespaceRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SaveNamespaceRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveNamespaceRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SaveNamespaceRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SaveNamespaceRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SaveNamespaceRequestProto)
    MergeFrom(*source);
  }
}

void SaveNamespaceRequestProto::MergeFrom(
    const SaveNamespaceRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SaveNamespaceRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SaveNamespaceRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SaveNamespaceRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveNamespaceRequestProto::CopyFrom(
    const SaveNamespaceRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SaveNamespaceRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveNamespaceRequestProto::IsInitialized() const { return true; }

void SaveNamespaceRequestProto::InternalSwap(SaveNamespaceRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveNamespaceRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SaveNamespaceResponseProto::InitAsDefaultInstance() {}
class SaveNamespaceResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SaveNamespaceResponseProto>()._has_bits_);
};

SaveNamespaceResponseProto::SaveNamespaceResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SaveNamespaceResponseProto)
}
SaveNamespaceResponseProto::SaveNamespaceResponseProto(
    const SaveNamespaceResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SaveNamespaceResponseProto)
}

void SaveNamespaceResponseProto::SharedCtor() {}

SaveNamespaceResponseProto::~SaveNamespaceResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SaveNamespaceResponseProto)
  SharedDtor();
}

void SaveNamespaceResponseProto::SharedDtor() {}

void SaveNamespaceResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveNamespaceResponseProto&
SaveNamespaceResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SaveNamespaceResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SaveNamespaceResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SaveNamespaceResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SaveNamespaceResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveNamespaceResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SaveNamespaceResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SaveNamespaceResponseProto)
  return target;
}

size_t SaveNamespaceResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SaveNamespaceResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveNamespaceResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SaveNamespaceResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveNamespaceResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SaveNamespaceResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SaveNamespaceResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SaveNamespaceResponseProto)
    MergeFrom(*source);
  }
}

void SaveNamespaceResponseProto::MergeFrom(
    const SaveNamespaceResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SaveNamespaceResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SaveNamespaceResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SaveNamespaceResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveNamespaceResponseProto::CopyFrom(
    const SaveNamespaceResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SaveNamespaceResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveNamespaceResponseProto::IsInitialized() const { return true; }

void SaveNamespaceResponseProto::InternalSwap(
    SaveNamespaceResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveNamespaceResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RollEditsRequestProto::InitAsDefaultInstance() {}
class RollEditsRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RollEditsRequestProto>()._has_bits_);
};

RollEditsRequestProto::RollEditsRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RollEditsRequestProto)
}
RollEditsRequestProto::RollEditsRequestProto(const RollEditsRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RollEditsRequestProto)
}

void RollEditsRequestProto::SharedCtor() {}

RollEditsRequestProto::~RollEditsRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RollEditsRequestProto)
  SharedDtor();
}

void RollEditsRequestProto::SharedDtor() {}

void RollEditsRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollEditsRequestProto& RollEditsRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RollEditsRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RollEditsRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RollEditsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RollEditsRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RollEditsRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RollEditsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RollEditsRequestProto)
  return target;
}

size_t RollEditsRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RollEditsRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollEditsRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RollEditsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RollEditsRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RollEditsRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RollEditsRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RollEditsRequestProto)
    MergeFrom(*source);
  }
}

void RollEditsRequestProto::MergeFrom(const RollEditsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RollEditsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RollEditsRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RollEditsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollEditsRequestProto::CopyFrom(const RollEditsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RollEditsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollEditsRequestProto::IsInitialized() const { return true; }

void RollEditsRequestProto::InternalSwap(RollEditsRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RollEditsRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RollEditsResponseProto::InitAsDefaultInstance() {}
class RollEditsResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RollEditsResponseProto>()._has_bits_);
  static void set_has_newsegmenttxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RollEditsResponseProto::RollEditsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RollEditsResponseProto)
}
RollEditsResponseProto::RollEditsResponseProto(
    const RollEditsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newsegmenttxid_ = from.newsegmenttxid_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RollEditsResponseProto)
}

void RollEditsResponseProto::SharedCtor() {
  newsegmenttxid_ = PROTOBUF_ULONGLONG(0);
}

RollEditsResponseProto::~RollEditsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RollEditsResponseProto)
  SharedDtor();
}

void RollEditsResponseProto::SharedDtor() {}

void RollEditsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollEditsResponseProto& RollEditsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RollEditsResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RollEditsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RollEditsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  newsegmenttxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RollEditsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 newSegmentTxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_newsegmenttxid(&has_bits);
          newsegmenttxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RollEditsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RollEditsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 newSegmentTxId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            1, this->_internal_newsegmenttxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RollEditsResponseProto)
  return target;
}

size_t RollEditsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RollEditsResponseProto)
  size_t total_size = 0;

  // required uint64 newSegmentTxId = 1;
  if (_internal_has_newsegmenttxid()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_newsegmenttxid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollEditsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RollEditsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RollEditsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RollEditsResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RollEditsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RollEditsResponseProto)
    MergeFrom(*source);
  }
}

void RollEditsResponseProto::MergeFrom(const RollEditsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RollEditsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_newsegmenttxid()) {
    _internal_set_newsegmenttxid(from._internal_newsegmenttxid());
  }
}

void RollEditsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RollEditsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollEditsResponseProto::CopyFrom(const RollEditsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RollEditsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollEditsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RollEditsResponseProto::InternalSwap(RollEditsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(newsegmenttxid_, other->newsegmenttxid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RollEditsResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RestoreFailedStorageRequestProto::InitAsDefaultInstance() {}
class RestoreFailedStorageRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RestoreFailedStorageRequestProto>()._has_bits_);
  static void set_has_arg(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RestoreFailedStorageRequestProto::RestoreFailedStorageRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RestoreFailedStorageRequestProto)
}
RestoreFailedStorageRequestProto::RestoreFailedStorageRequestProto(
    const RestoreFailedStorageRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_arg()) {
    arg_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.arg_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RestoreFailedStorageRequestProto)
}

void RestoreFailedStorageRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  arg_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreFailedStorageRequestProto::~RestoreFailedStorageRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RestoreFailedStorageRequestProto)
  SharedDtor();
}

void RestoreFailedStorageRequestProto::SharedDtor() {
  arg_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreFailedStorageRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreFailedStorageRequestProto&
RestoreFailedStorageRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RestoreFailedStorageRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RestoreFailedStorageRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    arg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RestoreFailedStorageRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_arg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RestoreFailedStorageRequestProto.arg");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
RestoreFailedStorageRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string arg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_arg().data(),
        static_cast<int>(this->_internal_arg().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RestoreFailedStorageRequestProto.arg");
    target = stream->WriteStringMaybeAliased(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RestoreFailedStorageRequestProto)
  return target;
}

size_t RestoreFailedStorageRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  size_t total_size = 0;

  // required string arg = 1;
  if (_internal_has_arg()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_arg());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreFailedStorageRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFailedStorageRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RestoreFailedStorageRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RestoreFailedStorageRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RestoreFailedStorageRequestProto)
    MergeFrom(*source);
  }
}

void RestoreFailedStorageRequestProto::MergeFrom(
    const RestoreFailedStorageRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_arg()) {
    _has_bits_[0] |= 0x00000001u;
    arg_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.arg_);
  }
}

void RestoreFailedStorageRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFailedStorageRequestProto::CopyFrom(
    const RestoreFailedStorageRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RestoreFailedStorageRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFailedStorageRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RestoreFailedStorageRequestProto::InternalSwap(
    RestoreFailedStorageRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arg_.Swap(&other->arg_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata
RestoreFailedStorageRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RestoreFailedStorageResponseProto::InitAsDefaultInstance() {}
class RestoreFailedStorageResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RestoreFailedStorageResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RestoreFailedStorageResponseProto::RestoreFailedStorageResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RestoreFailedStorageResponseProto)
}
RestoreFailedStorageResponseProto::RestoreFailedStorageResponseProto(
    const RestoreFailedStorageResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RestoreFailedStorageResponseProto)
}

void RestoreFailedStorageResponseProto::SharedCtor() { result_ = false; }

RestoreFailedStorageResponseProto::~RestoreFailedStorageResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RestoreFailedStorageResponseProto)
  SharedDtor();
}

void RestoreFailedStorageResponseProto::SharedDtor() {}

void RestoreFailedStorageResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreFailedStorageResponseProto&
RestoreFailedStorageResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RestoreFailedStorageResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RestoreFailedStorageResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RestoreFailedStorageResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
RestoreFailedStorageResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RestoreFailedStorageResponseProto)
  return target;
}

size_t RestoreFailedStorageResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreFailedStorageResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFailedStorageResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RestoreFailedStorageResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RestoreFailedStorageResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RestoreFailedStorageResponseProto)
    MergeFrom(*source);
  }
}

void RestoreFailedStorageResponseProto::MergeFrom(
    const RestoreFailedStorageResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void RestoreFailedStorageResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFailedStorageResponseProto::CopyFrom(
    const RestoreFailedStorageResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RestoreFailedStorageResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFailedStorageResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RestoreFailedStorageResponseProto::InternalSwap(
    RestoreFailedStorageResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
RestoreFailedStorageResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RefreshNodesRequestProto::InitAsDefaultInstance() {}
class RefreshNodesRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RefreshNodesRequestProto>()._has_bits_);
};

RefreshNodesRequestProto::RefreshNodesRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RefreshNodesRequestProto)
}
RefreshNodesRequestProto::RefreshNodesRequestProto(
    const RefreshNodesRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RefreshNodesRequestProto)
}

void RefreshNodesRequestProto::SharedCtor() {}

RefreshNodesRequestProto::~RefreshNodesRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RefreshNodesRequestProto)
  SharedDtor();
}

void RefreshNodesRequestProto::SharedDtor() {}

void RefreshNodesRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshNodesRequestProto& RefreshNodesRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RefreshNodesRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void RefreshNodesRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RefreshNodesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RefreshNodesRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshNodesRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RefreshNodesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RefreshNodesRequestProto)
  return target;
}

size_t RefreshNodesRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RefreshNodesRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshNodesRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RefreshNodesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshNodesRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshNodesRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RefreshNodesRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RefreshNodesRequestProto)
    MergeFrom(*source);
  }
}

void RefreshNodesRequestProto::MergeFrom(const RefreshNodesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RefreshNodesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RefreshNodesRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RefreshNodesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshNodesRequestProto::CopyFrom(const RefreshNodesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RefreshNodesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshNodesRequestProto::IsInitialized() const { return true; }

void RefreshNodesRequestProto::InternalSwap(RefreshNodesRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshNodesRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RefreshNodesResponseProto::InitAsDefaultInstance() {}
class RefreshNodesResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RefreshNodesResponseProto>()._has_bits_);
};

RefreshNodesResponseProto::RefreshNodesResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RefreshNodesResponseProto)
}
RefreshNodesResponseProto::RefreshNodesResponseProto(
    const RefreshNodesResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RefreshNodesResponseProto)
}

void RefreshNodesResponseProto::SharedCtor() {}

RefreshNodesResponseProto::~RefreshNodesResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RefreshNodesResponseProto)
  SharedDtor();
}

void RefreshNodesResponseProto::SharedDtor() {}

void RefreshNodesResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshNodesResponseProto& RefreshNodesResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RefreshNodesResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RefreshNodesResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RefreshNodesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RefreshNodesResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshNodesResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RefreshNodesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RefreshNodesResponseProto)
  return target;
}

size_t RefreshNodesResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RefreshNodesResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshNodesResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RefreshNodesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshNodesResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RefreshNodesResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RefreshNodesResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RefreshNodesResponseProto)
    MergeFrom(*source);
  }
}

void RefreshNodesResponseProto::MergeFrom(
    const RefreshNodesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RefreshNodesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RefreshNodesResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RefreshNodesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshNodesResponseProto::CopyFrom(
    const RefreshNodesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RefreshNodesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshNodesResponseProto::IsInitialized() const { return true; }

void RefreshNodesResponseProto::InternalSwap(RefreshNodesResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshNodesResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void FinalizeUpgradeRequestProto::InitAsDefaultInstance() {}
class FinalizeUpgradeRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FinalizeUpgradeRequestProto>()._has_bits_);
};

FinalizeUpgradeRequestProto::FinalizeUpgradeRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.FinalizeUpgradeRequestProto)
}
FinalizeUpgradeRequestProto::FinalizeUpgradeRequestProto(
    const FinalizeUpgradeRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.FinalizeUpgradeRequestProto)
}

void FinalizeUpgradeRequestProto::SharedCtor() {}

FinalizeUpgradeRequestProto::~FinalizeUpgradeRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.FinalizeUpgradeRequestProto)
  SharedDtor();
}

void FinalizeUpgradeRequestProto::SharedDtor() {}

void FinalizeUpgradeRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeUpgradeRequestProto&
FinalizeUpgradeRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FinalizeUpgradeRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void FinalizeUpgradeRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FinalizeUpgradeRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeUpgradeRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.FinalizeUpgradeRequestProto)
  return target;
}

size_t FinalizeUpgradeRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeUpgradeRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeUpgradeRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          FinalizeUpgradeRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.FinalizeUpgradeRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.FinalizeUpgradeRequestProto)
    MergeFrom(*source);
  }
}

void FinalizeUpgradeRequestProto::MergeFrom(
    const FinalizeUpgradeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void FinalizeUpgradeRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeUpgradeRequestProto::CopyFrom(
    const FinalizeUpgradeRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.FinalizeUpgradeRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeUpgradeRequestProto::IsInitialized() const { return true; }

void FinalizeUpgradeRequestProto::InternalSwap(
    FinalizeUpgradeRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeUpgradeRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void FinalizeUpgradeResponseProto::InitAsDefaultInstance() {}
class FinalizeUpgradeResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FinalizeUpgradeResponseProto>()._has_bits_);
};

FinalizeUpgradeResponseProto::FinalizeUpgradeResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.FinalizeUpgradeResponseProto)
}
FinalizeUpgradeResponseProto::FinalizeUpgradeResponseProto(
    const FinalizeUpgradeResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.FinalizeUpgradeResponseProto)
}

void FinalizeUpgradeResponseProto::SharedCtor() {}

FinalizeUpgradeResponseProto::~FinalizeUpgradeResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.FinalizeUpgradeResponseProto)
  SharedDtor();
}

void FinalizeUpgradeResponseProto::SharedDtor() {}

void FinalizeUpgradeResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeUpgradeResponseProto&
FinalizeUpgradeResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FinalizeUpgradeResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void FinalizeUpgradeResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FinalizeUpgradeResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
FinalizeUpgradeResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.FinalizeUpgradeResponseProto)
  return target;
}

size_t FinalizeUpgradeResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeUpgradeResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeUpgradeResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          FinalizeUpgradeResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.FinalizeUpgradeResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.FinalizeUpgradeResponseProto)
    MergeFrom(*source);
  }
}

void FinalizeUpgradeResponseProto::MergeFrom(
    const FinalizeUpgradeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void FinalizeUpgradeResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeUpgradeResponseProto::CopyFrom(
    const FinalizeUpgradeResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.FinalizeUpgradeResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeUpgradeResponseProto::IsInitialized() const { return true; }

void FinalizeUpgradeResponseProto::InternalSwap(
    FinalizeUpgradeResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeUpgradeResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCorruptFileBlocksRequestProto::InitAsDefaultInstance() {}
class ListCorruptFileBlocksRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCorruptFileBlocksRequestProto>()._has_bits_);
  static void set_has_path(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_cookie(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

ListCorruptFileBlocksRequestProto::ListCorruptFileBlocksRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
}
ListCorruptFileBlocksRequestProto::ListCorruptFileBlocksRequestProto(
    const ListCorruptFileBlocksRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  cookie_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cookie()) {
    cookie_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.cookie_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
}

void ListCorruptFileBlocksRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cookie_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListCorruptFileBlocksRequestProto::~ListCorruptFileBlocksRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  SharedDtor();
}

void ListCorruptFileBlocksRequestProto::SharedDtor() {
  path_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cookie_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListCorruptFileBlocksRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCorruptFileBlocksRequestProto&
ListCorruptFileBlocksRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCorruptFileBlocksRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCorruptFileBlocksRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCorruptFileBlocksRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ListCorruptFileBlocksRequestProto.path");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cookie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ListCorruptFileBlocksRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_path().data(),
        static_cast<int>(this->_internal_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ListCorruptFileBlocksRequestProto.path");
    target = stream->WriteStringMaybeAliased(1, this->_internal_path(), target);
  }

  // optional string cookie = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_cookie().data(),
        static_cast<int>(this->_internal_cookie().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie");
    target =
        stream->WriteStringMaybeAliased(2, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  return target;
}

size_t ListCorruptFileBlocksRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  size_t total_size = 0;

  // required string path = 1;
  if (_internal_has_path()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_path());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional string cookie = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_cookie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCorruptFileBlocksRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCorruptFileBlocksRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCorruptFileBlocksRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
    MergeFrom(*source);
  }
}

void ListCorruptFileBlocksRequestProto::MergeFrom(
    const ListCorruptFileBlocksRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cookie_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.cookie_);
    }
  }
}

void ListCorruptFileBlocksRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCorruptFileBlocksRequestProto::CopyFrom(
    const ListCorruptFileBlocksRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCorruptFileBlocksRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ListCorruptFileBlocksRequestProto::InternalSwap(
    ListCorruptFileBlocksRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  cookie_.Swap(
      &other->cookie_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata
ListCorruptFileBlocksRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCorruptFileBlocksResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_ListCorruptFileBlocksResponseProto_default_instance_
      ._instance.get_mutable()
      ->corrupt_ = const_cast<::Hdfs::Internal::CorruptFileBlocksProto*>(
      ::Hdfs::Internal::CorruptFileBlocksProto::internal_default_instance());
}
class ListCorruptFileBlocksResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCorruptFileBlocksResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::CorruptFileBlocksProto& corrupt(
      const ListCorruptFileBlocksResponseProto* msg);
  static void set_has_corrupt(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::CorruptFileBlocksProto&
ListCorruptFileBlocksResponseProto::_Internal::corrupt(
    const ListCorruptFileBlocksResponseProto* msg) {
  return *msg->corrupt_;
}
void ListCorruptFileBlocksResponseProto::clear_corrupt() {
  if (corrupt_ != nullptr) corrupt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ListCorruptFileBlocksResponseProto::ListCorruptFileBlocksResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
}
ListCorruptFileBlocksResponseProto::ListCorruptFileBlocksResponseProto(
    const ListCorruptFileBlocksResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_corrupt()) {
    corrupt_ = new ::Hdfs::Internal::CorruptFileBlocksProto(*from.corrupt_);
  } else {
    corrupt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
}

void ListCorruptFileBlocksResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  corrupt_ = nullptr;
}

ListCorruptFileBlocksResponseProto::~ListCorruptFileBlocksResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  SharedDtor();
}

void ListCorruptFileBlocksResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete corrupt_;
}

void ListCorruptFileBlocksResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCorruptFileBlocksResponseProto&
ListCorruptFileBlocksResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCorruptFileBlocksResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCorruptFileBlocksResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(corrupt_ != nullptr);
    corrupt_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCorruptFileBlocksResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_corrupt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ListCorruptFileBlocksResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::corrupt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  return target;
}

size_t ListCorruptFileBlocksResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  if (_internal_has_corrupt()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *corrupt_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCorruptFileBlocksResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCorruptFileBlocksResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCorruptFileBlocksResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
    MergeFrom(*source);
  }
}

void ListCorruptFileBlocksResponseProto::MergeFrom(
    const ListCorruptFileBlocksResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_corrupt()) {
    _internal_mutable_corrupt()
        ->::Hdfs::Internal::CorruptFileBlocksProto::MergeFrom(
            from._internal_corrupt());
  }
}

void ListCorruptFileBlocksResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCorruptFileBlocksResponseProto::CopyFrom(
    const ListCorruptFileBlocksResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCorruptFileBlocksResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_corrupt()) {
    if (!corrupt_->IsInitialized()) return false;
  }
  return true;
}

void ListCorruptFileBlocksResponseProto::InternalSwap(
    ListCorruptFileBlocksResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(corrupt_, other->corrupt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
ListCorruptFileBlocksResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MetaSaveRequestProto::InitAsDefaultInstance() {}
class MetaSaveRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaSaveRequestProto>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

MetaSaveRequestProto::MetaSaveRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.MetaSaveRequestProto)
}
MetaSaveRequestProto::MetaSaveRequestProto(const MetaSaveRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.MetaSaveRequestProto)
}

void MetaSaveRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto.base);
  filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MetaSaveRequestProto::~MetaSaveRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.MetaSaveRequestProto)
  SharedDtor();
}

void MetaSaveRequestProto::SharedDtor() {
  filename_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetaSaveRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaSaveRequestProto& MetaSaveRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MetaSaveRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void MetaSaveRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.MetaSaveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaSaveRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.MetaSaveRequestProto.filename");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaSaveRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.MetaSaveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_filename().data(),
        static_cast<int>(this->_internal_filename().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.MetaSaveRequestProto.filename");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.MetaSaveRequestProto)
  return target;
}

size_t MetaSaveRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.MetaSaveRequestProto)
  size_t total_size = 0;

  // required string filename = 1;
  if (_internal_has_filename()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_filename());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaSaveRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.MetaSaveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaSaveRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaSaveRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.MetaSaveRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.MetaSaveRequestProto)
    MergeFrom(*source);
  }
}

void MetaSaveRequestProto::MergeFrom(const MetaSaveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.MetaSaveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_filename()) {
    _has_bits_[0] |= 0x00000001u;
    filename_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.filename_);
  }
}

void MetaSaveRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.MetaSaveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaSaveRequestProto::CopyFrom(const MetaSaveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.MetaSaveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaSaveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MetaSaveRequestProto::InternalSwap(MetaSaveRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(
      &other->filename_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaSaveRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MetaSaveResponseProto::InitAsDefaultInstance() {}
class MetaSaveResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaSaveResponseProto>()._has_bits_);
};

MetaSaveResponseProto::MetaSaveResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.MetaSaveResponseProto)
}
MetaSaveResponseProto::MetaSaveResponseProto(const MetaSaveResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.MetaSaveResponseProto)
}

void MetaSaveResponseProto::SharedCtor() {}

MetaSaveResponseProto::~MetaSaveResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.MetaSaveResponseProto)
  SharedDtor();
}

void MetaSaveResponseProto::SharedDtor() {}

void MetaSaveResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaSaveResponseProto& MetaSaveResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MetaSaveResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void MetaSaveResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.MetaSaveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaSaveResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaSaveResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.MetaSaveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.MetaSaveResponseProto)
  return target;
}

size_t MetaSaveResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.MetaSaveResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaSaveResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.MetaSaveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaSaveResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaSaveResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.MetaSaveResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.MetaSaveResponseProto)
    MergeFrom(*source);
  }
}

void MetaSaveResponseProto::MergeFrom(const MetaSaveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.MetaSaveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void MetaSaveResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.MetaSaveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaSaveResponseProto::CopyFrom(const MetaSaveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.MetaSaveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaSaveResponseProto::IsInitialized() const { return true; }

void MetaSaveResponseProto::InternalSwap(MetaSaveResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaSaveResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFileInfoRequestProto::InitAsDefaultInstance() {}
class GetFileInfoRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileInfoRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetFileInfoRequestProto::GetFileInfoRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFileInfoRequestProto)
}
GetFileInfoRequestProto::GetFileInfoRequestProto(
    const GetFileInfoRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFileInfoRequestProto)
}

void GetFileInfoRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileInfoRequestProto::~GetFileInfoRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFileInfoRequestProto)
  SharedDtor();
}

void GetFileInfoRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileInfoRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileInfoRequestProto& GetFileInfoRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFileInfoRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetFileInfoRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFileInfoRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFileInfoRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetFileInfoRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileInfoRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFileInfoRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetFileInfoRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFileInfoRequestProto)
  return target;
}

size_t GetFileInfoRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFileInfoRequestProto)
  size_t total_size = 0;

  // required string src = 1;
  if (_internal_has_src()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileInfoRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFileInfoRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileInfoRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileInfoRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFileInfoRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFileInfoRequestProto)
    MergeFrom(*source);
  }
}

void GetFileInfoRequestProto::MergeFrom(const GetFileInfoRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFileInfoRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_src()) {
    _has_bits_[0] |= 0x00000001u;
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
}

void GetFileInfoRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFileInfoRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileInfoRequestProto::CopyFrom(const GetFileInfoRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFileInfoRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetFileInfoRequestProto::InternalSwap(GetFileInfoRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileInfoRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFileInfoResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetFileInfoResponseProto_default_instance_._instance
      .get_mutable()
      ->fs_ = const_cast<::Hdfs::Internal::HdfsFileStatusProto*>(
      ::Hdfs::Internal::HdfsFileStatusProto::internal_default_instance());
}
class GetFileInfoResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileInfoResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::HdfsFileStatusProto& fs(
      const GetFileInfoResponseProto* msg);
  static void set_has_fs(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::HdfsFileStatusProto&
GetFileInfoResponseProto::_Internal::fs(const GetFileInfoResponseProto* msg) {
  return *msg->fs_;
}
void GetFileInfoResponseProto::clear_fs() {
  if (fs_ != nullptr) fs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetFileInfoResponseProto::GetFileInfoResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFileInfoResponseProto)
}
GetFileInfoResponseProto::GetFileInfoResponseProto(
    const GetFileInfoResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fs()) {
    fs_ = new ::Hdfs::Internal::HdfsFileStatusProto(*from.fs_);
  } else {
    fs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFileInfoResponseProto)
}

void GetFileInfoResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto.base);
  fs_ = nullptr;
}

GetFileInfoResponseProto::~GetFileInfoResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFileInfoResponseProto)
  SharedDtor();
}

void GetFileInfoResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete fs_;
}

void GetFileInfoResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileInfoResponseProto& GetFileInfoResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFileInfoResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void GetFileInfoResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFileInfoResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fs_ != nullptr);
    fs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFileInfoResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileInfoResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFileInfoResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::fs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFileInfoResponseProto)
  return target;
}

size_t GetFileInfoResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFileInfoResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*fs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileInfoResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFileInfoResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileInfoResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileInfoResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFileInfoResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFileInfoResponseProto)
    MergeFrom(*source);
  }
}

void GetFileInfoResponseProto::MergeFrom(const GetFileInfoResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFileInfoResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_fs()) {
    _internal_mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(
        from._internal_fs());
  }
}

void GetFileInfoResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFileInfoResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileInfoResponseProto::CopyFrom(const GetFileInfoResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFileInfoResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoResponseProto::IsInitialized() const {
  if (_internal_has_fs()) {
    if (!fs_->IsInitialized()) return false;
  }
  return true;
}

void GetFileInfoResponseProto::InternalSwap(GetFileInfoResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fs_, other->fs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileInfoResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void IsFileClosedRequestProto::InitAsDefaultInstance() {}
class IsFileClosedRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IsFileClosedRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

IsFileClosedRequestProto::IsFileClosedRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.IsFileClosedRequestProto)
}
IsFileClosedRequestProto::IsFileClosedRequestProto(
    const IsFileClosedRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.IsFileClosedRequestProto)
}

void IsFileClosedRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IsFileClosedRequestProto::~IsFileClosedRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.IsFileClosedRequestProto)
  SharedDtor();
}

void IsFileClosedRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsFileClosedRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsFileClosedRequestProto& IsFileClosedRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_IsFileClosedRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void IsFileClosedRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.IsFileClosedRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IsFileClosedRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.IsFileClosedRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsFileClosedRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.IsFileClosedRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.IsFileClosedRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.IsFileClosedRequestProto)
  return target;
}

size_t IsFileClosedRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.IsFileClosedRequestProto)
  size_t total_size = 0;

  // required string src = 1;
  if (_internal_has_src()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsFileClosedRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.IsFileClosedRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IsFileClosedRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsFileClosedRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.IsFileClosedRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.IsFileClosedRequestProto)
    MergeFrom(*source);
  }
}

void IsFileClosedRequestProto::MergeFrom(const IsFileClosedRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.IsFileClosedRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_src()) {
    _has_bits_[0] |= 0x00000001u;
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
}

void IsFileClosedRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.IsFileClosedRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsFileClosedRequestProto::CopyFrom(const IsFileClosedRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.IsFileClosedRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsFileClosedRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void IsFileClosedRequestProto::InternalSwap(IsFileClosedRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IsFileClosedRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void IsFileClosedResponseProto::InitAsDefaultInstance() {}
class IsFileClosedResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IsFileClosedResponseProto>()._has_bits_);
  static void set_has_result(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

IsFileClosedResponseProto::IsFileClosedResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.IsFileClosedResponseProto)
}
IsFileClosedResponseProto::IsFileClosedResponseProto(
    const IsFileClosedResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.IsFileClosedResponseProto)
}

void IsFileClosedResponseProto::SharedCtor() { result_ = false; }

IsFileClosedResponseProto::~IsFileClosedResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.IsFileClosedResponseProto)
  SharedDtor();
}

void IsFileClosedResponseProto::SharedDtor() {}

void IsFileClosedResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsFileClosedResponseProto& IsFileClosedResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_IsFileClosedResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void IsFileClosedResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.IsFileClosedResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IsFileClosedResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsFileClosedResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.IsFileClosedResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.IsFileClosedResponseProto)
  return target;
}

size_t IsFileClosedResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.IsFileClosedResponseProto)
  size_t total_size = 0;

  // required bool result = 1;
  if (_internal_has_result()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsFileClosedResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.IsFileClosedResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IsFileClosedResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          IsFileClosedResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.IsFileClosedResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.IsFileClosedResponseProto)
    MergeFrom(*source);
  }
}

void IsFileClosedResponseProto::MergeFrom(
    const IsFileClosedResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.IsFileClosedResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void IsFileClosedResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.IsFileClosedResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsFileClosedResponseProto::CopyFrom(
    const IsFileClosedResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.IsFileClosedResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsFileClosedResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void IsFileClosedResponseProto::InternalSwap(IsFileClosedResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsFileClosedResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CacheDirectiveInfoProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_._instance
      .get_mutable()
      ->expiration_ =
      const_cast<::Hdfs::Internal::CacheDirectiveInfoExpirationProto*>(
          ::Hdfs::Internal::CacheDirectiveInfoExpirationProto::
              internal_default_instance());
}
class CacheDirectiveInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheDirectiveInfoProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
  static void set_has_path(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_replication(HasBits* has_bits) { (*has_bits)[0] |= 16u; }
  static void set_has_pool(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& expiration(
      const CacheDirectiveInfoProto* msg);
  static void set_has_expiration(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto&
CacheDirectiveInfoProto::_Internal::expiration(
    const CacheDirectiveInfoProto* msg) {
  return *msg->expiration_;
}
CacheDirectiveInfoProto::CacheDirectiveInfoProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CacheDirectiveInfoProto)
}
CacheDirectiveInfoProto::CacheDirectiveInfoProto(
    const CacheDirectiveInfoProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  pool_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pool()) {
    pool_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.pool_);
  }
  if (from._internal_has_expiration()) {
    expiration_ = new ::Hdfs::Internal::CacheDirectiveInfoExpirationProto(
        *from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
           static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(replication_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CacheDirectiveInfoProto)
}

void CacheDirectiveInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto.base);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiration_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                               reinterpret_cast<char*>(&expiration_)) +
               sizeof(replication_));
}

CacheDirectiveInfoProto::~CacheDirectiveInfoProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CacheDirectiveInfoProto)
  SharedDtor();
}

void CacheDirectiveInfoProto::SharedDtor() {
  path_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiration_;
}

void CacheDirectiveInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheDirectiveInfoProto& CacheDirectiveInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CacheDirectiveInfoProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CacheDirectiveInfoProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CacheDirectiveInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pool_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(expiration_ != nullptr);
      expiration_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&id_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&replication_) -
                                 reinterpret_cast<char*>(&id_)) +
                 sizeof(replication_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CacheDirectiveInfoProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CacheDirectiveInfoProto.path");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 replication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_replication(&has_bits);
          replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CacheDirectiveInfoProto.pool");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration =
      // 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheDirectiveInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CacheDirectiveInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_id(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_path().data(),
        static_cast<int>(this->_internal_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CacheDirectiveInfoProto.path");
    target = stream->WriteStringMaybeAliased(2, this->_internal_path(), target);
  }

  // optional uint32 replication = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            3, this->_internal_replication(), target);
  }

  // optional string pool = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_pool().data(),
        static_cast<int>(this->_internal_pool().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CacheDirectiveInfoProto.pool");
    target = stream->WriteStringMaybeAliased(4, this->_internal_pool(), target);
  }

  // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            5, _Internal::expiration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CacheDirectiveInfoProto)
  return target;
}

size_t CacheDirectiveInfoProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CacheDirectiveInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_path());
    }

    // optional string pool = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_pool());
    }

    // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *expiration_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                  this->_internal_id());
    }

    // optional uint32 replication = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                  this->_internal_replication());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheDirectiveInfoProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CacheDirectiveInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheDirectiveInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheDirectiveInfoProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CacheDirectiveInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CacheDirectiveInfoProto)
    MergeFrom(*source);
  }
}

void CacheDirectiveInfoProto::MergeFrom(const CacheDirectiveInfoProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CacheDirectiveInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pool_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.pool_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_expiration()
          ->::Hdfs::Internal::CacheDirectiveInfoExpirationProto::MergeFrom(
              from._internal_expiration());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      replication_ = from.replication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CacheDirectiveInfoProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CacheDirectiveInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveInfoProto::CopyFrom(const CacheDirectiveInfoProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CacheDirectiveInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveInfoProto::IsInitialized() const {
  if (_internal_has_expiration()) {
    if (!expiration_->IsInitialized()) return false;
  }
  return true;
}

void CacheDirectiveInfoProto::InternalSwap(CacheDirectiveInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  pool_.Swap(&other->pool_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  swap(expiration_, other->expiration_);
  swap(id_, other->id_);
  swap(replication_, other->replication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheDirectiveInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CacheDirectiveInfoExpirationProto::InitAsDefaultInstance() {}
class CacheDirectiveInfoExpirationProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CacheDirectiveInfoExpirationProto>()._has_bits_);
  static void set_has_millis(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_isrelative(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

CacheDirectiveInfoExpirationProto::CacheDirectiveInfoExpirationProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
}
CacheDirectiveInfoExpirationProto::CacheDirectiveInfoExpirationProto(
    const CacheDirectiveInfoExpirationProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&millis_, &from.millis_,
           static_cast<size_t>(reinterpret_cast<char*>(&isrelative_) -
                               reinterpret_cast<char*>(&millis_)) +
               sizeof(isrelative_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
}

void CacheDirectiveInfoExpirationProto::SharedCtor() {
  ::memset(&millis_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&isrelative_) -
                               reinterpret_cast<char*>(&millis_)) +
               sizeof(isrelative_));
}

CacheDirectiveInfoExpirationProto::~CacheDirectiveInfoExpirationProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  SharedDtor();
}

void CacheDirectiveInfoExpirationProto::SharedDtor() {}

void CacheDirectiveInfoExpirationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheDirectiveInfoExpirationProto&
CacheDirectiveInfoExpirationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CacheDirectiveInfoExpirationProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void CacheDirectiveInfoExpirationProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&millis_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&isrelative_) -
                                 reinterpret_cast<char*>(&millis_)) +
                 sizeof(isrelative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CacheDirectiveInfoExpirationProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 millis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_millis(&has_bits);
          millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isRelative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isrelative(&has_bits);
          isrelative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
CacheDirectiveInfoExpirationProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 millis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_millis(), target);
  }

  // required bool isRelative = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            2, this->_internal_isrelative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  return target;
}

size_t CacheDirectiveInfoExpirationProto::RequiredFieldsByteSizeFallback()
    const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  size_t total_size = 0;

  if (_internal_has_millis()) {
    // required int64 millis = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_millis());
  }

  if (_internal_has_isrelative()) {
    // required bool isRelative = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CacheDirectiveInfoExpirationProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required int64 millis = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_millis());

    // required bool isRelative = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheDirectiveInfoExpirationProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheDirectiveInfoExpirationProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          CacheDirectiveInfoExpirationProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
    MergeFrom(*source);
  }
}

void CacheDirectiveInfoExpirationProto::MergeFrom(
    const CacheDirectiveInfoExpirationProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      millis_ = from.millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      isrelative_ = from.isrelative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CacheDirectiveInfoExpirationProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveInfoExpirationProto::CopyFrom(
    const CacheDirectiveInfoExpirationProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveInfoExpirationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CacheDirectiveInfoExpirationProto::InternalSwap(
    CacheDirectiveInfoExpirationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(millis_, other->millis_);
  swap(isrelative_, other->isrelative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
CacheDirectiveInfoExpirationProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CacheDirectiveStatsProto::InitAsDefaultInstance() {}
class CacheDirectiveStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheDirectiveStatsProto>()._has_bits_);
  static void set_has_bytesneeded(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_bytescached(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_filesneeded(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_filescached(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
  static void set_has_hasexpired(HasBits* has_bits) { (*has_bits)[0] |= 16u; }
};

CacheDirectiveStatsProto::CacheDirectiveStatsProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CacheDirectiveStatsProto)
}
CacheDirectiveStatsProto::CacheDirectiveStatsProto(
    const CacheDirectiveStatsProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytesneeded_, &from.bytesneeded_,
           static_cast<size_t>(reinterpret_cast<char*>(&hasexpired_) -
                               reinterpret_cast<char*>(&bytesneeded_)) +
               sizeof(hasexpired_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CacheDirectiveStatsProto)
}

void CacheDirectiveStatsProto::SharedCtor() {
  ::memset(&bytesneeded_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&hasexpired_) -
                               reinterpret_cast<char*>(&bytesneeded_)) +
               sizeof(hasexpired_));
}

CacheDirectiveStatsProto::~CacheDirectiveStatsProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CacheDirectiveStatsProto)
  SharedDtor();
}

void CacheDirectiveStatsProto::SharedDtor() {}

void CacheDirectiveStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheDirectiveStatsProto& CacheDirectiveStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CacheDirectiveStatsProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CacheDirectiveStatsProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CacheDirectiveStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bytesneeded_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&hasexpired_) -
                                 reinterpret_cast<char*>(&bytesneeded_)) +
                 sizeof(hasexpired_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CacheDirectiveStatsProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 bytesNeeded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bytesneeded(&has_bits);
          bytesneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 bytesCached = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bytescached(&has_bits);
          bytescached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 filesNeeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_filesneeded(&has_bits);
          filesneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 filesCached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filescached(&has_bits);
          filescached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasExpired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hasexpired(&has_bits);
          hasexpired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheDirectiveStatsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CacheDirectiveStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bytesNeeded = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_bytesneeded(), target);
  }

  // required int64 bytesCached = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_bytescached(), target);
  }

  // required int64 filesNeeded = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            3, this->_internal_filesneeded(), target);
  }

  // required int64 filesCached = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            4, this->_internal_filescached(), target);
  }

  // required bool hasExpired = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            5, this->_internal_hasexpired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CacheDirectiveStatsProto)
  return target;
}

size_t CacheDirectiveStatsProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CacheDirectiveStatsProto)
  size_t total_size = 0;

  if (_internal_has_bytesneeded()) {
    // required int64 bytesNeeded = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesneeded());
  }

  if (_internal_has_bytescached()) {
    // required int64 bytesCached = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytescached());
  }

  if (_internal_has_filesneeded()) {
    // required int64 filesNeeded = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filesneeded());
  }

  if (_internal_has_filescached()) {
    // required int64 filesCached = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filescached());
  }

  if (_internal_has_hasexpired()) {
    // required bool hasExpired = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CacheDirectiveStatsProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CacheDirectiveStatsProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) ==
      0) {  // All required fields are present.
    // required int64 bytesNeeded = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesneeded());

    // required int64 bytesCached = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytescached());

    // required int64 filesNeeded = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filesneeded());

    // required int64 filesCached = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filescached());

    // required bool hasExpired = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheDirectiveStatsProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CacheDirectiveStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheDirectiveStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheDirectiveStatsProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CacheDirectiveStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CacheDirectiveStatsProto)
    MergeFrom(*source);
  }
}

void CacheDirectiveStatsProto::MergeFrom(const CacheDirectiveStatsProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CacheDirectiveStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bytesneeded_ = from.bytesneeded_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytescached_ = from.bytescached_;
    }
    if (cached_has_bits & 0x00000004u) {
      filesneeded_ = from.filesneeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      filescached_ = from.filescached_;
    }
    if (cached_has_bits & 0x00000010u) {
      hasexpired_ = from.hasexpired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CacheDirectiveStatsProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CacheDirectiveStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveStatsProto::CopyFrom(const CacheDirectiveStatsProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CacheDirectiveStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveStatsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CacheDirectiveStatsProto::InternalSwap(CacheDirectiveStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bytesneeded_, other->bytesneeded_);
  swap(bytescached_, other->bytescached_);
  swap(filesneeded_, other->filesneeded_);
  swap(filescached_, other->filescached_);
  swap(hasexpired_, other->hasexpired_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheDirectiveStatsProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AddCacheDirectiveRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AddCacheDirectiveRequestProto_default_instance_._instance
      .get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CacheDirectiveInfoProto*>(
      ::Hdfs::Internal::CacheDirectiveInfoProto::internal_default_instance());
}
class AddCacheDirectiveRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddCacheDirectiveRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::CacheDirectiveInfoProto& info(
      const AddCacheDirectiveRequestProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_cacheflags(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::CacheDirectiveInfoProto&
AddCacheDirectiveRequestProto::_Internal::info(
    const AddCacheDirectiveRequestProto* msg) {
  return *msg->info_;
}
AddCacheDirectiveRequestProto::AddCacheDirectiveRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddCacheDirectiveRequestProto)
}
AddCacheDirectiveRequestProto::AddCacheDirectiveRequestProto(
    const AddCacheDirectiveRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  cacheflags_ = from.cacheflags_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddCacheDirectiveRequestProto)
}

void AddCacheDirectiveRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  ::memset(&info_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&cacheflags_) -
                               reinterpret_cast<char*>(&info_)) +
               sizeof(cacheflags_));
}

AddCacheDirectiveRequestProto::~AddCacheDirectiveRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddCacheDirectiveRequestProto)
  SharedDtor();
}

void AddCacheDirectiveRequestProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void AddCacheDirectiveRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCacheDirectiveRequestProto&
AddCacheDirectiveRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AddCacheDirectiveRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  cacheflags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddCacheDirectiveRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cacheFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cacheflags(&has_bits);
          cacheflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
AddCacheDirectiveRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  // optional uint32 cacheFlags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_cacheflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddCacheDirectiveRequestProto)
  return target;
}

size_t AddCacheDirectiveRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (_internal_has_info()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional uint32 cacheFlags = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_cacheflags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCacheDirectiveRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCacheDirectiveRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AddCacheDirectiveRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddCacheDirectiveRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddCacheDirectiveRequestProto)
    MergeFrom(*source);
  }
}

void AddCacheDirectiveRequestProto::MergeFrom(
    const AddCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()
          ->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(
              from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      cacheflags_ = from.cacheflags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddCacheDirectiveRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCacheDirectiveRequestProto::CopyFrom(
    const AddCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void AddCacheDirectiveRequestProto::InternalSwap(
    AddCacheDirectiveRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(cacheflags_, other->cacheflags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCacheDirectiveRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AddCacheDirectiveResponseProto::InitAsDefaultInstance() {}
class AddCacheDirectiveResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddCacheDirectiveResponseProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

AddCacheDirectiveResponseProto::AddCacheDirectiveResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddCacheDirectiveResponseProto)
}
AddCacheDirectiveResponseProto::AddCacheDirectiveResponseProto(
    const AddCacheDirectiveResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddCacheDirectiveResponseProto)
}

void AddCacheDirectiveResponseProto::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

AddCacheDirectiveResponseProto::~AddCacheDirectiveResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddCacheDirectiveResponseProto)
  SharedDtor();
}

void AddCacheDirectiveResponseProto::SharedDtor() {}

void AddCacheDirectiveResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCacheDirectiveResponseProto&
AddCacheDirectiveResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AddCacheDirectiveResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddCacheDirectiveResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
AddCacheDirectiveResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddCacheDirectiveResponseProto)
  return target;
}

size_t AddCacheDirectiveResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  size_t total_size = 0;

  // required int64 id = 1;
  if (_internal_has_id()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCacheDirectiveResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCacheDirectiveResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AddCacheDirectiveResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddCacheDirectiveResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddCacheDirectiveResponseProto)
    MergeFrom(*source);
  }
}

void AddCacheDirectiveResponseProto::MergeFrom(
    const AddCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void AddCacheDirectiveResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCacheDirectiveResponseProto::CopyFrom(
    const AddCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCacheDirectiveResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AddCacheDirectiveResponseProto::InternalSwap(
    AddCacheDirectiveResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCacheDirectiveResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ModifyCacheDirectiveRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_ModifyCacheDirectiveRequestProto_default_instance_
      ._instance.get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CacheDirectiveInfoProto*>(
      ::Hdfs::Internal::CacheDirectiveInfoProto::internal_default_instance());
}
class ModifyCacheDirectiveRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModifyCacheDirectiveRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::CacheDirectiveInfoProto& info(
      const ModifyCacheDirectiveRequestProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_cacheflags(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::CacheDirectiveInfoProto&
ModifyCacheDirectiveRequestProto::_Internal::info(
    const ModifyCacheDirectiveRequestProto* msg) {
  return *msg->info_;
}
ModifyCacheDirectiveRequestProto::ModifyCacheDirectiveRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
}
ModifyCacheDirectiveRequestProto::ModifyCacheDirectiveRequestProto(
    const ModifyCacheDirectiveRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  cacheflags_ = from.cacheflags_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
}

void ModifyCacheDirectiveRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  ::memset(&info_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&cacheflags_) -
                               reinterpret_cast<char*>(&info_)) +
               sizeof(cacheflags_));
}

ModifyCacheDirectiveRequestProto::~ModifyCacheDirectiveRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  SharedDtor();
}

void ModifyCacheDirectiveRequestProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ModifyCacheDirectiveRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyCacheDirectiveRequestProto&
ModifyCacheDirectiveRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ModifyCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ModifyCacheDirectiveRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  cacheflags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModifyCacheDirectiveRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cacheFlags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cacheflags(&has_bits);
          cacheflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ModifyCacheDirectiveRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  // optional uint32 cacheFlags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_cacheflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  return target;
}

size_t ModifyCacheDirectiveRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (_internal_has_info()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional uint32 cacheFlags = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_cacheflags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyCacheDirectiveRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyCacheDirectiveRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ModifyCacheDirectiveRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
    MergeFrom(*source);
  }
}

void ModifyCacheDirectiveRequestProto::MergeFrom(
    const ModifyCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()
          ->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(
              from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      cacheflags_ = from.cacheflags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModifyCacheDirectiveRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCacheDirectiveRequestProto::CopyFrom(
    const ModifyCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void ModifyCacheDirectiveRequestProto::InternalSwap(
    ModifyCacheDirectiveRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(cacheflags_, other->cacheflags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
ModifyCacheDirectiveRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ModifyCacheDirectiveResponseProto::InitAsDefaultInstance() {}
class ModifyCacheDirectiveResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModifyCacheDirectiveResponseProto>()._has_bits_);
};

ModifyCacheDirectiveResponseProto::ModifyCacheDirectiveResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
}
ModifyCacheDirectiveResponseProto::ModifyCacheDirectiveResponseProto(
    const ModifyCacheDirectiveResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
}

void ModifyCacheDirectiveResponseProto::SharedCtor() {}

ModifyCacheDirectiveResponseProto::~ModifyCacheDirectiveResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  SharedDtor();
}

void ModifyCacheDirectiveResponseProto::SharedDtor() {}

void ModifyCacheDirectiveResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyCacheDirectiveResponseProto&
ModifyCacheDirectiveResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ModifyCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ModifyCacheDirectiveResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModifyCacheDirectiveResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ModifyCacheDirectiveResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  return target;
}

size_t ModifyCacheDirectiveResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyCacheDirectiveResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyCacheDirectiveResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ModifyCacheDirectiveResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
    MergeFrom(*source);
  }
}

void ModifyCacheDirectiveResponseProto::MergeFrom(
    const ModifyCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void ModifyCacheDirectiveResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCacheDirectiveResponseProto::CopyFrom(
    const ModifyCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCacheDirectiveResponseProto::IsInitialized() const { return true; }

void ModifyCacheDirectiveResponseProto::InternalSwap(
    ModifyCacheDirectiveResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata
ModifyCacheDirectiveResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RemoveCacheDirectiveRequestProto::InitAsDefaultInstance() {}
class RemoveCacheDirectiveRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemoveCacheDirectiveRequestProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RemoveCacheDirectiveRequestProto::RemoveCacheDirectiveRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
}
RemoveCacheDirectiveRequestProto::RemoveCacheDirectiveRequestProto(
    const RemoveCacheDirectiveRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
}

void RemoveCacheDirectiveRequestProto::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

RemoveCacheDirectiveRequestProto::~RemoveCacheDirectiveRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  SharedDtor();
}

void RemoveCacheDirectiveRequestProto::SharedDtor() {}

void RemoveCacheDirectiveRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveCacheDirectiveRequestProto&
RemoveCacheDirectiveRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RemoveCacheDirectiveRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RemoveCacheDirectiveRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveCacheDirectiveRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
RemoveCacheDirectiveRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  return target;
}

size_t RemoveCacheDirectiveRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  size_t total_size = 0;

  // required int64 id = 1;
  if (_internal_has_id()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveCacheDirectiveRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCacheDirectiveRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RemoveCacheDirectiveRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
    MergeFrom(*source);
  }
}

void RemoveCacheDirectiveRequestProto::MergeFrom(
    const RemoveCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void RemoveCacheDirectiveRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCacheDirectiveRequestProto::CopyFrom(
    const RemoveCacheDirectiveRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RemoveCacheDirectiveRequestProto::InternalSwap(
    RemoveCacheDirectiveRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
RemoveCacheDirectiveRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RemoveCacheDirectiveResponseProto::InitAsDefaultInstance() {}
class RemoveCacheDirectiveResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemoveCacheDirectiveResponseProto>()._has_bits_);
};

RemoveCacheDirectiveResponseProto::RemoveCacheDirectiveResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
}
RemoveCacheDirectiveResponseProto::RemoveCacheDirectiveResponseProto(
    const RemoveCacheDirectiveResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
}

void RemoveCacheDirectiveResponseProto::SharedCtor() {}

RemoveCacheDirectiveResponseProto::~RemoveCacheDirectiveResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  SharedDtor();
}

void RemoveCacheDirectiveResponseProto::SharedDtor() {}

void RemoveCacheDirectiveResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveCacheDirectiveResponseProto&
RemoveCacheDirectiveResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RemoveCacheDirectiveResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RemoveCacheDirectiveResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveCacheDirectiveResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
RemoveCacheDirectiveResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  return target;
}

size_t RemoveCacheDirectiveResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveCacheDirectiveResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCacheDirectiveResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RemoveCacheDirectiveResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
    MergeFrom(*source);
  }
}

void RemoveCacheDirectiveResponseProto::MergeFrom(
    const RemoveCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RemoveCacheDirectiveResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCacheDirectiveResponseProto::CopyFrom(
    const RemoveCacheDirectiveResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCacheDirectiveResponseProto::IsInitialized() const { return true; }

void RemoveCacheDirectiveResponseProto::InternalSwap(
    RemoveCacheDirectiveResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata
RemoveCacheDirectiveResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCacheDirectivesRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_ListCacheDirectivesRequestProto_default_instance_._instance
      .get_mutable()
      ->filter_ = const_cast<::Hdfs::Internal::CacheDirectiveInfoProto*>(
      ::Hdfs::Internal::CacheDirectiveInfoProto::internal_default_instance());
}
class ListCacheDirectivesRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCacheDirectivesRequestProto>()._has_bits_);
  static void set_has_previd(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::CacheDirectiveInfoProto& filter(
      const ListCacheDirectivesRequestProto* msg);
  static void set_has_filter(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::CacheDirectiveInfoProto&
ListCacheDirectivesRequestProto::_Internal::filter(
    const ListCacheDirectivesRequestProto* msg) {
  return *msg->filter_;
}
ListCacheDirectivesRequestProto::ListCacheDirectivesRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCacheDirectivesRequestProto)
}
ListCacheDirectivesRequestProto::ListCacheDirectivesRequestProto(
    const ListCacheDirectivesRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::Hdfs::Internal::CacheDirectiveInfoProto(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  previd_ = from.previd_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCacheDirectivesRequestProto)
}

void ListCacheDirectivesRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  ::memset(&filter_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&previd_) -
                               reinterpret_cast<char*>(&filter_)) +
               sizeof(previd_));
}

ListCacheDirectivesRequestProto::~ListCacheDirectivesRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCacheDirectivesRequestProto)
  SharedDtor();
}

void ListCacheDirectivesRequestProto::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
}

void ListCacheDirectivesRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCacheDirectivesRequestProto&
ListCacheDirectivesRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCacheDirectivesRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCacheDirectivesRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filter_ != nullptr);
    filter_->Clear();
  }
  previd_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCacheDirectivesRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 prevId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_previd(&has_bits);
          previd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ListCacheDirectivesRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 prevId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_previd(), target);
  }

  // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCacheDirectivesRequestProto)
  return target;
}

size_t ListCacheDirectivesRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  size_t total_size = 0;

  if (_internal_has_filter()) {
    // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *filter_);
  }

  if (_internal_has_previd()) {
    // required int64 prevId = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_previd());
  }

  return total_size;
}
size_t ListCacheDirectivesRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *filter_);

    // required int64 prevId = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_previd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCacheDirectivesRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCacheDirectivesRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCacheDirectivesRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCacheDirectivesRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCacheDirectivesRequestProto)
    MergeFrom(*source);
  }
}

void ListCacheDirectivesRequestProto::MergeFrom(
    const ListCacheDirectivesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filter()
          ->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(
              from._internal_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      previd_ = from.previd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListCacheDirectivesRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCacheDirectivesRequestProto::CopyFrom(
    const ListCacheDirectivesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCacheDirectivesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCacheDirectivesRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_filter()) {
    if (!filter_->IsInitialized()) return false;
  }
  return true;
}

void ListCacheDirectivesRequestProto::InternalSwap(
    ListCacheDirectivesRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filter_, other->filter_);
  swap(previd_, other->previd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCacheDirectivesRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CacheDirectiveEntryProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CacheDirectiveEntryProto_default_instance_._instance
      .get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CacheDirectiveInfoProto*>(
      ::Hdfs::Internal::CacheDirectiveInfoProto::internal_default_instance());
  ::Hdfs::Internal::_CacheDirectiveEntryProto_default_instance_._instance
      .get_mutable()
      ->stats_ = const_cast<::Hdfs::Internal::CacheDirectiveStatsProto*>(
      ::Hdfs::Internal::CacheDirectiveStatsProto::internal_default_instance());
}
class CacheDirectiveEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheDirectiveEntryProto>()._has_bits_);
  static const ::Hdfs::Internal::CacheDirectiveInfoProto& info(
      const CacheDirectiveEntryProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::CacheDirectiveStatsProto& stats(
      const CacheDirectiveEntryProto* msg);
  static void set_has_stats(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::CacheDirectiveInfoProto&
CacheDirectiveEntryProto::_Internal::info(const CacheDirectiveEntryProto* msg) {
  return *msg->info_;
}
const ::Hdfs::Internal::CacheDirectiveStatsProto&
CacheDirectiveEntryProto::_Internal::stats(
    const CacheDirectiveEntryProto* msg) {
  return *msg->stats_;
}
CacheDirectiveEntryProto::CacheDirectiveEntryProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CacheDirectiveEntryProto)
}
CacheDirectiveEntryProto::CacheDirectiveEntryProto(
    const CacheDirectiveEntryProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::Hdfs::Internal::CacheDirectiveStatsProto(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CacheDirectiveEntryProto)
}

void CacheDirectiveEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto.base);
  ::memset(&info_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&stats_) -
                               reinterpret_cast<char*>(&info_)) +
               sizeof(stats_));
}

CacheDirectiveEntryProto::~CacheDirectiveEntryProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CacheDirectiveEntryProto)
  SharedDtor();
}

void CacheDirectiveEntryProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete stats_;
}

void CacheDirectiveEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheDirectiveEntryProto& CacheDirectiveEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CacheDirectiveEntryProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CacheDirectiveEntryProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CacheDirectiveEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CacheDirectiveEntryProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheDirectiveEntryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CacheDirectiveEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CacheDirectiveEntryProto)
  return target;
}

size_t CacheDirectiveEntryProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CacheDirectiveEntryProto)
  size_t total_size = 0;

  if (_internal_has_info()) {
    // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }

  if (_internal_has_stats()) {
    // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*stats_);
  }

  return total_size;
}
size_t CacheDirectiveEntryProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CacheDirectiveEntryProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);

    // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*stats_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheDirectiveEntryProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CacheDirectiveEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheDirectiveEntryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheDirectiveEntryProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CacheDirectiveEntryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CacheDirectiveEntryProto)
    MergeFrom(*source);
  }
}

void CacheDirectiveEntryProto::MergeFrom(const CacheDirectiveEntryProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CacheDirectiveEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()
          ->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(
              from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stats()
          ->::Hdfs::Internal::CacheDirectiveStatsProto::MergeFrom(
              from._internal_stats());
    }
  }
}

void CacheDirectiveEntryProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CacheDirectiveEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveEntryProto::CopyFrom(const CacheDirectiveEntryProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CacheDirectiveEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_stats()) {
    if (!stats_->IsInitialized()) return false;
  }
  return true;
}

void CacheDirectiveEntryProto::InternalSwap(CacheDirectiveEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheDirectiveEntryProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCacheDirectivesResponseProto::InitAsDefaultInstance() {}
class ListCacheDirectivesResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCacheDirectivesResponseProto>()._has_bits_);
  static void set_has_hasmore(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

ListCacheDirectivesResponseProto::ListCacheDirectivesResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCacheDirectivesResponseProto)
}
ListCacheDirectivesResponseProto::ListCacheDirectivesResponseProto(
    const ListCacheDirectivesResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hasmore_ = from.hasmore_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCacheDirectivesResponseProto)
}

void ListCacheDirectivesResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  hasmore_ = false;
}

ListCacheDirectivesResponseProto::~ListCacheDirectivesResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCacheDirectivesResponseProto)
  SharedDtor();
}

void ListCacheDirectivesResponseProto::SharedDtor() {}

void ListCacheDirectivesResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCacheDirectivesResponseProto&
ListCacheDirectivesResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCacheDirectivesResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCacheDirectivesResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  elements_.Clear();
  hasmore_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCacheDirectivesResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool hasMore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hasmore(&has_bits);
          hasmore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ListCacheDirectivesResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_elements_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_elements(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool hasMore = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            2, this->_internal_hasmore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCacheDirectivesResponseProto)
  return target;
}

size_t ListCacheDirectivesResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  size_t total_size = 0;

  // required bool hasMore = 2;
  if (_internal_has_hasmore()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCacheDirectivesResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCacheDirectivesResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCacheDirectivesResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCacheDirectivesResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCacheDirectivesResponseProto)
    MergeFrom(*source);
  }
}

void ListCacheDirectivesResponseProto::MergeFrom(
    const ListCacheDirectivesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_hasmore()) {
    _internal_set_hasmore(from._internal_hasmore());
  }
}

void ListCacheDirectivesResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCacheDirectivesResponseProto::CopyFrom(
    const ListCacheDirectivesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCacheDirectivesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCacheDirectivesResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_))
    return false;
  return true;
}

void ListCacheDirectivesResponseProto::InternalSwap(
    ListCacheDirectivesResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(hasmore_, other->hasmore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
ListCacheDirectivesResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CachePoolInfoProto::InitAsDefaultInstance() {}
class CachePoolInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CachePoolInfoProto>()._has_bits_);
  static void set_has_poolname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_ownername(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_groupname(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_mode(HasBits* has_bits) { (*has_bits)[0] |= 32u; }
  static void set_has_limit(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
  static void set_has_maxrelativeexpiry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CachePoolInfoProto::CachePoolInfoProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CachePoolInfoProto)
}
CachePoolInfoProto::CachePoolInfoProto(const CachePoolInfoProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  poolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_poolname()) {
    poolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.poolname_);
  }
  ownername_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ownername()) {
    ownername_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.ownername_);
  }
  groupname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_groupname()) {
    groupname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.groupname_);
  }
  ::memcpy(&limit_, &from.limit_,
           static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
                               reinterpret_cast<char*>(&limit_)) +
               sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CachePoolInfoProto)
}

void CachePoolInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base);
  poolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ownername_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
                               reinterpret_cast<char*>(&limit_)) +
               sizeof(mode_));
}

CachePoolInfoProto::~CachePoolInfoProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CachePoolInfoProto)
  SharedDtor();
}

void CachePoolInfoProto::SharedDtor() {
  poolname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ownername_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CachePoolInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CachePoolInfoProto& CachePoolInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CachePoolInfoProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CachePoolInfoProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CachePoolInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      poolname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ownername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&limit_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
                                 reinterpret_cast<char*>(&limit_)) +
                 sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CachePoolInfoProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string poolName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_poolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CachePoolInfoProto.poolName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ownerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ownername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CachePoolInfoProto.ownerName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CachePoolInfoProto.groupName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 maxRelativeExpiry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maxrelativeexpiry(&has_bits);
          maxrelativeexpiry_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CachePoolInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CachePoolInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string poolName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_poolname().data(),
        static_cast<int>(this->_internal_poolname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CachePoolInfoProto.poolName");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_poolname(), target);
  }

  // optional string ownerName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_ownername().data(),
        static_cast<int>(this->_internal_ownername().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CachePoolInfoProto.ownerName");
    target =
        stream->WriteStringMaybeAliased(2, this->_internal_ownername(), target);
  }

  // optional string groupName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_groupname().data(),
        static_cast<int>(this->_internal_groupname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CachePoolInfoProto.groupName");
    target =
        stream->WriteStringMaybeAliased(3, this->_internal_groupname(), target);
  }

  // optional int32 mode = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            4, this->_internal_mode(), target);
  }

  // optional int64 limit = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            5, this->_internal_limit(), target);
  }

  // optional int64 maxRelativeExpiry = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            6, this->_internal_maxrelativeexpiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CachePoolInfoProto)
  return target;
}

size_t CachePoolInfoProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CachePoolInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string poolName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_poolname());
    }

    // optional string ownerName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_ownername());
    }

    // optional string groupName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_groupname());
    }

    // optional int64 limit = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                  this->_internal_limit());
    }

    // optional int64 maxRelativeExpiry = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                  this->_internal_maxrelativeexpiry());
    }

    // optional int32 mode = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                  this->_internal_mode());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CachePoolInfoProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CachePoolInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CachePoolInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CachePoolInfoProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CachePoolInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CachePoolInfoProto)
    MergeFrom(*source);
  }
}

void CachePoolInfoProto::MergeFrom(const CachePoolInfoProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CachePoolInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      poolname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.poolname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ownername_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.ownername_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      groupname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.groupname_);
    }
    if (cached_has_bits & 0x00000008u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxrelativeexpiry_ = from.maxrelativeexpiry_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CachePoolInfoProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CachePoolInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolInfoProto::CopyFrom(const CachePoolInfoProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CachePoolInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolInfoProto::IsInitialized() const { return true; }

void CachePoolInfoProto::InternalSwap(CachePoolInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  poolname_.Swap(
      &other->poolname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  ownername_.Swap(
      &other->ownername_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  groupname_.Swap(
      &other->groupname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(maxrelativeexpiry_, other->maxrelativeexpiry_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachePoolInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CachePoolStatsProto::InitAsDefaultInstance() {}
class CachePoolStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CachePoolStatsProto>()._has_bits_);
  static void set_has_bytesneeded(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_bytescached(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_bytesoverlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesneeded(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
  static void set_has_filescached(HasBits* has_bits) { (*has_bits)[0] |= 16u; }
};

CachePoolStatsProto::CachePoolStatsProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CachePoolStatsProto)
}
CachePoolStatsProto::CachePoolStatsProto(const CachePoolStatsProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytesneeded_, &from.bytesneeded_,
           static_cast<size_t>(reinterpret_cast<char*>(&filescached_) -
                               reinterpret_cast<char*>(&bytesneeded_)) +
               sizeof(filescached_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CachePoolStatsProto)
}

void CachePoolStatsProto::SharedCtor() {
  ::memset(&bytesneeded_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&filescached_) -
                               reinterpret_cast<char*>(&bytesneeded_)) +
               sizeof(filescached_));
}

CachePoolStatsProto::~CachePoolStatsProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CachePoolStatsProto)
  SharedDtor();
}

void CachePoolStatsProto::SharedDtor() {}

void CachePoolStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CachePoolStatsProto& CachePoolStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CachePoolStatsProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CachePoolStatsProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CachePoolStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bytesneeded_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&filescached_) -
                                 reinterpret_cast<char*>(&bytesneeded_)) +
                 sizeof(filescached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CachePoolStatsProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 bytesNeeded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bytesneeded(&has_bits);
          bytesneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 bytesCached = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bytescached(&has_bits);
          bytescached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 bytesOverlimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bytesoverlimit(&has_bits);
          bytesoverlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 filesNeeded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filesneeded(&has_bits);
          filesneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 filesCached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filescached(&has_bits);
          filescached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CachePoolStatsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CachePoolStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bytesNeeded = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_bytesneeded(), target);
  }

  // required int64 bytesCached = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_bytescached(), target);
  }

  // required int64 bytesOverlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            3, this->_internal_bytesoverlimit(), target);
  }

  // required int64 filesNeeded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            4, this->_internal_filesneeded(), target);
  }

  // required int64 filesCached = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            5, this->_internal_filescached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CachePoolStatsProto)
  return target;
}

size_t CachePoolStatsProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CachePoolStatsProto)
  size_t total_size = 0;

  if (_internal_has_bytesneeded()) {
    // required int64 bytesNeeded = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesneeded());
  }

  if (_internal_has_bytescached()) {
    // required int64 bytesCached = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytescached());
  }

  if (_internal_has_bytesoverlimit()) {
    // required int64 bytesOverlimit = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesoverlimit());
  }

  if (_internal_has_filesneeded()) {
    // required int64 filesNeeded = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filesneeded());
  }

  if (_internal_has_filescached()) {
    // required int64 filesCached = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filescached());
  }

  return total_size;
}
size_t CachePoolStatsProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CachePoolStatsProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) ==
      0) {  // All required fields are present.
    // required int64 bytesNeeded = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesneeded());

    // required int64 bytesCached = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytescached());

    // required int64 bytesOverlimit = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bytesoverlimit());

    // required int64 filesNeeded = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filesneeded());

    // required int64 filesCached = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_filescached());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CachePoolStatsProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CachePoolStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CachePoolStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CachePoolStatsProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CachePoolStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CachePoolStatsProto)
    MergeFrom(*source);
  }
}

void CachePoolStatsProto::MergeFrom(const CachePoolStatsProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CachePoolStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bytesneeded_ = from.bytesneeded_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytescached_ = from.bytescached_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytesoverlimit_ = from.bytesoverlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      filesneeded_ = from.filesneeded_;
    }
    if (cached_has_bits & 0x00000010u) {
      filescached_ = from.filescached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CachePoolStatsProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CachePoolStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolStatsProto::CopyFrom(const CachePoolStatsProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CachePoolStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolStatsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CachePoolStatsProto::InternalSwap(CachePoolStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bytesneeded_, other->bytesneeded_);
  swap(bytescached_, other->bytescached_);
  swap(bytesoverlimit_, other->bytesoverlimit_);
  swap(filesneeded_, other->filesneeded_);
  swap(filescached_, other->filescached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachePoolStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AddCachePoolRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_AddCachePoolRequestProto_default_instance_._instance
      .get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CachePoolInfoProto*>(
      ::Hdfs::Internal::CachePoolInfoProto::internal_default_instance());
}
class AddCachePoolRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCachePoolRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::CachePoolInfoProto& info(
      const AddCachePoolRequestProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::CachePoolInfoProto&
AddCachePoolRequestProto::_Internal::info(const AddCachePoolRequestProto* msg) {
  return *msg->info_;
}
AddCachePoolRequestProto::AddCachePoolRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddCachePoolRequestProto)
}
AddCachePoolRequestProto::AddCachePoolRequestProto(
    const AddCachePoolRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CachePoolInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddCachePoolRequestProto)
}

void AddCachePoolRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto.base);
  info_ = nullptr;
}

AddCachePoolRequestProto::~AddCachePoolRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddCachePoolRequestProto)
  SharedDtor();
}

void AddCachePoolRequestProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void AddCachePoolRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCachePoolRequestProto& AddCachePoolRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddCachePoolRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void AddCachePoolRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddCachePoolRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCachePoolRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddCachePoolRequestProto)
  return target;
}

size_t AddCachePoolRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddCachePoolRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (_internal_has_info()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCachePoolRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCachePoolRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCachePoolRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddCachePoolRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddCachePoolRequestProto)
    MergeFrom(*source);
  }
}

void AddCachePoolRequestProto::MergeFrom(const AddCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(
        from._internal_info());
  }
}

void AddCachePoolRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCachePoolRequestProto::CopyFrom(const AddCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AddCachePoolRequestProto::InternalSwap(AddCachePoolRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCachePoolRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AddCachePoolResponseProto::InitAsDefaultInstance() {}
class AddCachePoolResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddCachePoolResponseProto>()._has_bits_);
};

AddCachePoolResponseProto::AddCachePoolResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AddCachePoolResponseProto)
}
AddCachePoolResponseProto::AddCachePoolResponseProto(
    const AddCachePoolResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AddCachePoolResponseProto)
}

void AddCachePoolResponseProto::SharedCtor() {}

AddCachePoolResponseProto::~AddCachePoolResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AddCachePoolResponseProto)
  SharedDtor();
}

void AddCachePoolResponseProto::SharedDtor() {}

void AddCachePoolResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCachePoolResponseProto& AddCachePoolResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AddCachePoolResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AddCachePoolResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AddCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddCachePoolResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCachePoolResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AddCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AddCachePoolResponseProto)
  return target;
}

size_t AddCachePoolResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AddCachePoolResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCachePoolResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AddCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCachePoolResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AddCachePoolResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AddCachePoolResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AddCachePoolResponseProto)
    MergeFrom(*source);
  }
}

void AddCachePoolResponseProto::MergeFrom(
    const AddCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AddCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void AddCachePoolResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AddCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCachePoolResponseProto::CopyFrom(
    const AddCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AddCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCachePoolResponseProto::IsInitialized() const { return true; }

void AddCachePoolResponseProto::InternalSwap(AddCachePoolResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCachePoolResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ModifyCachePoolRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_ModifyCachePoolRequestProto_default_instance_._instance
      .get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CachePoolInfoProto*>(
      ::Hdfs::Internal::CachePoolInfoProto::internal_default_instance());
}
class ModifyCachePoolRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModifyCachePoolRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::CachePoolInfoProto& info(
      const ModifyCachePoolRequestProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::CachePoolInfoProto&
ModifyCachePoolRequestProto::_Internal::info(
    const ModifyCachePoolRequestProto* msg) {
  return *msg->info_;
}
ModifyCachePoolRequestProto::ModifyCachePoolRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ModifyCachePoolRequestProto)
}
ModifyCachePoolRequestProto::ModifyCachePoolRequestProto(
    const ModifyCachePoolRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CachePoolInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ModifyCachePoolRequestProto)
}

void ModifyCachePoolRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  info_ = nullptr;
}

ModifyCachePoolRequestProto::~ModifyCachePoolRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ModifyCachePoolRequestProto)
  SharedDtor();
}

void ModifyCachePoolRequestProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ModifyCachePoolRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyCachePoolRequestProto&
ModifyCachePoolRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ModifyCachePoolRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ModifyCachePoolRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModifyCachePoolRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyCachePoolRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ModifyCachePoolRequestProto)
  return target;
}

size_t ModifyCachePoolRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (_internal_has_info()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyCachePoolRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyCachePoolRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ModifyCachePoolRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ModifyCachePoolRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ModifyCachePoolRequestProto)
    MergeFrom(*source);
  }
}

void ModifyCachePoolRequestProto::MergeFrom(
    const ModifyCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(
        from._internal_info());
  }
}

void ModifyCachePoolRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCachePoolRequestProto::CopyFrom(
    const ModifyCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ModifyCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ModifyCachePoolRequestProto::InternalSwap(
    ModifyCachePoolRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyCachePoolRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ModifyCachePoolResponseProto::InitAsDefaultInstance() {}
class ModifyCachePoolResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModifyCachePoolResponseProto>()._has_bits_);
};

ModifyCachePoolResponseProto::ModifyCachePoolResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ModifyCachePoolResponseProto)
}
ModifyCachePoolResponseProto::ModifyCachePoolResponseProto(
    const ModifyCachePoolResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ModifyCachePoolResponseProto)
}

void ModifyCachePoolResponseProto::SharedCtor() {}

ModifyCachePoolResponseProto::~ModifyCachePoolResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ModifyCachePoolResponseProto)
  SharedDtor();
}

void ModifyCachePoolResponseProto::SharedDtor() {}

void ModifyCachePoolResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyCachePoolResponseProto&
ModifyCachePoolResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ModifyCachePoolResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ModifyCachePoolResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModifyCachePoolResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
ModifyCachePoolResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ModifyCachePoolResponseProto)
  return target;
}

size_t ModifyCachePoolResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyCachePoolResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyCachePoolResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ModifyCachePoolResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ModifyCachePoolResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ModifyCachePoolResponseProto)
    MergeFrom(*source);
  }
}

void ModifyCachePoolResponseProto::MergeFrom(
    const ModifyCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void ModifyCachePoolResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCachePoolResponseProto::CopyFrom(
    const ModifyCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ModifyCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCachePoolResponseProto::IsInitialized() const { return true; }

void ModifyCachePoolResponseProto::InternalSwap(
    ModifyCachePoolResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyCachePoolResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RemoveCachePoolRequestProto::InitAsDefaultInstance() {}
class RemoveCachePoolRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemoveCachePoolRequestProto>()._has_bits_);
  static void set_has_poolname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

RemoveCachePoolRequestProto::RemoveCachePoolRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RemoveCachePoolRequestProto)
}
RemoveCachePoolRequestProto::RemoveCachePoolRequestProto(
    const RemoveCachePoolRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  poolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_poolname()) {
    poolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.poolname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RemoveCachePoolRequestProto)
}

void RemoveCachePoolRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  poolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveCachePoolRequestProto::~RemoveCachePoolRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RemoveCachePoolRequestProto)
  SharedDtor();
}

void RemoveCachePoolRequestProto::SharedDtor() {
  poolname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveCachePoolRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveCachePoolRequestProto&
RemoveCachePoolRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RemoveCachePoolRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RemoveCachePoolRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    poolname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveCachePoolRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string poolName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_poolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RemoveCachePoolRequestProto.poolName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveCachePoolRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string poolName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_poolname().data(),
        static_cast<int>(this->_internal_poolname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RemoveCachePoolRequestProto.poolName");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_poolname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RemoveCachePoolRequestProto)
  return target;
}

size_t RemoveCachePoolRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  size_t total_size = 0;

  // required string poolName = 1;
  if (_internal_has_poolname()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_poolname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveCachePoolRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCachePoolRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RemoveCachePoolRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RemoveCachePoolRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RemoveCachePoolRequestProto)
    MergeFrom(*source);
  }
}

void RemoveCachePoolRequestProto::MergeFrom(
    const RemoveCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_poolname()) {
    _has_bits_[0] |= 0x00000001u;
    poolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.poolname_);
  }
}

void RemoveCachePoolRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCachePoolRequestProto::CopyFrom(
    const RemoveCachePoolRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RemoveCachePoolRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RemoveCachePoolRequestProto::InternalSwap(
    RemoveCachePoolRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  poolname_.Swap(
      &other->poolname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCachePoolRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RemoveCachePoolResponseProto::InitAsDefaultInstance() {}
class RemoveCachePoolResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemoveCachePoolResponseProto>()._has_bits_);
};

RemoveCachePoolResponseProto::RemoveCachePoolResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RemoveCachePoolResponseProto)
}
RemoveCachePoolResponseProto::RemoveCachePoolResponseProto(
    const RemoveCachePoolResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RemoveCachePoolResponseProto)
}

void RemoveCachePoolResponseProto::SharedCtor() {}

RemoveCachePoolResponseProto::~RemoveCachePoolResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RemoveCachePoolResponseProto)
  SharedDtor();
}

void RemoveCachePoolResponseProto::SharedDtor() {}

void RemoveCachePoolResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveCachePoolResponseProto&
RemoveCachePoolResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RemoveCachePoolResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RemoveCachePoolResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveCachePoolResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
RemoveCachePoolResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RemoveCachePoolResponseProto)
  return target;
}

size_t RemoveCachePoolResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveCachePoolResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCachePoolResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RemoveCachePoolResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RemoveCachePoolResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RemoveCachePoolResponseProto)
    MergeFrom(*source);
  }
}

void RemoveCachePoolResponseProto::MergeFrom(
    const RemoveCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RemoveCachePoolResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCachePoolResponseProto::CopyFrom(
    const RemoveCachePoolResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RemoveCachePoolResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCachePoolResponseProto::IsInitialized() const { return true; }

void RemoveCachePoolResponseProto::InternalSwap(
    RemoveCachePoolResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCachePoolResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCachePoolsRequestProto::InitAsDefaultInstance() {}
class ListCachePoolsRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCachePoolsRequestProto>()._has_bits_);
  static void set_has_prevpoolname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

ListCachePoolsRequestProto::ListCachePoolsRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCachePoolsRequestProto)
}
ListCachePoolsRequestProto::ListCachePoolsRequestProto(
    const ListCachePoolsRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prevpoolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prevpoolname()) {
    prevpoolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.prevpoolname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCachePoolsRequestProto)
}

void ListCachePoolsRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto.base);
  prevpoolname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListCachePoolsRequestProto::~ListCachePoolsRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCachePoolsRequestProto)
  SharedDtor();
}

void ListCachePoolsRequestProto::SharedDtor() {
  prevpoolname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListCachePoolsRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCachePoolsRequestProto&
ListCachePoolsRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCachePoolsRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCachePoolsRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCachePoolsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prevpoolname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCachePoolsRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string prevPoolName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prevpoolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCachePoolsRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCachePoolsRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string prevPoolName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_prevpoolname().data(),
        static_cast<int>(this->_internal_prevpoolname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName");
    target = stream->WriteStringMaybeAliased(1, this->_internal_prevpoolname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCachePoolsRequestProto)
  return target;
}

size_t ListCachePoolsRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCachePoolsRequestProto)
  size_t total_size = 0;

  // required string prevPoolName = 1;
  if (_internal_has_prevpoolname()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_prevpoolname());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCachePoolsRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCachePoolsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCachePoolsRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCachePoolsRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCachePoolsRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCachePoolsRequestProto)
    MergeFrom(*source);
  }
}

void ListCachePoolsRequestProto::MergeFrom(
    const ListCachePoolsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCachePoolsRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_prevpoolname()) {
    _has_bits_[0] |= 0x00000001u;
    prevpoolname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.prevpoolname_);
  }
}

void ListCachePoolsRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCachePoolsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCachePoolsRequestProto::CopyFrom(
    const ListCachePoolsRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCachePoolsRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCachePoolsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ListCachePoolsRequestProto::InternalSwap(
    ListCachePoolsRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prevpoolname_.Swap(
      &other->prevpoolname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCachePoolsRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void ListCachePoolsResponseProto::InitAsDefaultInstance() {}
class ListCachePoolsResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListCachePoolsResponseProto>()._has_bits_);
  static void set_has_hasmore(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

ListCachePoolsResponseProto::ListCachePoolsResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.ListCachePoolsResponseProto)
}
ListCachePoolsResponseProto::ListCachePoolsResponseProto(
    const ListCachePoolsResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hasmore_ = from.hasmore_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.ListCachePoolsResponseProto)
}

void ListCachePoolsResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  hasmore_ = false;
}

ListCachePoolsResponseProto::~ListCachePoolsResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.ListCachePoolsResponseProto)
  SharedDtor();
}

void ListCachePoolsResponseProto::SharedDtor() {}

void ListCachePoolsResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCachePoolsResponseProto&
ListCachePoolsResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ListCachePoolsResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void ListCachePoolsResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.ListCachePoolsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  entries_.Clear();
  hasmore_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListCachePoolsResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool hasMore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hasmore(&has_bits);
          hasmore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCachePoolsResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.ListCachePoolsResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_entries_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool hasMore = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            2, this->_internal_hasmore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.ListCachePoolsResponseProto)
  return target;
}

size_t ListCachePoolsResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.ListCachePoolsResponseProto)
  size_t total_size = 0;

  // required bool hasMore = 2;
  if (_internal_has_hasmore()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCachePoolsResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.ListCachePoolsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCachePoolsResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ListCachePoolsResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.ListCachePoolsResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.ListCachePoolsResponseProto)
    MergeFrom(*source);
  }
}

void ListCachePoolsResponseProto::MergeFrom(
    const ListCachePoolsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.ListCachePoolsResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_hasmore()) {
    _internal_set_hasmore(from._internal_hasmore());
  }
}

void ListCachePoolsResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.ListCachePoolsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCachePoolsResponseProto::CopyFrom(
    const ListCachePoolsResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.ListCachePoolsResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCachePoolsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_))
    return false;
  return true;
}

void ListCachePoolsResponseProto::InternalSwap(
    ListCachePoolsResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(hasmore_, other->hasmore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCachePoolsResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CachePoolEntryProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CachePoolEntryProto_default_instance_._instance
      .get_mutable()
      ->info_ = const_cast<::Hdfs::Internal::CachePoolInfoProto*>(
      ::Hdfs::Internal::CachePoolInfoProto::internal_default_instance());
  ::Hdfs::Internal::_CachePoolEntryProto_default_instance_._instance
      .get_mutable()
      ->stats_ = const_cast<::Hdfs::Internal::CachePoolStatsProto*>(
      ::Hdfs::Internal::CachePoolStatsProto::internal_default_instance());
}
class CachePoolEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CachePoolEntryProto>()._has_bits_);
  static const ::Hdfs::Internal::CachePoolInfoProto& info(
      const CachePoolEntryProto* msg);
  static void set_has_info(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::CachePoolStatsProto& stats(
      const CachePoolEntryProto* msg);
  static void set_has_stats(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::Hdfs::Internal::CachePoolInfoProto&
CachePoolEntryProto::_Internal::info(const CachePoolEntryProto* msg) {
  return *msg->info_;
}
const ::Hdfs::Internal::CachePoolStatsProto&
CachePoolEntryProto::_Internal::stats(const CachePoolEntryProto* msg) {
  return *msg->stats_;
}
CachePoolEntryProto::CachePoolEntryProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CachePoolEntryProto)
}
CachePoolEntryProto::CachePoolEntryProto(const CachePoolEntryProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Hdfs::Internal::CachePoolInfoProto(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::Hdfs::Internal::CachePoolStatsProto(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CachePoolEntryProto)
}

void CachePoolEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto.base);
  ::memset(&info_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&stats_) -
                               reinterpret_cast<char*>(&info_)) +
               sizeof(stats_));
}

CachePoolEntryProto::~CachePoolEntryProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CachePoolEntryProto)
  SharedDtor();
}

void CachePoolEntryProto::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete stats_;
}

void CachePoolEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CachePoolEntryProto& CachePoolEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CachePoolEntryProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void CachePoolEntryProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CachePoolEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CachePoolEntryProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CachePoolEntryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CachePoolEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::info(this), target, stream);
  }

  // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CachePoolEntryProto)
  return target;
}

size_t CachePoolEntryProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CachePoolEntryProto)
  size_t total_size = 0;

  if (_internal_has_info()) {
    // required .Hdfs.Internal.CachePoolInfoProto info = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);
  }

  if (_internal_has_stats()) {
    // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*stats_);
  }

  return total_size;
}
size_t CachePoolEntryProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CachePoolEntryProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required .Hdfs.Internal.CachePoolInfoProto info = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*info_);

    // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*stats_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CachePoolEntryProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CachePoolEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CachePoolEntryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CachePoolEntryProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CachePoolEntryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CachePoolEntryProto)
    MergeFrom(*source);
  }
}

void CachePoolEntryProto::MergeFrom(const CachePoolEntryProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CachePoolEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stats()
          ->::Hdfs::Internal::CachePoolStatsProto::MergeFrom(
              from._internal_stats());
    }
  }
}

void CachePoolEntryProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CachePoolEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolEntryProto::CopyFrom(const CachePoolEntryProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CachePoolEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_stats()) {
    if (!stats_->IsInitialized()) return false;
  }
  return true;
}

void CachePoolEntryProto::InternalSwap(CachePoolEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachePoolEntryProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFileLinkInfoRequestProto::InitAsDefaultInstance() {}
class GetFileLinkInfoRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetFileLinkInfoRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetFileLinkInfoRequestProto::GetFileLinkInfoRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFileLinkInfoRequestProto)
}
GetFileLinkInfoRequestProto::GetFileLinkInfoRequestProto(
    const GetFileLinkInfoRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFileLinkInfoRequestProto)
}

void GetFileLinkInfoRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileLinkInfoRequestProto::~GetFileLinkInfoRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFileLinkInfoRequestProto)
  SharedDtor();
}

void GetFileLinkInfoRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileLinkInfoRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileLinkInfoRequestProto&
GetFileLinkInfoRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFileLinkInfoRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetFileLinkInfoRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFileLinkInfoRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetFileLinkInfoRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileLinkInfoRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetFileLinkInfoRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFileLinkInfoRequestProto)
  return target;
}

size_t GetFileLinkInfoRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  size_t total_size = 0;

  // required string src = 1;
  if (_internal_has_src()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileLinkInfoRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileLinkInfoRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetFileLinkInfoRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFileLinkInfoRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFileLinkInfoRequestProto)
    MergeFrom(*source);
  }
}

void GetFileLinkInfoRequestProto::MergeFrom(
    const GetFileLinkInfoRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_src()) {
    _has_bits_[0] |= 0x00000001u;
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
}

void GetFileLinkInfoRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileLinkInfoRequestProto::CopyFrom(
    const GetFileLinkInfoRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFileLinkInfoRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileLinkInfoRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetFileLinkInfoRequestProto::InternalSwap(
    GetFileLinkInfoRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileLinkInfoRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetFileLinkInfoResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetFileLinkInfoResponseProto_default_instance_._instance
      .get_mutable()
      ->fs_ = const_cast<::Hdfs::Internal::HdfsFileStatusProto*>(
      ::Hdfs::Internal::HdfsFileStatusProto::internal_default_instance());
}
class GetFileLinkInfoResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetFileLinkInfoResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::HdfsFileStatusProto& fs(
      const GetFileLinkInfoResponseProto* msg);
  static void set_has_fs(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::HdfsFileStatusProto&
GetFileLinkInfoResponseProto::_Internal::fs(
    const GetFileLinkInfoResponseProto* msg) {
  return *msg->fs_;
}
void GetFileLinkInfoResponseProto::clear_fs() {
  if (fs_ != nullptr) fs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetFileLinkInfoResponseProto::GetFileLinkInfoResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetFileLinkInfoResponseProto)
}
GetFileLinkInfoResponseProto::GetFileLinkInfoResponseProto(
    const GetFileLinkInfoResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fs()) {
    fs_ = new ::Hdfs::Internal::HdfsFileStatusProto(*from.fs_);
  } else {
    fs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetFileLinkInfoResponseProto)
}

void GetFileLinkInfoResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  fs_ = nullptr;
}

GetFileLinkInfoResponseProto::~GetFileLinkInfoResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetFileLinkInfoResponseProto)
  SharedDtor();
}

void GetFileLinkInfoResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete fs_;
}

void GetFileLinkInfoResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileLinkInfoResponseProto&
GetFileLinkInfoResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetFileLinkInfoResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetFileLinkInfoResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fs_ != nullptr);
    fs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFileLinkInfoResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetFileLinkInfoResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::fs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetFileLinkInfoResponseProto)
  return target;
}

size_t GetFileLinkInfoResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*fs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileLinkInfoResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileLinkInfoResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetFileLinkInfoResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetFileLinkInfoResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetFileLinkInfoResponseProto)
    MergeFrom(*source);
  }
}

void GetFileLinkInfoResponseProto::MergeFrom(
    const GetFileLinkInfoResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_fs()) {
    _internal_mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(
        from._internal_fs());
  }
}

void GetFileLinkInfoResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileLinkInfoResponseProto::CopyFrom(
    const GetFileLinkInfoResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetFileLinkInfoResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileLinkInfoResponseProto::IsInitialized() const {
  if (_internal_has_fs()) {
    if (!fs_->IsInitialized()) return false;
  }
  return true;
}

void GetFileLinkInfoResponseProto::InternalSwap(
    GetFileLinkInfoResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fs_, other->fs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileLinkInfoResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetContentSummaryRequestProto::InitAsDefaultInstance() {}
class GetContentSummaryRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetContentSummaryRequestProto>()._has_bits_);
  static void set_has_path(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetContentSummaryRequestProto::GetContentSummaryRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetContentSummaryRequestProto)
}
GetContentSummaryRequestProto::GetContentSummaryRequestProto(
    const GetContentSummaryRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetContentSummaryRequestProto)
}

void GetContentSummaryRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetContentSummaryRequestProto::~GetContentSummaryRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetContentSummaryRequestProto)
  SharedDtor();
}

void GetContentSummaryRequestProto::SharedDtor() {
  path_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetContentSummaryRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContentSummaryRequestProto&
GetContentSummaryRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetContentSummaryRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetContentSummaryRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetContentSummaryRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetContentSummaryRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetContentSummaryRequestProto.path");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetContentSummaryRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetContentSummaryRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_path().data(),
        static_cast<int>(this->_internal_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetContentSummaryRequestProto.path");
    target = stream->WriteStringMaybeAliased(1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetContentSummaryRequestProto)
  return target;
}

size_t GetContentSummaryRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetContentSummaryRequestProto)
  size_t total_size = 0;

  // required string path = 1;
  if (_internal_has_path()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_path());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContentSummaryRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetContentSummaryRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContentSummaryRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetContentSummaryRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetContentSummaryRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetContentSummaryRequestProto)
    MergeFrom(*source);
  }
}

void GetContentSummaryRequestProto::MergeFrom(
    const GetContentSummaryRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetContentSummaryRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_path()) {
    _has_bits_[0] |= 0x00000001u;
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
}

void GetContentSummaryRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetContentSummaryRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContentSummaryRequestProto::CopyFrom(
    const GetContentSummaryRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetContentSummaryRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContentSummaryRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetContentSummaryRequestProto::InternalSwap(
    GetContentSummaryRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContentSummaryRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetContentSummaryResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetContentSummaryResponseProto_default_instance_._instance
      .get_mutable()
      ->summary_ = const_cast<::Hdfs::Internal::ContentSummaryProto*>(
      ::Hdfs::Internal::ContentSummaryProto::internal_default_instance());
}
class GetContentSummaryResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetContentSummaryResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::ContentSummaryProto& summary(
      const GetContentSummaryResponseProto* msg);
  static void set_has_summary(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::ContentSummaryProto&
GetContentSummaryResponseProto::_Internal::summary(
    const GetContentSummaryResponseProto* msg) {
  return *msg->summary_;
}
void GetContentSummaryResponseProto::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetContentSummaryResponseProto::GetContentSummaryResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetContentSummaryResponseProto)
}
GetContentSummaryResponseProto::GetContentSummaryResponseProto(
    const GetContentSummaryResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::Hdfs::Internal::ContentSummaryProto(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetContentSummaryResponseProto)
}

void GetContentSummaryResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  summary_ = nullptr;
}

GetContentSummaryResponseProto::~GetContentSummaryResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetContentSummaryResponseProto)
  SharedDtor();
}

void GetContentSummaryResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete summary_;
}

void GetContentSummaryResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetContentSummaryResponseProto&
GetContentSummaryResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetContentSummaryResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetContentSummaryResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetContentSummaryResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetContentSummaryResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.ContentSummaryProto summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetContentSummaryResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetContentSummaryResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetContentSummaryResponseProto)
  return target;
}

size_t GetContentSummaryResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetContentSummaryResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  if (_internal_has_summary()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *summary_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetContentSummaryResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetContentSummaryResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetContentSummaryResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetContentSummaryResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetContentSummaryResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetContentSummaryResponseProto)
    MergeFrom(*source);
  }
}

void GetContentSummaryResponseProto::MergeFrom(
    const GetContentSummaryResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetContentSummaryResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()
        ->::Hdfs::Internal::ContentSummaryProto::MergeFrom(
            from._internal_summary());
  }
}

void GetContentSummaryResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetContentSummaryResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContentSummaryResponseProto::CopyFrom(
    const GetContentSummaryResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetContentSummaryResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContentSummaryResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_summary()) {
    if (!summary_->IsInitialized()) return false;
  }
  return true;
}

void GetContentSummaryResponseProto::InternalSwap(
    GetContentSummaryResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContentSummaryResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetQuotaRequestProto::InitAsDefaultInstance() {}
class SetQuotaRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetQuotaRequestProto>()._has_bits_);
  static void set_has_path(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_namespacequota(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diskspacequota(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SetQuotaRequestProto::SetQuotaRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetQuotaRequestProto)
}
SetQuotaRequestProto::SetQuotaRequestProto(const SetQuotaRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  ::memcpy(&namespacequota_, &from.namespacequota_,
           static_cast<size_t>(reinterpret_cast<char*>(&diskspacequota_) -
                               reinterpret_cast<char*>(&namespacequota_)) +
               sizeof(diskspacequota_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetQuotaRequestProto)
}

void SetQuotaRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto.base);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&namespacequota_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&diskspacequota_) -
                               reinterpret_cast<char*>(&namespacequota_)) +
               sizeof(diskspacequota_));
}

SetQuotaRequestProto::~SetQuotaRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetQuotaRequestProto)
  SharedDtor();
}

void SetQuotaRequestProto::SharedDtor() {
  path_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetQuotaRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetQuotaRequestProto& SetQuotaRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetQuotaRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetQuotaRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetQuotaRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&namespacequota_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&diskspacequota_) -
                                 reinterpret_cast<char*>(&namespacequota_)) +
                 sizeof(diskspacequota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetQuotaRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetQuotaRequestProto.path");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 namespaceQuota = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_namespacequota(&has_bits);
          namespacequota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 diskspaceQuota = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_diskspacequota(&has_bits);
          diskspacequota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetQuotaRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetQuotaRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_path().data(),
        static_cast<int>(this->_internal_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetQuotaRequestProto.path");
    target = stream->WriteStringMaybeAliased(1, this->_internal_path(), target);
  }

  // required uint64 namespaceQuota = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_namespacequota(), target);
  }

  // required uint64 diskspaceQuota = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->_internal_diskspacequota(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetQuotaRequestProto)
  return target;
}

size_t SetQuotaRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.SetQuotaRequestProto)
  size_t total_size = 0;

  if (_internal_has_path()) {
    // required string path = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_path());
  }

  if (_internal_has_namespacequota()) {
    // required uint64 namespaceQuota = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_namespacequota());
  }

  if (_internal_has_diskspacequota()) {
    // required uint64 diskspaceQuota = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_diskspacequota());
  }

  return total_size;
}
size_t SetQuotaRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetQuotaRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string path = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_path());

    // required uint64 namespaceQuota = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_namespacequota());

    // required uint64 diskspaceQuota = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_diskspacequota());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetQuotaRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetQuotaRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetQuotaRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetQuotaRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetQuotaRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetQuotaRequestProto)
    MergeFrom(*source);
  }
}

void SetQuotaRequestProto::MergeFrom(const SetQuotaRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetQuotaRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      namespacequota_ = from.namespacequota_;
    }
    if (cached_has_bits & 0x00000004u) {
      diskspacequota_ = from.diskspacequota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetQuotaRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetQuotaRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaRequestProto::CopyFrom(const SetQuotaRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetQuotaRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SetQuotaRequestProto::InternalSwap(SetQuotaRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  swap(namespacequota_, other->namespacequota_);
  swap(diskspacequota_, other->diskspacequota_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetQuotaRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetQuotaResponseProto::InitAsDefaultInstance() {}
class SetQuotaResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetQuotaResponseProto>()._has_bits_);
};

SetQuotaResponseProto::SetQuotaResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetQuotaResponseProto)
}
SetQuotaResponseProto::SetQuotaResponseProto(const SetQuotaResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetQuotaResponseProto)
}

void SetQuotaResponseProto::SharedCtor() {}

SetQuotaResponseProto::~SetQuotaResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetQuotaResponseProto)
  SharedDtor();
}

void SetQuotaResponseProto::SharedDtor() {}

void SetQuotaResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetQuotaResponseProto& SetQuotaResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetQuotaResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetQuotaResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetQuotaResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetQuotaResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetQuotaResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetQuotaResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetQuotaResponseProto)
  return target;
}

size_t SetQuotaResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetQuotaResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetQuotaResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetQuotaResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetQuotaResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetQuotaResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetQuotaResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetQuotaResponseProto)
    MergeFrom(*source);
  }
}

void SetQuotaResponseProto::MergeFrom(const SetQuotaResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetQuotaResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SetQuotaResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetQuotaResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaResponseProto::CopyFrom(const SetQuotaResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetQuotaResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaResponseProto::IsInitialized() const { return true; }

void SetQuotaResponseProto::InternalSwap(SetQuotaResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetQuotaResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void FsyncRequestProto::InitAsDefaultInstance() {}
class FsyncRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FsyncRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_client(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_lastblocklength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FsyncRequestProto::FsyncRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.FsyncRequestProto)
}
FsyncRequestProto::FsyncRequestProto(const FsyncRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  client_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client()) {
    client_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.client_);
  }
  lastblocklength_ = from.lastblocklength_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.FsyncRequestProto)
}

void FsyncRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastblocklength_ = PROTOBUF_LONGLONG(-1);
}

FsyncRequestProto::~FsyncRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.FsyncRequestProto)
  SharedDtor();
}

void FsyncRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FsyncRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FsyncRequestProto& FsyncRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FsyncRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void FsyncRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.FsyncRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_.ClearNonDefaultToEmptyNoArena();
    }
    lastblocklength_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FsyncRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.FsyncRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.FsyncRequestProto.client");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 lastBlockLength = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastblocklength(&has_bits);
          lastblocklength_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FsyncRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.FsyncRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.FsyncRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required string client = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_client().data(),
        static_cast<int>(this->_internal_client().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.FsyncRequestProto.client");
    target =
        stream->WriteStringMaybeAliased(2, this->_internal_client(), target);
  }

  // optional sint64 lastBlockLength = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(
            3, this->_internal_lastblocklength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.FsyncRequestProto)
  return target;
}

size_t FsyncRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.FsyncRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_client()) {
    // required string client = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_client());
  }

  return total_size;
}
size_t FsyncRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.FsyncRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required string client = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_client());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional sint64 lastBlockLength = 3 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
                this->_internal_lastblocklength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FsyncRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.FsyncRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FsyncRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FsyncRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.FsyncRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.FsyncRequestProto)
    MergeFrom(*source);
  }
}

void FsyncRequestProto::MergeFrom(const FsyncRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.FsyncRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      client_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.client_);
    }
    if (cached_has_bits & 0x00000004u) {
      lastblocklength_ = from.lastblocklength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FsyncRequestProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.FsyncRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsyncRequestProto::CopyFrom(const FsyncRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.FsyncRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FsyncRequestProto::InternalSwap(FsyncRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  client_.Swap(
      &other->client_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(lastblocklength_, other->lastblocklength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FsyncRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void FsyncResponseProto::InitAsDefaultInstance() {}
class FsyncResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FsyncResponseProto>()._has_bits_);
};

FsyncResponseProto::FsyncResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.FsyncResponseProto)
}
FsyncResponseProto::FsyncResponseProto(const FsyncResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.FsyncResponseProto)
}

void FsyncResponseProto::SharedCtor() {}

FsyncResponseProto::~FsyncResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.FsyncResponseProto)
  SharedDtor();
}

void FsyncResponseProto::SharedDtor() {}

void FsyncResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FsyncResponseProto& FsyncResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FsyncResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void FsyncResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.FsyncResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FsyncResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FsyncResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.FsyncResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.FsyncResponseProto)
  return target;
}

size_t FsyncResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.FsyncResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FsyncResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.FsyncResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FsyncResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FsyncResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.FsyncResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.FsyncResponseProto)
    MergeFrom(*source);
  }
}

void FsyncResponseProto::MergeFrom(const FsyncResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.FsyncResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void FsyncResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.FsyncResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsyncResponseProto::CopyFrom(const FsyncResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.FsyncResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncResponseProto::IsInitialized() const { return true; }

void FsyncResponseProto::InternalSwap(FsyncResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FsyncResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetTimesRequestProto::InitAsDefaultInstance() {}
class SetTimesRequestProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTimesRequestProto>()._has_bits_);
  static void set_has_src(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_mtime(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_atime(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

SetTimesRequestProto::SetTimesRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetTimesRequestProto)
}
SetTimesRequestProto::SetTimesRequestProto(const SetTimesRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.src_);
  }
  ::memcpy(&mtime_, &from.mtime_,
           static_cast<size_t>(reinterpret_cast<char*>(&atime_) -
                               reinterpret_cast<char*>(&mtime_)) +
               sizeof(atime_));
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetTimesRequestProto)
}

void SetTimesRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto.base);
  src_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtime_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&atime_) -
                               reinterpret_cast<char*>(&mtime_)) +
               sizeof(atime_));
}

SetTimesRequestProto::~SetTimesRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetTimesRequestProto)
  SharedDtor();
}

void SetTimesRequestProto::SharedDtor() {
  src_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTimesRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTimesRequestProto& SetTimesRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetTimesRequestProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetTimesRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetTimesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mtime_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&atime_) -
                                 reinterpret_cast<char*>(&mtime_)) +
                 sizeof(atime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetTimesRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.SetTimesRequestProto.src");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 mtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 atime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_atime(&has_bits);
          atime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTimesRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetTimesRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_src().data(),
        static_cast<int>(this->_internal_src().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.SetTimesRequestProto.src");
    target = stream->WriteStringMaybeAliased(1, this->_internal_src(), target);
  }

  // required uint64 mtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_mtime(), target);
  }

  // required uint64 atime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->_internal_atime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetTimesRequestProto)
  return target;
}

size_t SetTimesRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.SetTimesRequestProto)
  size_t total_size = 0;

  if (_internal_has_src()) {
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());
  }

  if (_internal_has_mtime()) {
    // required uint64 mtime = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_mtime());
  }

  if (_internal_has_atime()) {
    // required uint64 atime = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_atime());
  }

  return total_size;
}
size_t SetTimesRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetTimesRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string src = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src());

    // required uint64 mtime = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_mtime());

    // required uint64 atime = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_atime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTimesRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetTimesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTimesRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTimesRequestProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetTimesRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetTimesRequestProto)
    MergeFrom(*source);
  }
}

void SetTimesRequestProto::MergeFrom(const SetTimesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetTimesRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      mtime_ = from.mtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      atime_ = from.atime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetTimesRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetTimesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimesRequestProto::CopyFrom(const SetTimesRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetTimesRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimesRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SetTimesRequestProto::InternalSwap(SetTimesRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_.Swap(&other->src_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
  swap(mtime_, other->mtime_);
  swap(atime_, other->atime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTimesRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetTimesResponseProto::InitAsDefaultInstance() {}
class SetTimesResponseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTimesResponseProto>()._has_bits_);
};

SetTimesResponseProto::SetTimesResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetTimesResponseProto)
}
SetTimesResponseProto::SetTimesResponseProto(const SetTimesResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetTimesResponseProto)
}

void SetTimesResponseProto::SharedCtor() {}

SetTimesResponseProto::~SetTimesResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetTimesResponseProto)
  SharedDtor();
}

void SetTimesResponseProto::SharedDtor() {}

void SetTimesResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTimesResponseProto& SetTimesResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetTimesResponseProto_ClientNamenodeProtocol_2eproto.base);
  return *internal_default_instance();
}

void SetTimesResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetTimesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetTimesResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTimesResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetTimesResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetTimesResponseProto)
  return target;
}

size_t SetTimesResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetTimesResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTimesResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetTimesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTimesResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTimesResponseProto>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetTimesResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetTimesResponseProto)
    MergeFrom(*source);
  }
}

void SetTimesResponseProto::MergeFrom(const SetTimesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetTimesResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SetTimesResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetTimesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimesResponseProto::CopyFrom(const SetTimesResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetTimesResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimesResponseProto::IsInitialized() const { return true; }

void SetTimesResponseProto::InternalSwap(SetTimesResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTimesResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateSymlinkRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_CreateSymlinkRequestProto_default_instance_._instance
      .get_mutable()
      ->dirperm_ = const_cast<::Hdfs::Internal::FsPermissionProto*>(
      ::Hdfs::Internal::FsPermissionProto::internal_default_instance());
}
class CreateSymlinkRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateSymlinkRequestProto>()._has_bits_);
  static void set_has_target(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_link(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::FsPermissionProto& dirperm(
      const CreateSymlinkRequestProto* msg);
  static void set_has_dirperm(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
  static void set_has_createparent(HasBits* has_bits) { (*has_bits)[0] |= 8u; }
};

const ::Hdfs::Internal::FsPermissionProto&
CreateSymlinkRequestProto::_Internal::dirperm(
    const CreateSymlinkRequestProto* msg) {
  return *msg->dirperm_;
}
void CreateSymlinkRequestProto::clear_dirperm() {
  if (dirperm_ != nullptr) dirperm_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CreateSymlinkRequestProto::CreateSymlinkRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateSymlinkRequestProto)
}
CreateSymlinkRequestProto::CreateSymlinkRequestProto(
    const CreateSymlinkRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.target_);
  }
  link_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_link()) {
    link_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.link_);
  }
  if (from._internal_has_dirperm()) {
    dirperm_ = new ::Hdfs::Internal::FsPermissionProto(*from.dirperm_);
  } else {
    dirperm_ = nullptr;
  }
  createparent_ = from.createparent_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateSymlinkRequestProto)
}

void CreateSymlinkRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto.base);
  target_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dirperm_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&createparent_) -
                               reinterpret_cast<char*>(&dirperm_)) +
               sizeof(createparent_));
}

CreateSymlinkRequestProto::~CreateSymlinkRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateSymlinkRequestProto)
  SharedDtor();
}

void CreateSymlinkRequestProto::SharedDtor() {
  target_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dirperm_;
}

void CreateSymlinkRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSymlinkRequestProto& CreateSymlinkRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateSymlinkRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void CreateSymlinkRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateSymlinkRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      target_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dirperm_ != nullptr);
      dirperm_->Clear();
    }
  }
  createparent_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateSymlinkRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateSymlinkRequestProto.target");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateSymlinkRequestProto.link");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirperm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool createParent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_createparent(&has_bits);
          createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSymlinkRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateSymlinkRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_target().data(),
        static_cast<int>(this->_internal_target().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateSymlinkRequestProto.target");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_target(), target);
  }

  // required string link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_link().data(),
        static_cast<int>(this->_internal_link().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateSymlinkRequestProto.link");
    target = stream->WriteStringMaybeAliased(2, this->_internal_link(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::dirperm(this), target, stream);
  }

  // required bool createParent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            4, this->_internal_createparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateSymlinkRequestProto)
  return target;
}

size_t CreateSymlinkRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.CreateSymlinkRequestProto)
  size_t total_size = 0;

  if (_internal_has_target()) {
    // required string target = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_target());
  }

  if (_internal_has_link()) {
    // required string link = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_link());
  }

  if (_internal_has_dirperm()) {
    // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *dirperm_);
  }

  if (_internal_has_createparent()) {
    // required bool createParent = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CreateSymlinkRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateSymlinkRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) ==
      0) {  // All required fields are present.
    // required string target = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_target());

    // required string link = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_link());

    // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *dirperm_);

    // required bool createParent = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSymlinkRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateSymlinkRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSymlinkRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          CreateSymlinkRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateSymlinkRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateSymlinkRequestProto)
    MergeFrom(*source);
  }
}

void CreateSymlinkRequestProto::MergeFrom(
    const CreateSymlinkRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateSymlinkRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.target_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      link_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.link_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dirperm()
          ->::Hdfs::Internal::FsPermissionProto::MergeFrom(
              from._internal_dirperm());
    }
    if (cached_has_bits & 0x00000008u) {
      createparent_ = from.createparent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateSymlinkRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateSymlinkRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSymlinkRequestProto::CopyFrom(
    const CreateSymlinkRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateSymlinkRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSymlinkRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_dirperm()) {
    if (!dirperm_->IsInitialized()) return false;
  }
  return true;
}

void CreateSymlinkRequestProto::InternalSwap(CreateSymlinkRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_.Swap(
      &other->target_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  link_.Swap(&other->link_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  swap(dirperm_, other->dirperm_);
  swap(createparent_, other->createparent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSymlinkRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateSymlinkResponseProto::InitAsDefaultInstance() {}
class CreateSymlinkResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateSymlinkResponseProto>()._has_bits_);
};

CreateSymlinkResponseProto::CreateSymlinkResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateSymlinkResponseProto)
}
CreateSymlinkResponseProto::CreateSymlinkResponseProto(
    const CreateSymlinkResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateSymlinkResponseProto)
}

void CreateSymlinkResponseProto::SharedCtor() {}

CreateSymlinkResponseProto::~CreateSymlinkResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateSymlinkResponseProto)
  SharedDtor();
}

void CreateSymlinkResponseProto::SharedDtor() {}

void CreateSymlinkResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSymlinkResponseProto&
CreateSymlinkResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateSymlinkResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void CreateSymlinkResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateSymlinkResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateSymlinkResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSymlinkResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateSymlinkResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateSymlinkResponseProto)
  return target;
}

size_t CreateSymlinkResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateSymlinkResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSymlinkResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateSymlinkResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSymlinkResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          CreateSymlinkResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateSymlinkResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateSymlinkResponseProto)
    MergeFrom(*source);
  }
}

void CreateSymlinkResponseProto::MergeFrom(
    const CreateSymlinkResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateSymlinkResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void CreateSymlinkResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateSymlinkResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSymlinkResponseProto::CopyFrom(
    const CreateSymlinkResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateSymlinkResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSymlinkResponseProto::IsInitialized() const { return true; }

void CreateSymlinkResponseProto::InternalSwap(
    CreateSymlinkResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSymlinkResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetLinkTargetRequestProto::InitAsDefaultInstance() {}
class GetLinkTargetRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetLinkTargetRequestProto>()._has_bits_);
  static void set_has_path(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetLinkTargetRequestProto::GetLinkTargetRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetLinkTargetRequestProto)
}
GetLinkTargetRequestProto::GetLinkTargetRequestProto(
    const GetLinkTargetRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetLinkTargetRequestProto)
}

void GetLinkTargetRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto.base);
  path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLinkTargetRequestProto::~GetLinkTargetRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetLinkTargetRequestProto)
  SharedDtor();
}

void GetLinkTargetRequestProto::SharedDtor() {
  path_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLinkTargetRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLinkTargetRequestProto& GetLinkTargetRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetLinkTargetRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetLinkTargetRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetLinkTargetRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLinkTargetRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetLinkTargetRequestProto.path");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLinkTargetRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetLinkTargetRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_path().data(),
        static_cast<int>(this->_internal_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetLinkTargetRequestProto.path");
    target = stream->WriteStringMaybeAliased(1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetLinkTargetRequestProto)
  return target;
}

size_t GetLinkTargetRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetLinkTargetRequestProto)
  size_t total_size = 0;

  // required string path = 1;
  if (_internal_has_path()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_path());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLinkTargetRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetLinkTargetRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLinkTargetRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetLinkTargetRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetLinkTargetRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetLinkTargetRequestProto)
    MergeFrom(*source);
  }
}

void GetLinkTargetRequestProto::MergeFrom(
    const GetLinkTargetRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetLinkTargetRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_path()) {
    _has_bits_[0] |= 0x00000001u;
    path_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.path_);
  }
}

void GetLinkTargetRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetLinkTargetRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkTargetRequestProto::CopyFrom(
    const GetLinkTargetRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetLinkTargetRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkTargetRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetLinkTargetRequestProto::InternalSwap(GetLinkTargetRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLinkTargetRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void GetLinkTargetResponseProto::InitAsDefaultInstance() {}
class GetLinkTargetResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetLinkTargetResponseProto>()._has_bits_);
  static void set_has_targetpath(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

GetLinkTargetResponseProto::GetLinkTargetResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetLinkTargetResponseProto)
}
GetLinkTargetResponseProto::GetLinkTargetResponseProto(
    const GetLinkTargetResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetpath_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_targetpath()) {
    targetpath_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.targetpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetLinkTargetResponseProto)
}

void GetLinkTargetResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto.base);
  targetpath_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLinkTargetResponseProto::~GetLinkTargetResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetLinkTargetResponseProto)
  SharedDtor();
}

void GetLinkTargetResponseProto::SharedDtor() {
  targetpath_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLinkTargetResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLinkTargetResponseProto&
GetLinkTargetResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetLinkTargetResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetLinkTargetResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetLinkTargetResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    targetpath_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLinkTargetResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string targetPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_targetpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.GetLinkTargetResponseProto.targetPath");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLinkTargetResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetLinkTargetResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string targetPath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_targetpath().data(),
        static_cast<int>(this->_internal_targetpath().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.GetLinkTargetResponseProto.targetPath");
    target = stream->WriteStringMaybeAliased(1, this->_internal_targetpath(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetLinkTargetResponseProto)
  return target;
}

size_t GetLinkTargetResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetLinkTargetResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional string targetPath = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_targetpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLinkTargetResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetLinkTargetResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLinkTargetResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetLinkTargetResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetLinkTargetResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetLinkTargetResponseProto)
    MergeFrom(*source);
  }
}

void GetLinkTargetResponseProto::MergeFrom(
    const GetLinkTargetResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetLinkTargetResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_targetpath()) {
    _has_bits_[0] |= 0x00000001u;
    targetpath_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.targetpath_);
  }
}

void GetLinkTargetResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetLinkTargetResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkTargetResponseProto::CopyFrom(
    const GetLinkTargetResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetLinkTargetResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkTargetResponseProto::IsInitialized() const { return true; }

void GetLinkTargetResponseProto::InternalSwap(
    GetLinkTargetResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  targetpath_.Swap(
      &other->targetpath_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLinkTargetResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void UpdateBlockForPipelineRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_UpdateBlockForPipelineRequestProto_default_instance_
      ._instance.get_mutable()
      ->block_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class UpdateBlockForPipelineRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateBlockForPipelineRequestProto>()._has_bits_);
  static const ::Hdfs::Internal::ExtendedBlockProto& block(
      const UpdateBlockForPipelineRequestProto* msg);
  static void set_has_block(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
UpdateBlockForPipelineRequestProto::_Internal::block(
    const UpdateBlockForPipelineRequestProto* msg) {
  return *msg->block_;
}
void UpdateBlockForPipelineRequestProto::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateBlockForPipelineRequestProto::UpdateBlockForPipelineRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
}
UpdateBlockForPipelineRequestProto::UpdateBlockForPipelineRequestProto(
    const UpdateBlockForPipelineRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_block()) {
    block_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
}

void UpdateBlockForPipelineRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_ = nullptr;
}

UpdateBlockForPipelineRequestProto::~UpdateBlockForPipelineRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  SharedDtor();
}

void UpdateBlockForPipelineRequestProto::SharedDtor() {
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
}

void UpdateBlockForPipelineRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBlockForPipelineRequestProto&
UpdateBlockForPipelineRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdateBlockForPipelineRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void UpdateBlockForPipelineRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_ != nullptr);
      block_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateBlockForPipelineRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.ExtendedBlockProto block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str,
              "Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
UpdateBlockForPipelineRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::block(this), target, stream);
  }

  // required string clientName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_clientname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  return target;
}

size_t UpdateBlockForPipelineRequestProto::RequiredFieldsByteSizeFallback()
    const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  size_t total_size = 0;

  if (_internal_has_clientname()) {
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  if (_internal_has_block()) {
    // required .Hdfs.Internal.ExtendedBlockProto block = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*block_);
  }

  return total_size;
}
size_t UpdateBlockForPipelineRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string clientName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

    // required .Hdfs.Internal.ExtendedBlockProto block = 1;
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*block_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBlockForPipelineRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBlockForPipelineRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          UpdateBlockForPipelineRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
    MergeFrom(*source);
  }
}

void UpdateBlockForPipelineRequestProto::MergeFrom(
    const UpdateBlockForPipelineRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_block()
          ->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
              from._internal_block());
    }
  }
}

void UpdateBlockForPipelineRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBlockForPipelineRequestProto::CopyFrom(
    const UpdateBlockForPipelineRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlockForPipelineRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void UpdateBlockForPipelineRequestProto::InternalSwap(
    UpdateBlockForPipelineRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
UpdateBlockForPipelineRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void UpdateBlockForPipelineResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_UpdateBlockForPipelineResponseProto_default_instance_
      ._instance.get_mutable()
      ->block_ = const_cast<::Hdfs::Internal::LocatedBlockProto*>(
      ::Hdfs::Internal::LocatedBlockProto::internal_default_instance());
}
class UpdateBlockForPipelineResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateBlockForPipelineResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::LocatedBlockProto& block(
      const UpdateBlockForPipelineResponseProto* msg);
  static void set_has_block(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

const ::Hdfs::Internal::LocatedBlockProto&
UpdateBlockForPipelineResponseProto::_Internal::block(
    const UpdateBlockForPipelineResponseProto* msg) {
  return *msg->block_;
}
void UpdateBlockForPipelineResponseProto::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UpdateBlockForPipelineResponseProto::UpdateBlockForPipelineResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
}
UpdateBlockForPipelineResponseProto::UpdateBlockForPipelineResponseProto(
    const UpdateBlockForPipelineResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::Hdfs::Internal::LocatedBlockProto(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
}

void UpdateBlockForPipelineResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  block_ = nullptr;
}

UpdateBlockForPipelineResponseProto::~UpdateBlockForPipelineResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  SharedDtor();
}

void UpdateBlockForPipelineResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void UpdateBlockForPipelineResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBlockForPipelineResponseProto&
UpdateBlockForPipelineResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdateBlockForPipelineResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void UpdateBlockForPipelineResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateBlockForPipelineResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
UpdateBlockForPipelineResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  return target;
}

size_t UpdateBlockForPipelineResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  size_t total_size = 0;

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (_internal_has_block()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*block_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBlockForPipelineResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBlockForPipelineResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          UpdateBlockForPipelineResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
    MergeFrom(*source);
  }
}

void UpdateBlockForPipelineResponseProto::MergeFrom(
    const UpdateBlockForPipelineResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(
        from._internal_block());
  }
}

void UpdateBlockForPipelineResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBlockForPipelineResponseProto::CopyFrom(
    const UpdateBlockForPipelineResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlockForPipelineResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void UpdateBlockForPipelineResponseProto::InternalSwap(
    UpdateBlockForPipelineResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
UpdateBlockForPipelineResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void UpdatePipelineRequestProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_UpdatePipelineRequestProto_default_instance_._instance
      .get_mutable()
      ->oldblock_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
  ::Hdfs::Internal::_UpdatePipelineRequestProto_default_instance_._instance
      .get_mutable()
      ->newblock_ = const_cast<::Hdfs::Internal::ExtendedBlockProto*>(
      ::Hdfs::Internal::ExtendedBlockProto::internal_default_instance());
}
class UpdatePipelineRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdatePipelineRequestProto>()._has_bits_);
  static void set_has_clientname(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::Hdfs::Internal::ExtendedBlockProto& oldblock(
      const UpdatePipelineRequestProto* msg);
  static void set_has_oldblock(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static const ::Hdfs::Internal::ExtendedBlockProto& newblock(
      const UpdatePipelineRequestProto* msg);
  static void set_has_newblock(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

const ::Hdfs::Internal::ExtendedBlockProto&
UpdatePipelineRequestProto::_Internal::oldblock(
    const UpdatePipelineRequestProto* msg) {
  return *msg->oldblock_;
}
const ::Hdfs::Internal::ExtendedBlockProto&
UpdatePipelineRequestProto::_Internal::newblock(
    const UpdatePipelineRequestProto* msg) {
  return *msg->newblock_;
}
void UpdatePipelineRequestProto::clear_oldblock() {
  if (oldblock_ != nullptr) oldblock_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdatePipelineRequestProto::clear_newblock() {
  if (newblock_ != nullptr) newblock_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UpdatePipelineRequestProto::clear_newnodes() { newnodes_.Clear(); }
UpdatePipelineRequestProto::UpdatePipelineRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.UpdatePipelineRequestProto)
}
UpdatePipelineRequestProto::UpdatePipelineRequestProto(
    const UpdatePipelineRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      newnodes_(from.newnodes_),
      storageids_(from.storageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientname()) {
    clientname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.clientname_);
  }
  if (from._internal_has_oldblock()) {
    oldblock_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.oldblock_);
  } else {
    oldblock_ = nullptr;
  }
  if (from._internal_has_newblock()) {
    newblock_ = new ::Hdfs::Internal::ExtendedBlockProto(*from.newblock_);
  } else {
    newblock_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.UpdatePipelineRequestProto)
}

void UpdatePipelineRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto.base);
  clientname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&oldblock_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&newblock_) -
                               reinterpret_cast<char*>(&oldblock_)) +
               sizeof(newblock_));
}

UpdatePipelineRequestProto::~UpdatePipelineRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.UpdatePipelineRequestProto)
  SharedDtor();
}

void UpdatePipelineRequestProto::SharedDtor() {
  clientname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oldblock_;
  if (this != internal_default_instance()) delete newblock_;
}

void UpdatePipelineRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePipelineRequestProto&
UpdatePipelineRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdatePipelineRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void UpdatePipelineRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.UpdatePipelineRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  newnodes_.Clear();
  storageids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oldblock_ != nullptr);
      oldblock_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(newblock_ != nullptr);
      newblock_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdatePipelineRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.UpdatePipelineRequestProto.clientName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_newnodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string storageIDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_storageids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
                str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
                str, "Hdfs.Internal.UpdatePipelineRequestProto.storageIDs");
#endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePipelineRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.UpdatePipelineRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_clientname().data(),
        static_cast<int>(this->_internal_clientname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.UpdatePipelineRequestProto.clientName");
    target = stream->WriteStringMaybeAliased(1, this->_internal_clientname(),
                                             target);
  }

  // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::oldblock(this), target, stream);
  }

  // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::newblock(this), target, stream);
  }

  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_newnodes_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            4, this->_internal_newnodes(i), target, stream);
  }

  // repeated string storageIDs = 5;
  for (int i = 0, n = this->_internal_storageids_size(); i < n; i++) {
    const auto& s = this->_internal_storageids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.UpdatePipelineRequestProto.storageIDs");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.UpdatePipelineRequestProto)
  return target;
}

size_t UpdatePipelineRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.UpdatePipelineRequestProto)
  size_t total_size = 0;

  if (_internal_has_clientname()) {
    // required string clientName = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());
  }

  if (_internal_has_oldblock()) {
    // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *oldblock_);
  }

  if (_internal_has_newblock()) {
    // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *newblock_);
  }

  return total_size;
}
size_t UpdatePipelineRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.UpdatePipelineRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string clientName = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clientname());

    // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *oldblock_);

    // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *newblock_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  total_size += 1UL * this->_internal_newnodes_size();
  for (const auto& msg : this->newnodes_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string storageIDs = 5;
  total_size +=
      1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(storageids_.size());
  for (int i = 0, n = storageids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        storageids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePipelineRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.UpdatePipelineRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePipelineRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          UpdatePipelineRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.UpdatePipelineRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.UpdatePipelineRequestProto)
    MergeFrom(*source);
  }
}

void UpdatePipelineRequestProto::MergeFrom(
    const UpdatePipelineRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.UpdatePipelineRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  newnodes_.MergeFrom(from.newnodes_);
  storageids_.MergeFrom(from.storageids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clientname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.clientname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_oldblock()
          ->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
              from._internal_oldblock());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_newblock()
          ->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(
              from._internal_newblock());
    }
  }
}

void UpdatePipelineRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.UpdatePipelineRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePipelineRequestProto::CopyFrom(
    const UpdatePipelineRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.UpdatePipelineRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePipelineRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(newnodes_))
    return false;
  if (_internal_has_oldblock()) {
    if (!oldblock_->IsInitialized()) return false;
  }
  if (_internal_has_newblock()) {
    if (!newblock_->IsInitialized()) return false;
  }
  return true;
}

void UpdatePipelineRequestProto::InternalSwap(
    UpdatePipelineRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  newnodes_.InternalSwap(&other->newnodes_);
  storageids_.InternalSwap(&other->storageids_);
  clientname_.Swap(
      &other->clientname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(oldblock_, other->oldblock_);
  swap(newblock_, other->newblock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePipelineRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void UpdatePipelineResponseProto::InitAsDefaultInstance() {}
class UpdatePipelineResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdatePipelineResponseProto>()._has_bits_);
};

UpdatePipelineResponseProto::UpdatePipelineResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.UpdatePipelineResponseProto)
}
UpdatePipelineResponseProto::UpdatePipelineResponseProto(
    const UpdatePipelineResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.UpdatePipelineResponseProto)
}

void UpdatePipelineResponseProto::SharedCtor() {}

UpdatePipelineResponseProto::~UpdatePipelineResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.UpdatePipelineResponseProto)
  SharedDtor();
}

void UpdatePipelineResponseProto::SharedDtor() {}

void UpdatePipelineResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePipelineResponseProto&
UpdatePipelineResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdatePipelineResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void UpdatePipelineResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.UpdatePipelineResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdatePipelineResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePipelineResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.UpdatePipelineResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.UpdatePipelineResponseProto)
  return target;
}

size_t UpdatePipelineResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.UpdatePipelineResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePipelineResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.UpdatePipelineResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePipelineResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          UpdatePipelineResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.UpdatePipelineResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.UpdatePipelineResponseProto)
    MergeFrom(*source);
  }
}

void UpdatePipelineResponseProto::MergeFrom(
    const UpdatePipelineResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.UpdatePipelineResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void UpdatePipelineResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.UpdatePipelineResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePipelineResponseProto::CopyFrom(
    const UpdatePipelineResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.UpdatePipelineResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePipelineResponseProto::IsInitialized() const { return true; }

void UpdatePipelineResponseProto::InternalSwap(
    UpdatePipelineResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePipelineResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void SetBalancerBandwidthRequestProto::InitAsDefaultInstance() {}
class SetBalancerBandwidthRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetBalancerBandwidthRequestProto>()._has_bits_);
  static void set_has_bandwidth(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

SetBalancerBandwidthRequestProto::SetBalancerBandwidthRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetBalancerBandwidthRequestProto)
}
SetBalancerBandwidthRequestProto::SetBalancerBandwidthRequestProto(
    const SetBalancerBandwidthRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bandwidth_ = from.bandwidth_;
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetBalancerBandwidthRequestProto)
}

void SetBalancerBandwidthRequestProto::SharedCtor() {
  bandwidth_ = PROTOBUF_LONGLONG(0);
}

SetBalancerBandwidthRequestProto::~SetBalancerBandwidthRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  SharedDtor();
}

void SetBalancerBandwidthRequestProto::SharedDtor() {}

void SetBalancerBandwidthRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetBalancerBandwidthRequestProto&
SetBalancerBandwidthRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetBalancerBandwidthRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetBalancerBandwidthRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  bandwidth_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetBalancerBandwidthRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
SetBalancerBandwidthRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bandwidth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  return target;
}

size_t SetBalancerBandwidthRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  size_t total_size = 0;

  // required int64 bandwidth = 1;
  if (_internal_has_bandwidth()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_bandwidth());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBalancerBandwidthRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBalancerBandwidthRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetBalancerBandwidthRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetBalancerBandwidthRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetBalancerBandwidthRequestProto)
    MergeFrom(*source);
  }
}

void SetBalancerBandwidthRequestProto::MergeFrom(
    const SetBalancerBandwidthRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_bandwidth()) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
}

void SetBalancerBandwidthRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerBandwidthRequestProto::CopyFrom(
    const SetBalancerBandwidthRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetBalancerBandwidthRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerBandwidthRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SetBalancerBandwidthRequestProto::InternalSwap(
    SetBalancerBandwidthRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bandwidth_, other->bandwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
SetBalancerBandwidthRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SetBalancerBandwidthResponseProto::InitAsDefaultInstance() {}
class SetBalancerBandwidthResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetBalancerBandwidthResponseProto>()._has_bits_);
};

SetBalancerBandwidthResponseProto::SetBalancerBandwidthResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.SetBalancerBandwidthResponseProto)
}
SetBalancerBandwidthResponseProto::SetBalancerBandwidthResponseProto(
    const SetBalancerBandwidthResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.SetBalancerBandwidthResponseProto)
}

void SetBalancerBandwidthResponseProto::SharedCtor() {}

SetBalancerBandwidthResponseProto::~SetBalancerBandwidthResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  SharedDtor();
}

void SetBalancerBandwidthResponseProto::SharedDtor() {}

void SetBalancerBandwidthResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetBalancerBandwidthResponseProto&
SetBalancerBandwidthResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SetBalancerBandwidthResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void SetBalancerBandwidthResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetBalancerBandwidthResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
SetBalancerBandwidthResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  return target;
}

size_t SetBalancerBandwidthResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBalancerBandwidthResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBalancerBandwidthResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          SetBalancerBandwidthResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.SetBalancerBandwidthResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.SetBalancerBandwidthResponseProto)
    MergeFrom(*source);
  }
}

void SetBalancerBandwidthResponseProto::MergeFrom(
    const SetBalancerBandwidthResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void SetBalancerBandwidthResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerBandwidthResponseProto::CopyFrom(
    const SetBalancerBandwidthResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.SetBalancerBandwidthResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerBandwidthResponseProto::IsInitialized() const { return true; }

void SetBalancerBandwidthResponseProto::InternalSwap(
    SetBalancerBandwidthResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata
SetBalancerBandwidthResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetDataEncryptionKeyRequestProto::InitAsDefaultInstance() {}
class GetDataEncryptionKeyRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetDataEncryptionKeyRequestProto>()._has_bits_);
};

GetDataEncryptionKeyRequestProto::GetDataEncryptionKeyRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
}
GetDataEncryptionKeyRequestProto::GetDataEncryptionKeyRequestProto(
    const GetDataEncryptionKeyRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
}

void GetDataEncryptionKeyRequestProto::SharedCtor() {}

GetDataEncryptionKeyRequestProto::~GetDataEncryptionKeyRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  SharedDtor();
}

void GetDataEncryptionKeyRequestProto::SharedDtor() {}

void GetDataEncryptionKeyRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataEncryptionKeyRequestProto&
GetDataEncryptionKeyRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetDataEncryptionKeyRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetDataEncryptionKeyRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDataEncryptionKeyRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetDataEncryptionKeyRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  return target;
}

size_t GetDataEncryptionKeyRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataEncryptionKeyRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataEncryptionKeyRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetDataEncryptionKeyRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
    MergeFrom(*source);
  }
}

void GetDataEncryptionKeyRequestProto::MergeFrom(
    const GetDataEncryptionKeyRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void GetDataEncryptionKeyRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataEncryptionKeyRequestProto::CopyFrom(
    const GetDataEncryptionKeyRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataEncryptionKeyRequestProto::IsInitialized() const { return true; }

void GetDataEncryptionKeyRequestProto::InternalSwap(
    GetDataEncryptionKeyRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetDataEncryptionKeyRequestProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetDataEncryptionKeyResponseProto::InitAsDefaultInstance() {
  ::Hdfs::Internal::_GetDataEncryptionKeyResponseProto_default_instance_
      ._instance.get_mutable()
      ->dataencryptionkey_ = const_cast<
      ::Hdfs::Internal::DataEncryptionKeyProto*>(
      ::Hdfs::Internal::DataEncryptionKeyProto::internal_default_instance());
}
class GetDataEncryptionKeyResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetDataEncryptionKeyResponseProto>()._has_bits_);
  static const ::Hdfs::Internal::DataEncryptionKeyProto& dataencryptionkey(
      const GetDataEncryptionKeyResponseProto* msg);
  static void set_has_dataencryptionkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Hdfs::Internal::DataEncryptionKeyProto&
GetDataEncryptionKeyResponseProto::_Internal::dataencryptionkey(
    const GetDataEncryptionKeyResponseProto* msg) {
  return *msg->dataencryptionkey_;
}
void GetDataEncryptionKeyResponseProto::clear_dataencryptionkey() {
  if (dataencryptionkey_ != nullptr) dataencryptionkey_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetDataEncryptionKeyResponseProto::GetDataEncryptionKeyResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
}
GetDataEncryptionKeyResponseProto::GetDataEncryptionKeyResponseProto(
    const GetDataEncryptionKeyResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dataencryptionkey()) {
    dataencryptionkey_ =
        new ::Hdfs::Internal::DataEncryptionKeyProto(*from.dataencryptionkey_);
  } else {
    dataencryptionkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
}

void GetDataEncryptionKeyResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  dataencryptionkey_ = nullptr;
}

GetDataEncryptionKeyResponseProto::~GetDataEncryptionKeyResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  SharedDtor();
}

void GetDataEncryptionKeyResponseProto::SharedDtor() {
  if (this != internal_default_instance()) delete dataencryptionkey_;
}

void GetDataEncryptionKeyResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataEncryptionKeyResponseProto&
GetDataEncryptionKeyResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetDataEncryptionKeyResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void GetDataEncryptionKeyResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dataencryptionkey_ != nullptr);
    dataencryptionkey_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDataEncryptionKeyResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataencryptionkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetDataEncryptionKeyResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::dataencryptionkey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  return target;
}

size_t GetDataEncryptionKeyResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *dataencryptionkey_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataEncryptionKeyResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataEncryptionKeyResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          GetDataEncryptionKeyResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
    MergeFrom(*source);
  }
}

void GetDataEncryptionKeyResponseProto::MergeFrom(
    const GetDataEncryptionKeyResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_dataencryptionkey()) {
    _internal_mutable_dataencryptionkey()
        ->::Hdfs::Internal::DataEncryptionKeyProto::MergeFrom(
            from._internal_dataencryptionkey());
  }
}

void GetDataEncryptionKeyResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataEncryptionKeyResponseProto::CopyFrom(
    const GetDataEncryptionKeyResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataEncryptionKeyResponseProto::IsInitialized() const {
  if (_internal_has_dataencryptionkey()) {
    if (!dataencryptionkey_->IsInitialized()) return false;
  }
  return true;
}

void GetDataEncryptionKeyResponseProto::InternalSwap(
    GetDataEncryptionKeyResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dataencryptionkey_, other->dataencryptionkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
GetDataEncryptionKeyResponseProto::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateSnapshotRequestProto::InitAsDefaultInstance() {}
class CreateSnapshotRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateSnapshotRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_snapshotname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

CreateSnapshotRequestProto::CreateSnapshotRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateSnapshotRequestProto)
}
CreateSnapshotRequestProto::CreateSnapshotRequestProto(
    const CreateSnapshotRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  snapshotname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotname()) {
    snapshotname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateSnapshotRequestProto)
}

void CreateSnapshotRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto.base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSnapshotRequestProto::~CreateSnapshotRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateSnapshotRequestProto)
  SharedDtor();
}

void CreateSnapshotRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSnapshotRequestProto&
CreateSnapshotRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void CreateSnapshotRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      snapshotroot_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      snapshotname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateSnapshotRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string snapshotName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshotname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateSnapshotRequestProto.snapshotName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSnapshotRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  // optional string snapshotName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotname().data(),
        static_cast<int>(this->_internal_snapshotname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateSnapshotRequestProto.snapshotName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_snapshotname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateSnapshotRequestProto)
  return target;
}

size_t CreateSnapshotRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateSnapshotRequestProto)
  size_t total_size = 0;

  // required string snapshotRoot = 1;
  if (_internal_has_snapshotroot()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // optional string snapshotName = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          CreateSnapshotRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateSnapshotRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateSnapshotRequestProto)
    MergeFrom(*source);
  }
}

void CreateSnapshotRequestProto::MergeFrom(
    const CreateSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      snapshotroot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotroot_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      snapshotname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotname_);
    }
  }
}

void CreateSnapshotRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequestProto::CopyFrom(
    const CreateSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CreateSnapshotRequestProto::InternalSwap(
    CreateSnapshotRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  snapshotname_.Swap(
      &other->snapshotname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void CreateSnapshotResponseProto::InitAsDefaultInstance() {}
class CreateSnapshotResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateSnapshotResponseProto>()._has_bits_);
  static void set_has_snapshotpath(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

CreateSnapshotResponseProto::CreateSnapshotResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.CreateSnapshotResponseProto)
}
CreateSnapshotResponseProto::CreateSnapshotResponseProto(
    const CreateSnapshotResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotpath_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotpath()) {
    snapshotpath_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.CreateSnapshotResponseProto)
}

void CreateSnapshotResponseProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  snapshotpath_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSnapshotResponseProto::~CreateSnapshotResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.CreateSnapshotResponseProto)
  SharedDtor();
}

void CreateSnapshotResponseProto::SharedDtor() {
  snapshotpath_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSnapshotResponseProto&
CreateSnapshotResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CreateSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void CreateSnapshotResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.CreateSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    snapshotpath_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateSnapshotResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSnapshotResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.CreateSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotPath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotpath().data(),
        static_cast<int>(this->_internal_snapshotpath().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotpath(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.CreateSnapshotResponseProto)
  return target;
}

size_t CreateSnapshotResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.CreateSnapshotResponseProto)
  size_t total_size = 0;

  // required string snapshotPath = 1;
  if (_internal_has_snapshotpath()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotpath());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.CreateSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          CreateSnapshotResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.CreateSnapshotResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.CreateSnapshotResponseProto)
    MergeFrom(*source);
  }
}

void CreateSnapshotResponseProto::MergeFrom(
    const CreateSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.CreateSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_snapshotpath()) {
    _has_bits_[0] |= 0x00000001u;
    snapshotpath_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotpath_);
  }
}

void CreateSnapshotResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.CreateSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotResponseProto::CopyFrom(
    const CreateSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.CreateSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CreateSnapshotResponseProto::InternalSwap(
    CreateSnapshotResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotpath_.Swap(
      &other->snapshotpath_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RenameSnapshotRequestProto::InitAsDefaultInstance() {}
class RenameSnapshotRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RenameSnapshotRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_snapshotoldname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snapshotnewname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RenameSnapshotRequestProto::RenameSnapshotRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenameSnapshotRequestProto)
}
RenameSnapshotRequestProto::RenameSnapshotRequestProto(
    const RenameSnapshotRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  snapshotoldname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotoldname()) {
    snapshotoldname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotoldname_);
  }
  snapshotnewname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotnewname()) {
    snapshotnewname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotnewname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenameSnapshotRequestProto)
}

void RenameSnapshotRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto.base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotoldname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotnewname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RenameSnapshotRequestProto::~RenameSnapshotRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenameSnapshotRequestProto)
  SharedDtor();
}

void RenameSnapshotRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotoldname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotnewname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameSnapshotRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameSnapshotRequestProto&
RenameSnapshotRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenameSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RenameSnapshotRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenameSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      snapshotroot_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      snapshotoldname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      snapshotnewname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenameSnapshotRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string snapshotOldName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshotoldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string snapshotNewName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_snapshotnewname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameSnapshotRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenameSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  // required string snapshotOldName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotoldname().data(),
        static_cast<int>(this->_internal_snapshotoldname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshotoldname(), target);
  }

  // required string snapshotNewName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotnewname().data(),
        static_cast<int>(this->_internal_snapshotnewname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshotnewname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenameSnapshotRequestProto)
  return target;
}

size_t RenameSnapshotRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.RenameSnapshotRequestProto)
  size_t total_size = 0;

  if (_internal_has_snapshotroot()) {
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }

  if (_internal_has_snapshotoldname()) {
    // required string snapshotOldName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotoldname());
  }

  if (_internal_has_snapshotnewname()) {
    // required string snapshotNewName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotnewname());
  }

  return total_size;
}
size_t RenameSnapshotRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenameSnapshotRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) ==
      0) {  // All required fields are present.
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());

    // required string snapshotOldName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotoldname());

    // required string snapshotNewName = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotnewname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameSnapshotRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenameSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameSnapshotRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RenameSnapshotRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenameSnapshotRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenameSnapshotRequestProto)
    MergeFrom(*source);
  }
}

void RenameSnapshotRequestProto::MergeFrom(
    const RenameSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenameSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      snapshotroot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotroot_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      snapshotoldname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotoldname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      snapshotnewname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotnewname_);
    }
  }
}

void RenameSnapshotRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenameSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameSnapshotRequestProto::CopyFrom(
    const RenameSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenameSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RenameSnapshotRequestProto::InternalSwap(
    RenameSnapshotRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  snapshotoldname_.Swap(
      &other->snapshotoldname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  snapshotnewname_.Swap(
      &other->snapshotnewname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameSnapshotRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void RenameSnapshotResponseProto::InitAsDefaultInstance() {}
class RenameSnapshotResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RenameSnapshotResponseProto>()._has_bits_);
};

RenameSnapshotResponseProto::RenameSnapshotResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.RenameSnapshotResponseProto)
}
RenameSnapshotResponseProto::RenameSnapshotResponseProto(
    const RenameSnapshotResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.RenameSnapshotResponseProto)
}

void RenameSnapshotResponseProto::SharedCtor() {}

RenameSnapshotResponseProto::~RenameSnapshotResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.RenameSnapshotResponseProto)
  SharedDtor();
}

void RenameSnapshotResponseProto::SharedDtor() {}

void RenameSnapshotResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameSnapshotResponseProto&
RenameSnapshotResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RenameSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void RenameSnapshotResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.RenameSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RenameSnapshotResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameSnapshotResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.RenameSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.RenameSnapshotResponseProto)
  return target;
}

size_t RenameSnapshotResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.RenameSnapshotResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameSnapshotResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.RenameSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameSnapshotResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          RenameSnapshotResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.RenameSnapshotResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.RenameSnapshotResponseProto)
    MergeFrom(*source);
  }
}

void RenameSnapshotResponseProto::MergeFrom(
    const RenameSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.RenameSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void RenameSnapshotResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.RenameSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameSnapshotResponseProto::CopyFrom(
    const RenameSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.RenameSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameSnapshotResponseProto::IsInitialized() const { return true; }

void RenameSnapshotResponseProto::InternalSwap(
    RenameSnapshotResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameSnapshotResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AllowSnapshotRequestProto::InitAsDefaultInstance() {}
class AllowSnapshotRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AllowSnapshotRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

AllowSnapshotRequestProto::AllowSnapshotRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AllowSnapshotRequestProto)
}
AllowSnapshotRequestProto::AllowSnapshotRequestProto(
    const AllowSnapshotRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AllowSnapshotRequestProto)
}

void AllowSnapshotRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto.base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllowSnapshotRequestProto::~AllowSnapshotRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AllowSnapshotRequestProto)
  SharedDtor();
}

void AllowSnapshotRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllowSnapshotRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowSnapshotRequestProto& AllowSnapshotRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AllowSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AllowSnapshotRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AllowSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    snapshotroot_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AllowSnapshotRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowSnapshotRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AllowSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AllowSnapshotRequestProto)
  return target;
}

size_t AllowSnapshotRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AllowSnapshotRequestProto)
  size_t total_size = 0;

  // required string snapshotRoot = 1;
  if (_internal_has_snapshotroot()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowSnapshotRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AllowSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AllowSnapshotRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AllowSnapshotRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AllowSnapshotRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AllowSnapshotRequestProto)
    MergeFrom(*source);
  }
}

void AllowSnapshotRequestProto::MergeFrom(
    const AllowSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AllowSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_snapshotroot()) {
    _has_bits_[0] |= 0x00000001u;
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
}

void AllowSnapshotRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AllowSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowSnapshotRequestProto::CopyFrom(
    const AllowSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AllowSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AllowSnapshotRequestProto::InternalSwap(AllowSnapshotRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowSnapshotRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AllowSnapshotResponseProto::InitAsDefaultInstance() {}
class AllowSnapshotResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AllowSnapshotResponseProto>()._has_bits_);
};

AllowSnapshotResponseProto::AllowSnapshotResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.AllowSnapshotResponseProto)
}
AllowSnapshotResponseProto::AllowSnapshotResponseProto(
    const AllowSnapshotResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.AllowSnapshotResponseProto)
}

void AllowSnapshotResponseProto::SharedCtor() {}

AllowSnapshotResponseProto::~AllowSnapshotResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.AllowSnapshotResponseProto)
  SharedDtor();
}

void AllowSnapshotResponseProto::SharedDtor() {}

void AllowSnapshotResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowSnapshotResponseProto&
AllowSnapshotResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AllowSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void AllowSnapshotResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.AllowSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AllowSnapshotResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowSnapshotResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.AllowSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.AllowSnapshotResponseProto)
  return target;
}

size_t AllowSnapshotResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.AllowSnapshotResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowSnapshotResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.AllowSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AllowSnapshotResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AllowSnapshotResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.AllowSnapshotResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.AllowSnapshotResponseProto)
    MergeFrom(*source);
  }
}

void AllowSnapshotResponseProto::MergeFrom(
    const AllowSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.AllowSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void AllowSnapshotResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.AllowSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowSnapshotResponseProto::CopyFrom(
    const AllowSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.AllowSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowSnapshotResponseProto::IsInitialized() const { return true; }

void AllowSnapshotResponseProto::InternalSwap(
    AllowSnapshotResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowSnapshotResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void DisallowSnapshotRequestProto::InitAsDefaultInstance() {}
class DisallowSnapshotRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DisallowSnapshotRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
};

DisallowSnapshotRequestProto::DisallowSnapshotRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DisallowSnapshotRequestProto)
}
DisallowSnapshotRequestProto::DisallowSnapshotRequestProto(
    const DisallowSnapshotRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DisallowSnapshotRequestProto)
}

void DisallowSnapshotRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisallowSnapshotRequestProto::~DisallowSnapshotRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DisallowSnapshotRequestProto)
  SharedDtor();
}

void DisallowSnapshotRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisallowSnapshotRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisallowSnapshotRequestProto&
DisallowSnapshotRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DisallowSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void DisallowSnapshotRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    snapshotroot_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DisallowSnapshotRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
DisallowSnapshotRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DisallowSnapshotRequestProto)
  return target;
}

size_t DisallowSnapshotRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  size_t total_size = 0;

  // required string snapshotRoot = 1;
  if (_internal_has_snapshotroot()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisallowSnapshotRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DisallowSnapshotRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          DisallowSnapshotRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DisallowSnapshotRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DisallowSnapshotRequestProto)
    MergeFrom(*source);
  }
}

void DisallowSnapshotRequestProto::MergeFrom(
    const DisallowSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from._internal_has_snapshotroot()) {
    _has_bits_[0] |= 0x00000001u;
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
}

void DisallowSnapshotRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisallowSnapshotRequestProto::CopyFrom(
    const DisallowSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DisallowSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisallowSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DisallowSnapshotRequestProto::InternalSwap(
    DisallowSnapshotRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisallowSnapshotRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void DisallowSnapshotResponseProto::InitAsDefaultInstance() {}
class DisallowSnapshotResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DisallowSnapshotResponseProto>()._has_bits_);
};

DisallowSnapshotResponseProto::DisallowSnapshotResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DisallowSnapshotResponseProto)
}
DisallowSnapshotResponseProto::DisallowSnapshotResponseProto(
    const DisallowSnapshotResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DisallowSnapshotResponseProto)
}

void DisallowSnapshotResponseProto::SharedCtor() {}

DisallowSnapshotResponseProto::~DisallowSnapshotResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DisallowSnapshotResponseProto)
  SharedDtor();
}

void DisallowSnapshotResponseProto::SharedDtor() {}

void DisallowSnapshotResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisallowSnapshotResponseProto&
DisallowSnapshotResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DisallowSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void DisallowSnapshotResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DisallowSnapshotResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
DisallowSnapshotResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DisallowSnapshotResponseProto)
  return target;
}

size_t DisallowSnapshotResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisallowSnapshotResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DisallowSnapshotResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          DisallowSnapshotResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DisallowSnapshotResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DisallowSnapshotResponseProto)
    MergeFrom(*source);
  }
}

void DisallowSnapshotResponseProto::MergeFrom(
    const DisallowSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void DisallowSnapshotResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisallowSnapshotResponseProto::CopyFrom(
    const DisallowSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DisallowSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisallowSnapshotResponseProto::IsInitialized() const { return true; }

void DisallowSnapshotResponseProto::InternalSwap(
    DisallowSnapshotResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisallowSnapshotResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void DeleteSnapshotRequestProto::InitAsDefaultInstance() {}
class DeleteSnapshotRequestProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DeleteSnapshotRequestProto>()._has_bits_);
  static void set_has_snapshotroot(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_snapshotname(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

DeleteSnapshotRequestProto::DeleteSnapshotRequestProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DeleteSnapshotRequestProto)
}
DeleteSnapshotRequestProto::DeleteSnapshotRequestProto(
    const DeleteSnapshotRequestProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotroot()) {
    snapshotroot_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotroot_);
  }
  snapshotname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotname()) {
    snapshotname_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.snapshotname_);
  }
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DeleteSnapshotRequestProto)
}

void DeleteSnapshotRequestProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto.base);
  snapshotroot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSnapshotRequestProto::~DeleteSnapshotRequestProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DeleteSnapshotRequestProto)
  SharedDtor();
}

void DeleteSnapshotRequestProto::SharedDtor() {
  snapshotroot_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSnapshotRequestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSnapshotRequestProto&
DeleteSnapshotRequestProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DeleteSnapshotRequestProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void DeleteSnapshotRequestProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      snapshotroot_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      snapshotname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeleteSnapshotRequestProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string snapshotRoot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshotroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string snapshotName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshotname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSnapshotRequestProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string snapshotRoot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotroot().data(),
        static_cast<int>(this->_internal_snapshotroot().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot");
    target = stream->WriteStringMaybeAliased(1, this->_internal_snapshotroot(),
                                             target);
  }

  // required string snapshotName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_snapshotname().data(),
        static_cast<int>(this->_internal_snapshotname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName");
    target = stream->WriteStringMaybeAliased(2, this->_internal_snapshotname(),
                                             target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DeleteSnapshotRequestProto)
  return target;
}

size_t DeleteSnapshotRequestProto::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  size_t total_size = 0;

  if (_internal_has_snapshotroot()) {
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());
  }

  if (_internal_has_snapshotname()) {
    // required string snapshotName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotname());
  }

  return total_size;
}
size_t DeleteSnapshotRequestProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) {  // All required fields are present.
    // required string snapshotRoot = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotroot());

    // required string snapshotName = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_snapshotname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotRequestProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotRequestProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          DeleteSnapshotRequestProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DeleteSnapshotRequestProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DeleteSnapshotRequestProto)
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequestProto::MergeFrom(
    const DeleteSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      snapshotroot_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotroot_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      snapshotname_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.snapshotname_);
    }
  }
}

void DeleteSnapshotRequestProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequestProto::CopyFrom(
    const DeleteSnapshotRequestProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DeleteSnapshotRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DeleteSnapshotRequestProto::InternalSwap(
    DeleteSnapshotRequestProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snapshotroot_.Swap(
      &other->snapshotroot_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  snapshotname_.Swap(
      &other->snapshotname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotRequestProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void DeleteSnapshotResponseProto::InitAsDefaultInstance() {}
class DeleteSnapshotResponseProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DeleteSnapshotResponseProto>()._has_bits_);
};

DeleteSnapshotResponseProto::DeleteSnapshotResponseProto()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hdfs.Internal.DeleteSnapshotResponseProto)
}
DeleteSnapshotResponseProto::DeleteSnapshotResponseProto(
    const DeleteSnapshotResponseProto& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hdfs.Internal.DeleteSnapshotResponseProto)
}

void DeleteSnapshotResponseProto::SharedCtor() {}

DeleteSnapshotResponseProto::~DeleteSnapshotResponseProto() {
  // @@protoc_insertion_point(destructor:Hdfs.Internal.DeleteSnapshotResponseProto)
  SharedDtor();
}

void DeleteSnapshotResponseProto::SharedDtor() {}

void DeleteSnapshotResponseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSnapshotResponseProto&
DeleteSnapshotResponseProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DeleteSnapshotResponseProto_ClientNamenodeProtocol_2eproto
           .base);
  return *internal_default_instance();
}

void DeleteSnapshotResponseProto::Clear() {
  // @@protoc_insertion_point(message_clear_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeleteSnapshotResponseProto::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSnapshotResponseProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hdfs.Internal.DeleteSnapshotResponseProto)
  return target;
}

size_t DeleteSnapshotResponseProto::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotResponseProto::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotResponseProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          DeleteSnapshotResponseProto>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hdfs.Internal.DeleteSnapshotResponseProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Hdfs.Internal.DeleteSnapshotResponseProto)
    MergeFrom(*source);
  }
}

void DeleteSnapshotResponseProto::MergeFrom(
    const DeleteSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void DeleteSnapshotResponseProto::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotResponseProto::CopyFrom(
    const DeleteSnapshotResponseProto& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Hdfs.Internal.DeleteSnapshotResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotResponseProto::IsInitialized() const { return true; }

void DeleteSnapshotResponseProto::InternalSwap(
    DeleteSnapshotResponseProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotResponseProto::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

ClientNamenodeProtocol::~ClientNamenodeProtocol() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor*
ClientNamenodeProtocol::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ClientNamenodeProtocol_2eproto);
  return file_level_service_descriptors_ClientNamenodeProtocol_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor*
ClientNamenodeProtocol::GetDescriptor() {
  return descriptor();
}

void ClientNamenodeProtocol::getBlockLocations(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetBlockLocationsRequestProto*,
    ::Hdfs::Internal::GetBlockLocationsResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getBlockLocations() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getServerDefaults(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetServerDefaultsRequestProto*,
    ::Hdfs::Internal::GetServerDefaultsResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getServerDefaults() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::create(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateRequestProto*,
    ::Hdfs::Internal::CreateResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method create() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::append(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AppendRequestProto*,
    ::Hdfs::Internal::AppendResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setReplication(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetReplicationRequestProto*,
    ::Hdfs::Internal::SetReplicationResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setReplication() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setPermission(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetPermissionRequestProto*,
    ::Hdfs::Internal::SetPermissionResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setPermission() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setOwner(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetOwnerRequestProto*,
    ::Hdfs::Internal::SetOwnerResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setOwner() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::abandonBlock(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AbandonBlockRequestProto*,
    ::Hdfs::Internal::AbandonBlockResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method abandonBlock() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addBlock(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddBlockRequestProto*,
    ::Hdfs::Internal::AddBlockResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addBlock() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getAdditionalDatanode(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto*,
    ::Hdfs::Internal::GetAdditionalDatanodeResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getAdditionalDatanode() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::complete(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CompleteRequestProto*,
    ::Hdfs::Internal::CompleteResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method complete() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::reportBadBlocks(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ReportBadBlocksRequestProto*,
    ::Hdfs::Internal::ReportBadBlocksResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reportBadBlocks() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::concat(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ConcatRequestProto*,
    ::Hdfs::Internal::ConcatResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method concat() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::truncate(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::TruncateRequestProto*,
    ::Hdfs::Internal::TruncateResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method truncate() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetLeaseRequestProto*,
    ::Hdfs::Internal::GetLeaseResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::releaseLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ReleaseLeaseRequestProto*,
    ::Hdfs::Internal::ReleaseLeaseResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method releaseLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rename(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenameRequestProto*,
    ::Hdfs::Internal::RenameResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rename() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rename2(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::Rename2RequestProto*,
    ::Hdfs::Internal::Rename2ResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rename2() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::deleteFile(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DeleteRequestProto*,
    ::Hdfs::Internal::DeleteResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method deleteFile() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::mkdirs(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::MkdirsRequestProto*,
    ::Hdfs::Internal::MkdirsResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mkdirs() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getListing(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetListingRequestProto*,
    ::Hdfs::Internal::GetListingResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getListing() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renewLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenewLeaseRequestProto*,
    ::Hdfs::Internal::RenewLeaseResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renewLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::recoverLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RecoverLeaseRequestProto*,
    ::Hdfs::Internal::RecoverLeaseResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method recoverLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFsStats(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFsStatusRequestProto*,
    ::Hdfs::Internal::GetFsStatsResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFsStats() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDatanodeReport(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDatanodeReportRequestProto*,
    ::Hdfs::Internal::GetDatanodeReportResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDatanodeReport() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getPreferredBlockSize(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto*,
    ::Hdfs::Internal::GetPreferredBlockSizeResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getPreferredBlockSize() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setSafeMode(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetSafeModeRequestProto*,
    ::Hdfs::Internal::SetSafeModeResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setSafeMode() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::saveNamespace(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SaveNamespaceRequestProto*,
    ::Hdfs::Internal::SaveNamespaceResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method saveNamespace() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rollEdits(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RollEditsRequestProto*,
    ::Hdfs::Internal::RollEditsResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rollEdits() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::restoreFailedStorage(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RestoreFailedStorageRequestProto*,
    ::Hdfs::Internal::RestoreFailedStorageResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method restoreFailedStorage() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::refreshNodes(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RefreshNodesRequestProto*,
    ::Hdfs::Internal::RefreshNodesResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method refreshNodes() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::finalizeUpgrade(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::FinalizeUpgradeRequestProto*,
    ::Hdfs::Internal::FinalizeUpgradeResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method finalizeUpgrade() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCorruptFileBlocks(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto*,
    ::Hdfs::Internal::ListCorruptFileBlocksResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCorruptFileBlocks() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::metaSave(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::MetaSaveRequestProto*,
    ::Hdfs::Internal::MetaSaveResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method metaSave() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFileInfo(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFileInfoRequestProto*,
    ::Hdfs::Internal::GetFileInfoResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFileInfo() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddCacheDirectiveRequestProto*,
    ::Hdfs::Internal::AddCacheDirectiveResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::modifyCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto*,
    ::Hdfs::Internal::ModifyCacheDirectiveResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method modifyCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::removeCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto*,
    ::Hdfs::Internal::RemoveCacheDirectiveResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removeCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCacheDirectives(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCacheDirectivesRequestProto*,
    ::Hdfs::Internal::ListCacheDirectivesResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCacheDirectives() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddCachePoolRequestProto*,
    ::Hdfs::Internal::AddCachePoolResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::modifyCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ModifyCachePoolRequestProto*,
    ::Hdfs::Internal::ModifyCachePoolResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method modifyCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::removeCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RemoveCachePoolRequestProto*,
    ::Hdfs::Internal::RemoveCachePoolResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removeCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCachePools(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCachePoolsRequestProto*,
    ::Hdfs::Internal::ListCachePoolsResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCachePools() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFileLinkInfo(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFileLinkInfoRequestProto*,
    ::Hdfs::Internal::GetFileLinkInfoResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFileLinkInfo() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getContentSummary(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetContentSummaryRequestProto*,
    ::Hdfs::Internal::GetContentSummaryResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getContentSummary() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setQuota(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetQuotaRequestProto*,
    ::Hdfs::Internal::SetQuotaResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setQuota() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::fsync(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::FsyncRequestProto*,
    ::Hdfs::Internal::FsyncResponseProto*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fsync() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setTimes(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetTimesRequestProto*,
    ::Hdfs::Internal::SetTimesResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setTimes() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createSymlink(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateSymlinkRequestProto*,
    ::Hdfs::Internal::CreateSymlinkResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createSymlink() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getLinkTarget(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetLinkTargetRequestProto*,
    ::Hdfs::Internal::GetLinkTargetResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getLinkTarget() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::updateBlockForPipeline(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto*,
    ::Hdfs::Internal::UpdateBlockForPipelineResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updateBlockForPipeline() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::updatePipeline(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::UpdatePipelineRequestProto*,
    ::Hdfs::Internal::UpdatePipelineResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updatePipeline() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDelegationTokenRequestProto*,
    ::Hdfs::Internal::GetDelegationTokenResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renewDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenewDelegationTokenRequestProto*,
    ::Hdfs::Internal::RenewDelegationTokenResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renewDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::cancelDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CancelDelegationTokenRequestProto*,
    ::Hdfs::Internal::CancelDelegationTokenResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cancelDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setBalancerBandwidth(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetBalancerBandwidthRequestProto*,
    ::Hdfs::Internal::SetBalancerBandwidthResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setBalancerBandwidth() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDataEncryptionKey(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto*,
    ::Hdfs::Internal::GetDataEncryptionKeyResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDataEncryptionKey() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateSnapshotRequestProto*,
    ::Hdfs::Internal::CreateSnapshotResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renameSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenameSnapshotRequestProto*,
    ::Hdfs::Internal::RenameSnapshotResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renameSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::allowSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AllowSnapshotRequestProto*,
    ::Hdfs::Internal::AllowSnapshotResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method allowSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::disallowSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DisallowSnapshotRequestProto*,
    ::Hdfs::Internal::DisallowSnapshotResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method disallowSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getSnapshottableDirListing(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto*,
    ::Hdfs::Internal::GetSnapshottableDirListingResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getSnapshottableDirListing() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::deleteSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DeleteSnapshotRequestProto*,
    ::Hdfs::Internal::DeleteSnapshotResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method deleteSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getSnapshotDiffReport(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto*,
    ::Hdfs::Internal::GetSnapshotDiffReportResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getSnapshotDiffReport() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::isFileClosed(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::IsFileClosedRequestProto*,
    ::Hdfs::Internal::IsFileClosedResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method isFileClosed() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createEncryptionZone(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateEncryptionZoneRequestProto*,
    ::Hdfs::Internal::CreateEncryptionZoneResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createEncryptionZone() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listEncryptionZones(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListEncryptionZonesRequestProto*,
    ::Hdfs::Internal::ListEncryptionZonesResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listEncryptionZones() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getEZForPath(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetEZForPathRequestProto*,
    ::Hdfs::Internal::GetEZForPathResponseProto*,
    ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getEZForPath() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::CallMethod(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::PROTOBUF_NAMESPACE_ID::Message* request,
    ::PROTOBUF_NAMESPACE_ID::Message* response,
    ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(
      method->service(),
      file_level_service_descriptors_ClientNamenodeProtocol_2eproto[0]);
  switch (method->index()) {
    case 0:
      getBlockLocations(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetBlockLocationsRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetBlockLocationsResponseProto*>(response),
          done);
      break;
    case 1:
      getServerDefaults(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetServerDefaultsRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetServerDefaultsResponseProto*>(response),
          done);
      break;
    case 2:
      create(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 const ::Hdfs::Internal::CreateRequestProto*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 ::Hdfs::Internal::CreateResponseProto*>(response),
             done);
      break;
    case 3:
      append(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 const ::Hdfs::Internal::AppendRequestProto*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 ::Hdfs::Internal::AppendResponseProto*>(response),
             done);
      break;
    case 4:
      setReplication(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::SetReplicationRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::SetReplicationResponseProto*>(response),
          done);
      break;
    case 5:
      setPermission(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::SetPermissionRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::SetPermissionResponseProto*>(response),
          done);
      break;
    case 6:
      setOwner(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::SetOwnerRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::SetOwnerResponseProto*>(response),
               done);
      break;
    case 7:
      abandonBlock(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::AbandonBlockRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::AbandonBlockResponseProto*>(response),
          done);
      break;
    case 8:
      addBlock(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::AddBlockRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::AddBlockResponseProto*>(response),
               done);
      break;
    case 9:
      getAdditionalDatanode(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetAdditionalDatanodeResponseProto*>(response),
          done);
      break;
    case 10:
      complete(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::CompleteRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::CompleteResponseProto*>(response),
               done);
      break;
    case 11:
      reportBadBlocks(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ReportBadBlocksRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ReportBadBlocksResponseProto*>(response),
          done);
      break;
    case 12:
      concat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 const ::Hdfs::Internal::ConcatRequestProto*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 ::Hdfs::Internal::ConcatResponseProto*>(response),
             done);
      break;
    case 13:
      truncate(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::TruncateRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::TruncateResponseProto*>(response),
               done);
      break;
    case 14:
      getLease(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::GetLeaseRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::GetLeaseResponseProto*>(response),
               done);
      break;
    case 15:
      releaseLease(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ReleaseLeaseRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ReleaseLeaseResponseProto*>(response),
          done);
      break;
    case 16:
      rename(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 const ::Hdfs::Internal::RenameRequestProto*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 ::Hdfs::Internal::RenameResponseProto*>(response),
             done);
      break;
    case 17:
      rename2(controller,
              ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                  const ::Hdfs::Internal::Rename2RequestProto*>(request),
              ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                  ::Hdfs::Internal::Rename2ResponseProto*>(response),
              done);
      break;
    case 18:
      deleteFile(controller,
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     const ::Hdfs::Internal::DeleteRequestProto*>(request),
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     ::Hdfs::Internal::DeleteResponseProto*>(response),
                 done);
      break;
    case 19:
      mkdirs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 const ::Hdfs::Internal::MkdirsRequestProto*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                 ::Hdfs::Internal::MkdirsResponseProto*>(response),
             done);
      break;
    case 20:
      getListing(controller,
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     const ::Hdfs::Internal::GetListingRequestProto*>(request),
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     ::Hdfs::Internal::GetListingResponseProto*>(response),
                 done);
      break;
    case 21:
      renewLease(controller,
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     const ::Hdfs::Internal::RenewLeaseRequestProto*>(request),
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     ::Hdfs::Internal::RenewLeaseResponseProto*>(response),
                 done);
      break;
    case 22:
      recoverLease(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RecoverLeaseRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RecoverLeaseResponseProto*>(response),
          done);
      break;
    case 23:
      getFsStats(controller,
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     const ::Hdfs::Internal::GetFsStatusRequestProto*>(request),
                 ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                     ::Hdfs::Internal::GetFsStatsResponseProto*>(response),
                 done);
      break;
    case 24:
      getDatanodeReport(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetDatanodeReportRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetDatanodeReportResponseProto*>(response),
          done);
      break;
    case 25:
      getPreferredBlockSize(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetPreferredBlockSizeResponseProto*>(response),
          done);
      break;
    case 26:
      setSafeMode(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::SetSafeModeRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::SetSafeModeResponseProto*>(response),
          done);
      break;
    case 27:
      saveNamespace(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::SaveNamespaceRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::SaveNamespaceResponseProto*>(response),
          done);
      break;
    case 28:
      rollEdits(controller,
                ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                    const ::Hdfs::Internal::RollEditsRequestProto*>(request),
                ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                    ::Hdfs::Internal::RollEditsResponseProto*>(response),
                done);
      break;
    case 29:
      restoreFailedStorage(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RestoreFailedStorageRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RestoreFailedStorageResponseProto*>(response),
          done);
      break;
    case 30:
      refreshNodes(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RefreshNodesRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RefreshNodesResponseProto*>(response),
          done);
      break;
    case 31:
      finalizeUpgrade(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::FinalizeUpgradeRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::FinalizeUpgradeResponseProto*>(response),
          done);
      break;
    case 32:
      listCorruptFileBlocks(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ListCorruptFileBlocksResponseProto*>(response),
          done);
      break;
    case 33:
      metaSave(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::MetaSaveRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::MetaSaveResponseProto*>(response),
               done);
      break;
    case 34:
      getFileInfo(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetFileInfoRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetFileInfoResponseProto*>(response),
          done);
      break;
    case 35:
      addCacheDirective(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::AddCacheDirectiveRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::AddCacheDirectiveResponseProto*>(response),
          done);
      break;
    case 36:
      modifyCacheDirective(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ModifyCacheDirectiveResponseProto*>(response),
          done);
      break;
    case 37:
      removeCacheDirective(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RemoveCacheDirectiveResponseProto*>(response),
          done);
      break;
    case 38:
      listCacheDirectives(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ListCacheDirectivesRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ListCacheDirectivesResponseProto*>(response),
          done);
      break;
    case 39:
      addCachePool(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::AddCachePoolRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::AddCachePoolResponseProto*>(response),
          done);
      break;
    case 40:
      modifyCachePool(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ModifyCachePoolRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ModifyCachePoolResponseProto*>(response),
          done);
      break;
    case 41:
      removeCachePool(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RemoveCachePoolRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RemoveCachePoolResponseProto*>(response),
          done);
      break;
    case 42:
      listCachePools(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ListCachePoolsRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ListCachePoolsResponseProto*>(response),
          done);
      break;
    case 43:
      getFileLinkInfo(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetFileLinkInfoRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetFileLinkInfoResponseProto*>(response),
          done);
      break;
    case 44:
      getContentSummary(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetContentSummaryRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetContentSummaryResponseProto*>(response),
          done);
      break;
    case 45:
      setQuota(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::SetQuotaRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::SetQuotaResponseProto*>(response),
               done);
      break;
    case 46:
      fsync(controller,
            ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                const ::Hdfs::Internal::FsyncRequestProto*>(request),
            ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                ::Hdfs::Internal::FsyncResponseProto*>(response),
            done);
      break;
    case 47:
      setTimes(controller,
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   const ::Hdfs::Internal::SetTimesRequestProto*>(request),
               ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                   ::Hdfs::Internal::SetTimesResponseProto*>(response),
               done);
      break;
    case 48:
      createSymlink(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::CreateSymlinkRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::CreateSymlinkResponseProto*>(response),
          done);
      break;
    case 49:
      getLinkTarget(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetLinkTargetRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetLinkTargetResponseProto*>(response),
          done);
      break;
    case 50:
      updateBlockForPipeline(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::UpdateBlockForPipelineResponseProto*>(response),
          done);
      break;
    case 51:
      updatePipeline(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::UpdatePipelineRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::UpdatePipelineResponseProto*>(response),
          done);
      break;
    case 52:
      getDelegationToken(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetDelegationTokenRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetDelegationTokenResponseProto*>(response),
          done);
      break;
    case 53:
      renewDelegationToken(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RenewDelegationTokenRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RenewDelegationTokenResponseProto*>(response),
          done);
      break;
    case 54:
      cancelDelegationToken(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::CancelDelegationTokenRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::CancelDelegationTokenResponseProto*>(response),
          done);
      break;
    case 55:
      setBalancerBandwidth(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::SetBalancerBandwidthRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::SetBalancerBandwidthResponseProto*>(response),
          done);
      break;
    case 56:
      getDataEncryptionKey(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetDataEncryptionKeyResponseProto*>(response),
          done);
      break;
    case 57:
      createSnapshot(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::CreateSnapshotRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::CreateSnapshotResponseProto*>(response),
          done);
      break;
    case 58:
      renameSnapshot(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::RenameSnapshotRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::RenameSnapshotResponseProto*>(response),
          done);
      break;
    case 59:
      allowSnapshot(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::AllowSnapshotRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::AllowSnapshotResponseProto*>(response),
          done);
      break;
    case 60:
      disallowSnapshot(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::DisallowSnapshotRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::DisallowSnapshotResponseProto*>(response),
          done);
      break;
    case 61:
      getSnapshottableDirListing(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetSnapshottableDirListingResponseProto*>(
              response),
          done);
      break;
    case 62:
      deleteSnapshot(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::DeleteSnapshotRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::DeleteSnapshotResponseProto*>(response),
          done);
      break;
    case 63:
      getSnapshotDiffReport(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetSnapshotDiffReportResponseProto*>(response),
          done);
      break;
    case 64:
      isFileClosed(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::IsFileClosedRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::IsFileClosedResponseProto*>(response),
          done);
      break;
    case 65:
      createEncryptionZone(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::CreateEncryptionZoneRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::CreateEncryptionZoneResponseProto*>(response),
          done);
      break;
    case 66:
      listEncryptionZones(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::ListEncryptionZonesRequestProto*>(
              request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::ListEncryptionZonesResponseProto*>(response),
          done);
      break;
    case 67:
      getEZForPath(
          controller,
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              const ::Hdfs::Internal::GetEZForPathRequestProto*>(request),
          ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
              ::Hdfs::Internal::GetEZForPathResponseProto*>(response),
          done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message&
ClientNamenodeProtocol::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::Hdfs::Internal::GetBlockLocationsRequestProto::
          default_instance();
    case 1:
      return ::Hdfs::Internal::GetServerDefaultsRequestProto::
          default_instance();
    case 2:
      return ::Hdfs::Internal::CreateRequestProto::default_instance();
    case 3:
      return ::Hdfs::Internal::AppendRequestProto::default_instance();
    case 4:
      return ::Hdfs::Internal::SetReplicationRequestProto::default_instance();
    case 5:
      return ::Hdfs::Internal::SetPermissionRequestProto::default_instance();
    case 6:
      return ::Hdfs::Internal::SetOwnerRequestProto::default_instance();
    case 7:
      return ::Hdfs::Internal::AbandonBlockRequestProto::default_instance();
    case 8:
      return ::Hdfs::Internal::AddBlockRequestProto::default_instance();
    case 9:
      return ::Hdfs::Internal::GetAdditionalDatanodeRequestProto::
          default_instance();
    case 10:
      return ::Hdfs::Internal::CompleteRequestProto::default_instance();
    case 11:
      return ::Hdfs::Internal::ReportBadBlocksRequestProto::default_instance();
    case 12:
      return ::Hdfs::Internal::ConcatRequestProto::default_instance();
    case 13:
      return ::Hdfs::Internal::TruncateRequestProto::default_instance();
    case 14:
      return ::Hdfs::Internal::GetLeaseRequestProto::default_instance();
    case 15:
      return ::Hdfs::Internal::ReleaseLeaseRequestProto::default_instance();
    case 16:
      return ::Hdfs::Internal::RenameRequestProto::default_instance();
    case 17:
      return ::Hdfs::Internal::Rename2RequestProto::default_instance();
    case 18:
      return ::Hdfs::Internal::DeleteRequestProto::default_instance();
    case 19:
      return ::Hdfs::Internal::MkdirsRequestProto::default_instance();
    case 20:
      return ::Hdfs::Internal::GetListingRequestProto::default_instance();
    case 21:
      return ::Hdfs::Internal::RenewLeaseRequestProto::default_instance();
    case 22:
      return ::Hdfs::Internal::RecoverLeaseRequestProto::default_instance();
    case 23:
      return ::Hdfs::Internal::GetFsStatusRequestProto::default_instance();
    case 24:
      return ::Hdfs::Internal::GetDatanodeReportRequestProto::
          default_instance();
    case 25:
      return ::Hdfs::Internal::GetPreferredBlockSizeRequestProto::
          default_instance();
    case 26:
      return ::Hdfs::Internal::SetSafeModeRequestProto::default_instance();
    case 27:
      return ::Hdfs::Internal::SaveNamespaceRequestProto::default_instance();
    case 28:
      return ::Hdfs::Internal::RollEditsRequestProto::default_instance();
    case 29:
      return ::Hdfs::Internal::RestoreFailedStorageRequestProto::
          default_instance();
    case 30:
      return ::Hdfs::Internal::RefreshNodesRequestProto::default_instance();
    case 31:
      return ::Hdfs::Internal::FinalizeUpgradeRequestProto::default_instance();
    case 32:
      return ::Hdfs::Internal::ListCorruptFileBlocksRequestProto::
          default_instance();
    case 33:
      return ::Hdfs::Internal::MetaSaveRequestProto::default_instance();
    case 34:
      return ::Hdfs::Internal::GetFileInfoRequestProto::default_instance();
    case 35:
      return ::Hdfs::Internal::AddCacheDirectiveRequestProto::
          default_instance();
    case 36:
      return ::Hdfs::Internal::ModifyCacheDirectiveRequestProto::
          default_instance();
    case 37:
      return ::Hdfs::Internal::RemoveCacheDirectiveRequestProto::
          default_instance();
    case 38:
      return ::Hdfs::Internal::ListCacheDirectivesRequestProto::
          default_instance();
    case 39:
      return ::Hdfs::Internal::AddCachePoolRequestProto::default_instance();
    case 40:
      return ::Hdfs::Internal::ModifyCachePoolRequestProto::default_instance();
    case 41:
      return ::Hdfs::Internal::RemoveCachePoolRequestProto::default_instance();
    case 42:
      return ::Hdfs::Internal::ListCachePoolsRequestProto::default_instance();
    case 43:
      return ::Hdfs::Internal::GetFileLinkInfoRequestProto::default_instance();
    case 44:
      return ::Hdfs::Internal::GetContentSummaryRequestProto::
          default_instance();
    case 45:
      return ::Hdfs::Internal::SetQuotaRequestProto::default_instance();
    case 46:
      return ::Hdfs::Internal::FsyncRequestProto::default_instance();
    case 47:
      return ::Hdfs::Internal::SetTimesRequestProto::default_instance();
    case 48:
      return ::Hdfs::Internal::CreateSymlinkRequestProto::default_instance();
    case 49:
      return ::Hdfs::Internal::GetLinkTargetRequestProto::default_instance();
    case 50:
      return ::Hdfs::Internal::UpdateBlockForPipelineRequestProto::
          default_instance();
    case 51:
      return ::Hdfs::Internal::UpdatePipelineRequestProto::default_instance();
    case 52:
      return ::Hdfs::Internal::GetDelegationTokenRequestProto::
          default_instance();
    case 53:
      return ::Hdfs::Internal::RenewDelegationTokenRequestProto::
          default_instance();
    case 54:
      return ::Hdfs::Internal::CancelDelegationTokenRequestProto::
          default_instance();
    case 55:
      return ::Hdfs::Internal::SetBalancerBandwidthRequestProto::
          default_instance();
    case 56:
      return ::Hdfs::Internal::GetDataEncryptionKeyRequestProto::
          default_instance();
    case 57:
      return ::Hdfs::Internal::CreateSnapshotRequestProto::default_instance();
    case 58:
      return ::Hdfs::Internal::RenameSnapshotRequestProto::default_instance();
    case 59:
      return ::Hdfs::Internal::AllowSnapshotRequestProto::default_instance();
    case 60:
      return ::Hdfs::Internal::DisallowSnapshotRequestProto::default_instance();
    case 61:
      return ::Hdfs::Internal::GetSnapshottableDirListingRequestProto::
          default_instance();
    case 62:
      return ::Hdfs::Internal::DeleteSnapshotRequestProto::default_instance();
    case 63:
      return ::Hdfs::Internal::GetSnapshotDiffReportRequestProto::
          default_instance();
    case 64:
      return ::Hdfs::Internal::IsFileClosedRequestProto::default_instance();
    case 65:
      return ::Hdfs::Internal::CreateEncryptionZoneRequestProto::
          default_instance();
    case 66:
      return ::Hdfs::Internal::ListEncryptionZonesRequestProto::
          default_instance();
    case 67:
      return ::Hdfs::Internal::GetEZForPathRequestProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message&
ClientNamenodeProtocol::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::Hdfs::Internal::GetBlockLocationsResponseProto::
          default_instance();
    case 1:
      return ::Hdfs::Internal::GetServerDefaultsResponseProto::
          default_instance();
    case 2:
      return ::Hdfs::Internal::CreateResponseProto::default_instance();
    case 3:
      return ::Hdfs::Internal::AppendResponseProto::default_instance();
    case 4:
      return ::Hdfs::Internal::SetReplicationResponseProto::default_instance();
    case 5:
      return ::Hdfs::Internal::SetPermissionResponseProto::default_instance();
    case 6:
      return ::Hdfs::Internal::SetOwnerResponseProto::default_instance();
    case 7:
      return ::Hdfs::Internal::AbandonBlockResponseProto::default_instance();
    case 8:
      return ::Hdfs::Internal::AddBlockResponseProto::default_instance();
    case 9:
      return ::Hdfs::Internal::GetAdditionalDatanodeResponseProto::
          default_instance();
    case 10:
      return ::Hdfs::Internal::CompleteResponseProto::default_instance();
    case 11:
      return ::Hdfs::Internal::ReportBadBlocksResponseProto::default_instance();
    case 12:
      return ::Hdfs::Internal::ConcatResponseProto::default_instance();
    case 13:
      return ::Hdfs::Internal::TruncateResponseProto::default_instance();
    case 14:
      return ::Hdfs::Internal::GetLeaseResponseProto::default_instance();
    case 15:
      return ::Hdfs::Internal::ReleaseLeaseResponseProto::default_instance();
    case 16:
      return ::Hdfs::Internal::RenameResponseProto::default_instance();
    case 17:
      return ::Hdfs::Internal::Rename2ResponseProto::default_instance();
    case 18:
      return ::Hdfs::Internal::DeleteResponseProto::default_instance();
    case 19:
      return ::Hdfs::Internal::MkdirsResponseProto::default_instance();
    case 20:
      return ::Hdfs::Internal::GetListingResponseProto::default_instance();
    case 21:
      return ::Hdfs::Internal::RenewLeaseResponseProto::default_instance();
    case 22:
      return ::Hdfs::Internal::RecoverLeaseResponseProto::default_instance();
    case 23:
      return ::Hdfs::Internal::GetFsStatsResponseProto::default_instance();
    case 24:
      return ::Hdfs::Internal::GetDatanodeReportResponseProto::
          default_instance();
    case 25:
      return ::Hdfs::Internal::GetPreferredBlockSizeResponseProto::
          default_instance();
    case 26:
      return ::Hdfs::Internal::SetSafeModeResponseProto::default_instance();
    case 27:
      return ::Hdfs::Internal::SaveNamespaceResponseProto::default_instance();
    case 28:
      return ::Hdfs::Internal::RollEditsResponseProto::default_instance();
    case 29:
      return ::Hdfs::Internal::RestoreFailedStorageResponseProto::
          default_instance();
    case 30:
      return ::Hdfs::Internal::RefreshNodesResponseProto::default_instance();
    case 31:
      return ::Hdfs::Internal::FinalizeUpgradeResponseProto::default_instance();
    case 32:
      return ::Hdfs::Internal::ListCorruptFileBlocksResponseProto::
          default_instance();
    case 33:
      return ::Hdfs::Internal::MetaSaveResponseProto::default_instance();
    case 34:
      return ::Hdfs::Internal::GetFileInfoResponseProto::default_instance();
    case 35:
      return ::Hdfs::Internal::AddCacheDirectiveResponseProto::
          default_instance();
    case 36:
      return ::Hdfs::Internal::ModifyCacheDirectiveResponseProto::
          default_instance();
    case 37:
      return ::Hdfs::Internal::RemoveCacheDirectiveResponseProto::
          default_instance();
    case 38:
      return ::Hdfs::Internal::ListCacheDirectivesResponseProto::
          default_instance();
    case 39:
      return ::Hdfs::Internal::AddCachePoolResponseProto::default_instance();
    case 40:
      return ::Hdfs::Internal::ModifyCachePoolResponseProto::default_instance();
    case 41:
      return ::Hdfs::Internal::RemoveCachePoolResponseProto::default_instance();
    case 42:
      return ::Hdfs::Internal::ListCachePoolsResponseProto::default_instance();
    case 43:
      return ::Hdfs::Internal::GetFileLinkInfoResponseProto::default_instance();
    case 44:
      return ::Hdfs::Internal::GetContentSummaryResponseProto::
          default_instance();
    case 45:
      return ::Hdfs::Internal::SetQuotaResponseProto::default_instance();
    case 46:
      return ::Hdfs::Internal::FsyncResponseProto::default_instance();
    case 47:
      return ::Hdfs::Internal::SetTimesResponseProto::default_instance();
    case 48:
      return ::Hdfs::Internal::CreateSymlinkResponseProto::default_instance();
    case 49:
      return ::Hdfs::Internal::GetLinkTargetResponseProto::default_instance();
    case 50:
      return ::Hdfs::Internal::UpdateBlockForPipelineResponseProto::
          default_instance();
    case 51:
      return ::Hdfs::Internal::UpdatePipelineResponseProto::default_instance();
    case 52:
      return ::Hdfs::Internal::GetDelegationTokenResponseProto::
          default_instance();
    case 53:
      return ::Hdfs::Internal::RenewDelegationTokenResponseProto::
          default_instance();
    case 54:
      return ::Hdfs::Internal::CancelDelegationTokenResponseProto::
          default_instance();
    case 55:
      return ::Hdfs::Internal::SetBalancerBandwidthResponseProto::
          default_instance();
    case 56:
      return ::Hdfs::Internal::GetDataEncryptionKeyResponseProto::
          default_instance();
    case 57:
      return ::Hdfs::Internal::CreateSnapshotResponseProto::default_instance();
    case 58:
      return ::Hdfs::Internal::RenameSnapshotResponseProto::default_instance();
    case 59:
      return ::Hdfs::Internal::AllowSnapshotResponseProto::default_instance();
    case 60:
      return ::Hdfs::Internal::DisallowSnapshotResponseProto::
          default_instance();
    case 61:
      return ::Hdfs::Internal::GetSnapshottableDirListingResponseProto::
          default_instance();
    case 62:
      return ::Hdfs::Internal::DeleteSnapshotResponseProto::default_instance();
    case 63:
      return ::Hdfs::Internal::GetSnapshotDiffReportResponseProto::
          default_instance();
    case 64:
      return ::Hdfs::Internal::IsFileClosedResponseProto::default_instance();
    case 65:
      return ::Hdfs::Internal::CreateEncryptionZoneResponseProto::
          default_instance();
    case 66:
      return ::Hdfs::Internal::ListEncryptionZonesResponseProto::
          default_instance();
    case 67:
      return ::Hdfs::Internal::GetEZForPathResponseProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->output_type());
  }
}

ClientNamenodeProtocol_Stub::ClientNamenodeProtocol_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}
ClientNamenodeProtocol_Stub::ClientNamenodeProtocol_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ClientNamenodeProtocol_Stub::~ClientNamenodeProtocol_Stub() {
  if (owns_channel_) delete channel_;
}

void ClientNamenodeProtocol_Stub::getBlockLocations(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
    ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getServerDefaults(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
    ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::create(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateRequestProto* request,
    ::Hdfs::Internal::CreateResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::append(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AppendRequestProto* request,
    ::Hdfs::Internal::AppendResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setReplication(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetReplicationRequestProto* request,
    ::Hdfs::Internal::SetReplicationResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setPermission(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetPermissionRequestProto* request,
    ::Hdfs::Internal::SetPermissionResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setOwner(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetOwnerRequestProto* request,
    ::Hdfs::Internal::SetOwnerResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::abandonBlock(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AbandonBlockRequestProto* request,
    ::Hdfs::Internal::AbandonBlockResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::addBlock(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddBlockRequestProto* request,
    ::Hdfs::Internal::AddBlockResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getAdditionalDatanode(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
    ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::complete(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CompleteRequestProto* request,
    ::Hdfs::Internal::CompleteResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::reportBadBlocks(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
    ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::concat(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ConcatRequestProto* request,
    ::Hdfs::Internal::ConcatResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::truncate(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::TruncateRequestProto* request,
    ::Hdfs::Internal::TruncateResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetLeaseRequestProto* request,
    ::Hdfs::Internal::GetLeaseResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::releaseLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
    ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::rename(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenameRequestProto* request,
    ::Hdfs::Internal::RenameResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::rename2(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::Rename2RequestProto* request,
    ::Hdfs::Internal::Rename2ResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::deleteFile(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DeleteRequestProto* request,
    ::Hdfs::Internal::DeleteResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::mkdirs(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::MkdirsRequestProto* request,
    ::Hdfs::Internal::MkdirsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getListing(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetListingRequestProto* request,
    ::Hdfs::Internal::GetListingResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::renewLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenewLeaseRequestProto* request,
    ::Hdfs::Internal::RenewLeaseResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::recoverLease(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
    ::Hdfs::Internal::RecoverLeaseResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getFsStats(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFsStatusRequestProto* request,
    ::Hdfs::Internal::GetFsStatsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getDatanodeReport(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
    ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getPreferredBlockSize(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
    ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setSafeMode(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetSafeModeRequestProto* request,
    ::Hdfs::Internal::SetSafeModeResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::saveNamespace(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
    ::Hdfs::Internal::SaveNamespaceResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::rollEdits(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RollEditsRequestProto* request,
    ::Hdfs::Internal::RollEditsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::restoreFailedStorage(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
    ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::refreshNodes(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RefreshNodesRequestProto* request,
    ::Hdfs::Internal::RefreshNodesResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::finalizeUpgrade(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
    ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::listCorruptFileBlocks(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
    ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::metaSave(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::MetaSaveRequestProto* request,
    ::Hdfs::Internal::MetaSaveResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getFileInfo(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFileInfoRequestProto* request,
    ::Hdfs::Internal::GetFileInfoResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::addCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
    ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::modifyCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
    ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::removeCacheDirective(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
    ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::listCacheDirectives(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
    ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::addCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AddCachePoolRequestProto* request,
    ::Hdfs::Internal::AddCachePoolResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::modifyCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
    ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::removeCachePool(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
    ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::listCachePools(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
    ::Hdfs::Internal::ListCachePoolsResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(42), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getFileLinkInfo(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
    ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(43), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getContentSummary(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
    ::Hdfs::Internal::GetContentSummaryResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(44), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setQuota(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetQuotaRequestProto* request,
    ::Hdfs::Internal::SetQuotaResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(45), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::fsync(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::FsyncRequestProto* request,
    ::Hdfs::Internal::FsyncResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(46), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setTimes(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetTimesRequestProto* request,
    ::Hdfs::Internal::SetTimesResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(47), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::createSymlink(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
    ::Hdfs::Internal::CreateSymlinkResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(48), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getLinkTarget(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
    ::Hdfs::Internal::GetLinkTargetResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(49), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::updateBlockForPipeline(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
    ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(50), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::updatePipeline(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
    ::Hdfs::Internal::UpdatePipelineResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(51), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
    ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(52), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::renewDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
    ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(53), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::cancelDelegationToken(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
    ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(54), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::setBalancerBandwidth(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
    ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(55), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getDataEncryptionKey(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
    ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(56), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::createSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
    ::Hdfs::Internal::CreateSnapshotResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(57), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::renameSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
    ::Hdfs::Internal::RenameSnapshotResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(58), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::allowSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
    ::Hdfs::Internal::AllowSnapshotResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(59), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::disallowSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
    ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(60), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getSnapshottableDirListing(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
    ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(61), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::deleteSnapshot(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
    ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(62), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getSnapshotDiffReport(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
    ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(63), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::isFileClosed(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::IsFileClosedRequestProto* request,
    ::Hdfs::Internal::IsFileClosedResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(64), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::createEncryptionZone(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
    ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(65), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::listEncryptionZones(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
    ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(66), controller, request, response,
                       done);
}
void ClientNamenodeProtocol_Stub::getEZForPath(
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::Hdfs::Internal::GetEZForPathRequestProto* request,
    ::Hdfs::Internal::GetEZForPathResponseProto* response,
    ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(67), controller, request, response,
                       done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetBlockLocationsRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocationsRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetBlockLocationsRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetBlockLocationsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocationsResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetBlockLocationsResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetServerDefaultsRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetServerDefaultsRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetServerDefaultsRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetServerDefaultsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetServerDefaultsResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetServerDefaultsResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AppendRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AppendRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AppendRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AppendResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AppendResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AppendResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetReplicationRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetReplicationRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetReplicationRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetReplicationResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetReplicationResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetReplicationResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetPermissionRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetPermissionRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetPermissionRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetPermissionResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetPermissionResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetPermissionResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetOwnerRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetOwnerRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetOwnerRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetOwnerResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetOwnerResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetOwnerResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AbandonBlockRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AbandonBlockRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AbandonBlockRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AbandonBlockResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AbandonBlockResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AbandonBlockResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddBlockRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddBlockRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AddBlockRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddBlockResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddBlockResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AddBlockResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetAdditionalDatanodeRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetAdditionalDatanodeRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetAdditionalDatanodeRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetAdditionalDatanodeResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetAdditionalDatanodeResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetAdditionalDatanodeResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CompleteRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CompleteRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CompleteRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CompleteResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CompleteResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CompleteResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ReportBadBlocksRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ReportBadBlocksRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ReportBadBlocksRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ReportBadBlocksResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ReportBadBlocksResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ReportBadBlocksResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ConcatRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ConcatRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ConcatRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ConcatResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ConcatResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ConcatResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::TruncateRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::TruncateRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::TruncateRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::TruncateResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::TruncateResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::TruncateResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetLeaseRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetLeaseRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetLeaseRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetLeaseResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetLeaseResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetLeaseResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ReleaseLeaseRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ReleaseLeaseRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ReleaseLeaseRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ReleaseLeaseResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ReleaseLeaseResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ReleaseLeaseResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenameRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenameRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenameRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenameResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenameResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenameResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::Rename2RequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::Rename2RequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::Rename2RequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::Rename2ResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::Rename2ResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::Rename2ResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DeleteRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DeleteRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DeleteResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DeleteResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::MkdirsRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::MkdirsRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::MkdirsRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::MkdirsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::MkdirsResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::MkdirsResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetListingRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetListingRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetListingRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetListingResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetListingResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetListingResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetSnapshottableDirListingRequestProto*
Arena::CreateMaybeMessage<
    ::Hdfs::Internal::GetSnapshottableDirListingRequestProto>(Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetSnapshottableDirListingRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetSnapshottableDirListingResponseProto*
Arena::CreateMaybeMessage<
    ::Hdfs::Internal::GetSnapshottableDirListingResponseProto>(Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetSnapshottableDirListingResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetSnapshotDiffReportRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshotDiffReportRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetSnapshotDiffReportRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetSnapshotDiffReportResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshotDiffReportResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetSnapshotDiffReportResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenewLeaseRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenewLeaseRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenewLeaseRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenewLeaseResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenewLeaseResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenewLeaseResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RecoverLeaseRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RecoverLeaseRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RecoverLeaseRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RecoverLeaseResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RecoverLeaseResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RecoverLeaseResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFsStatusRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFsStatusRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFsStatusRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFsStatsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFsStatsResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFsStatsResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetDatanodeReportRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetDatanodeReportRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetDatanodeReportRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetDatanodeReportResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetDatanodeReportResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetDatanodeReportResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetPreferredBlockSizeRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetPreferredBlockSizeRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetPreferredBlockSizeRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetPreferredBlockSizeResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetPreferredBlockSizeResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetPreferredBlockSizeResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetSafeModeRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetSafeModeRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetSafeModeRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetSafeModeResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetSafeModeResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetSafeModeResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SaveNamespaceRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SaveNamespaceRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SaveNamespaceRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SaveNamespaceResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SaveNamespaceResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SaveNamespaceResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RollEditsRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RollEditsRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RollEditsRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RollEditsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RollEditsResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RollEditsResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RestoreFailedStorageRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RestoreFailedStorageRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::RestoreFailedStorageRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RestoreFailedStorageResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RestoreFailedStorageResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::RestoreFailedStorageResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RefreshNodesRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNodesRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RefreshNodesRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RefreshNodesResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNodesResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RefreshNodesResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::FinalizeUpgradeRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::FinalizeUpgradeRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::FinalizeUpgradeRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::FinalizeUpgradeResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::FinalizeUpgradeResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::FinalizeUpgradeResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCorruptFileBlocksRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCorruptFileBlocksRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ListCorruptFileBlocksRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCorruptFileBlocksResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCorruptFileBlocksResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ListCorruptFileBlocksResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::MetaSaveRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::MetaSaveRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::MetaSaveRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::MetaSaveResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::MetaSaveResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::MetaSaveResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFileInfoRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileInfoRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFileInfoRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFileInfoResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileInfoResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFileInfoResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::IsFileClosedRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::IsFileClosedRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::IsFileClosedRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::IsFileClosedResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::IsFileClosedResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::IsFileClosedResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CacheDirectiveInfoProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CacheDirectiveInfoProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CacheDirectiveInfoExpirationProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoExpirationProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::CacheDirectiveInfoExpirationProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CacheDirectiveStatsProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveStatsProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CacheDirectiveStatsProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddCacheDirectiveRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddCacheDirectiveRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AddCacheDirectiveRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddCacheDirectiveResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddCacheDirectiveResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::AddCacheDirectiveResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ModifyCacheDirectiveRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCacheDirectiveRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ModifyCacheDirectiveRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ModifyCacheDirectiveResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCacheDirectiveResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ModifyCacheDirectiveResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RemoveCacheDirectiveRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCacheDirectiveRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::RemoveCacheDirectiveRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RemoveCacheDirectiveResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCacheDirectiveResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::RemoveCacheDirectiveResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCacheDirectivesRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCacheDirectivesRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ListCacheDirectivesRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CacheDirectiveEntryProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveEntryProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CacheDirectiveEntryProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCacheDirectivesResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCacheDirectivesResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::ListCacheDirectivesResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CachePoolInfoProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolInfoProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CachePoolInfoProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CachePoolStatsProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolStatsProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CachePoolStatsProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddCachePoolRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddCachePoolRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AddCachePoolRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AddCachePoolResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AddCachePoolResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AddCachePoolResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ModifyCachePoolRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCachePoolRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ModifyCachePoolRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ModifyCachePoolResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCachePoolResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ModifyCachePoolResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RemoveCachePoolRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCachePoolRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RemoveCachePoolRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RemoveCachePoolResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCachePoolResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RemoveCachePoolResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCachePoolsRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCachePoolsRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ListCachePoolsRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::ListCachePoolsResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::ListCachePoolsResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::ListCachePoolsResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CachePoolEntryProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolEntryProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CachePoolEntryProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFileLinkInfoRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileLinkInfoRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFileLinkInfoRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetFileLinkInfoResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileLinkInfoResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetFileLinkInfoResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetContentSummaryRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetContentSummaryRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetContentSummaryRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetContentSummaryResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetContentSummaryResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetContentSummaryResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetQuotaRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetQuotaRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetQuotaRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetQuotaResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetQuotaResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetQuotaResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::FsyncRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::FsyncRequestProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::FsyncRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::FsyncResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::FsyncResponseProto>(Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::FsyncResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetTimesRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetTimesRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetTimesRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetTimesResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetTimesResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::SetTimesResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateSymlinkRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSymlinkRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateSymlinkRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateSymlinkResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSymlinkResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateSymlinkResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetLinkTargetRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetLinkTargetRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetLinkTargetRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetLinkTargetResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetLinkTargetResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::GetLinkTargetResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::UpdateBlockForPipelineRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::UpdateBlockForPipelineRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::UpdateBlockForPipelineRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::UpdateBlockForPipelineResponseProto*
Arena::CreateMaybeMessage<
    ::Hdfs::Internal::UpdateBlockForPipelineResponseProto>(Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::UpdateBlockForPipelineResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::UpdatePipelineRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::UpdatePipelineRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::UpdatePipelineRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::UpdatePipelineResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::UpdatePipelineResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::UpdatePipelineResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetBalancerBandwidthRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetBalancerBandwidthRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::SetBalancerBandwidthRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::SetBalancerBandwidthResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::SetBalancerBandwidthResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::SetBalancerBandwidthResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetDataEncryptionKeyRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetDataEncryptionKeyRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetDataEncryptionKeyRequestProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::GetDataEncryptionKeyResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::GetDataEncryptionKeyResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<
      ::Hdfs::Internal::GetDataEncryptionKeyResponseProto>(arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateSnapshotRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSnapshotRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateSnapshotRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::CreateSnapshotResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSnapshotResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::CreateSnapshotResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenameSnapshotRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenameSnapshotRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenameSnapshotRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::RenameSnapshotResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::RenameSnapshotResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::RenameSnapshotResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AllowSnapshotRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AllowSnapshotRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AllowSnapshotRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::AllowSnapshotResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::AllowSnapshotResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::AllowSnapshotResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DisallowSnapshotRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DisallowSnapshotRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DisallowSnapshotRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DisallowSnapshotResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DisallowSnapshotResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DisallowSnapshotResponseProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DeleteSnapshotRequestProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteSnapshotRequestProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DeleteSnapshotRequestProto>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::Hdfs::Internal::DeleteSnapshotResponseProto*
Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteSnapshotResponseProto>(
    Arena* arena) {
  return Arena::CreateInternal<::Hdfs::Internal::DeleteSnapshotResponseProto>(
      arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
